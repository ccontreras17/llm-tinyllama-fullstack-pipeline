id,response
1301,"`input()` gets user input at runtime; hardcoded values are fixed in the code."
1302,"Use `max(iterable, key=lambda x: ...)` to customize the comparison logic."
1303,"Use `string.isalpha()` — returns True if all characters are alphabetic."
1304,"`/` always returns a float, `//` returns an integer by truncating the decimal."
1305,"Check if char in `'aeiouAEIOU'` → vowel; else consonant if it’s a letter."
1306,"Use a loop to extract digits and rebuild the number in reverse."
1307,"Returns the absolute (non-negative) value of a number."
1308,"Convert to string, use `max()` to get the largest digit."
1309,"Use a while loop to extract digits with `% 10` and add them."
1310,"Python just returns as much as it can — no error if end is out of bounds."
1311,"Use `string.isdigit()` or try `int()` inside a try-except block."
1312,"Nested loops: outer for rows, inner for columns. Multiply indices."
1313,"Divide by 2 repeatedly, store remainders, and reverse them."
1314,"Check if `sqrt(n).is_integer()` or if `i*i == n` in a loop."
1315,"Use `set(s1) & set(s2)` to get shared characters."
1316,"Split sentence, loop through words, check `word.startswith(letter)`."
1317,"Use `'{:^width}'.format(text)` or `f'{text:^width}'`."
1318,"Two nested loops: outer for rows, inner for symbols — print shapes."
1319,"Sort and compare character counts using `collections.Counter()`."
1320,"Use a loop: multiply all integers from 1 to n."
1321,"Start from max(a, b); check multiples until divisible by both."
1322,"Multiply hours by 3600 and minutes by 60, then add."
1323,"Use `string.isspace()` — returns True if only whitespace."
1324,"`isupper()` checks for all uppercase, `islower()` checks for all lowercase."
1325,"Loop and use `char.isdigit()` to collect digits."
1326,"Loop and increment a counter when the target char is found."
1327,"Build a new string skipping the unwanted characters."
1328,"Check if string can be built by repeating a substring."
1329,"Capitalize first letter manually: `word[0].upper() + word[1:]`."
1330,"Remove max, then find max again — that’s the second largest."
1331,"Use list comprehension: `[x for x in lst if x is not None]`."
1332,"Use `sorted(words, key=lambda w: w[-1])` to sort by last letter."
1333,"Return `s[len(s)//2]` — use slicing if even-length."
1334,"Use slicing: `lst[::-1]`."
1335,"Use a loop and divide by 10 until the number becomes 0."
1336,"`list()` converts from iterable; `[]` is for defining manually."
1337,"Use `zip(list1, list2, list3)` — creates tuples with 3 items."
1338,"Can lead to skipped items or unexpected behavior — use copy or loop over slice."
1339,"Use `sorted(words, key=len)`."
1340,"Use `lst == sorted(lst)` or compare each element with the next."
1341,"Loop and replace target with new value using indexing or comprehension."
1342,"Use a loop or `sum(list_of_tuples, [])` to flatten."
1343,"Check each string: all letters in `'aeiouAEIOU'` and not empty."
1344,"Use `[x for x in range(n) if x % 2 == 0]`."
1345,"Use `[x for x in lst if x]` — removes False, 0, '', None, etc."
1346,"Use `{k: default for k in keys}` with a list of keys."
1347,"Use `random.randint(a, b)` or `random.random()` for floats."
1348,"Use `random.shuffle(my_list)` to shuffle in place."
1349,"Use `random.seed(value)` to make results reproducible."
1350,"Use `time.sleep(seconds)` to pause the program."
1351,"Use `time.time()` before and after the block, subtract to get duration."
1352,"Use `f'{number:,.2f}'` to format with commas."
1353,"Use `f'{num:>width}'` to align right with a specific width."
1354,"Loop through list and use `int(x)` for each string."
1355,"Use slicing: `email[email.index('@')+1:]`."
1356,"Use `set(list1) == set(list2)` if duplicates don't matter."
1357,"Loop and use `str.translate()` or regex to strip punctuation."
1358,"Use a dictionary with first letter as key, append words to list values."
1359,"Use `sorted(dicts, key=lambda x: x['key'])`."
1360,"Use `d.setdefault(key, []).append(value)` to group by key."
1361,"Use `{v: k for k, v in dict.items()}` — may lose values if duplicates."
1362,"Use `{**dict1, **dict2}` in Python 3.5+."
1363,"Use `dict.pop(key, None)`."
1364,"Use `dict.fromkeys(keys, default_value)`."
1365,"Loop and use a dictionary to increment character counts."
1366,"Use `dict(list_of_tuples)`."
1367,"Use `sorted(dict.items())` for keys, `sorted(dict.items(), key=lambda x: x[1])` for values."
1368,"Use `''.join(s.split())` or regex to remove all whitespace."
1369,"Use `len(s.split())`."
1370,"Use `s.split('.')` or `re.split(r'[.!?]', s)`."
1371,"Use `[ord(c) for c in sentence]`."
1372,"Split, count with `collections.Counter`, return `most_common(1)`."
1373,"Loop and check `char.isupper()`."
1374,"Loop and compare chars until mismatch, return matched prefix."
1375,"Toggle case every other character using index modulo 2."
1376,"Use `s.swapcase()`."
1377,"Use a counter: `+1` for `(`, `-1` for `)` — must end at zero."
1378,"Use `'-'.join(words)`."
1379,"Split, then check if `len(set(words)) != len(words)`."
1380,"Expand around each center to find longest matching palindrome."
1381,"Split by `','`, then convert each to `int`."
1382,"Use `all(isinstance(x, str) for x in lst)`."
1383,"Use `word[:-1] + word[-1].upper()` in a loop."
1384,"Use `[w for w in words if w.startswith(prefix)]`."
1385,"Use `[ [0]*cols for _ in range(rows) ]` or custom data."
1386,"Loop outer for rows, inner for columns — print row by row."
1387,"Loop and reassign: `transposed[j][i] = matrix[i][j]`."
1388,"Loop through each row and use `row.reverse()` or `[::-1]`."
1389,"Sum values where `i == j` in nested loops."
1390,"Use `[item for row in matrix for item in row]`."
1391,"Use nested loops: alternate `0` and `1` based on `(i + j) % 2`."
1392,"Extract digits with `% 10` and `// 10`, append to list."
1393,"Use loop and check `digit % 2 == 0`, then sum."
1394,"Use set to track digits; return True if a digit repeats."
1395,"Track max digit using math: `max = 0; while n: max = max(n%10, max); n //= 10`."
1396,"Sum each digit raised to the power of total digits, compare with original."
1397,"Loop from end, multiply digit by powers of 2, sum."
1398,"Check divisibility from 2 to sqrt(n), return False if any divides."
1399,"Loop until you find `n` primes, use is-prime check for each."
1400,"Extract digits, count how many are 2, 3, 5, or 7."

