id,response
901,"def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"
902,"def is_div_by_sum(n): s=n; while s>9: s=sum(int(d) for d in str(n)); return n%s==0"
903,"def digits_to_words(s): d='zero one two three four five six seven eight nine'.split(); return ''.join(d[int(c)] if c.isdigit() else c for c in s)"
904,"def to_unicode(s): return [ord(c) for c in s]"
905,"def second_largest_idx(lst): return lst.index(sorted(set(lst))[-2]) if len(set(lst))>1 else -1"
906,"def common_unique(l1,l2): return list(set(l1)&set(l2))"
907,"def clean_string(s): return ''.join(c for c in s if c.isalnum())"
908,"def rev_sum_digits(n): return n == int(str(sum(int(d) for d in str(n)))[::-1])"
909,"def count_even_words(s): return sum(len(w)%2==0 for w in s.split())"
910,"def az(): return [chr(i) for i in range(65,91)]"
911,"def is_sorted_by_len(lst): return lst == sorted(lst, key=len)"
912,"def even_pairs(lst): print([(a,b) for i,a in enumerate(lst) for b in lst[i+1:] if a*b%2==0])"
913,"def palindromes(lst): return [w for w in lst if w==w[::-1]]"
914,"def to_lowercase(lst): return [str(x).lower() for x in lst]"
915,"def most_vowels(lst): return max(lst, key=lambda w: sum(1 for c in w.lower() if c in 'aeiou'))"
916,"def strip_vowels_digits(s): return ''.join(c for c in s if not c.isdigit() and c.lower() not in 'aeiou')"
917,"def common_suffix(lst): return ''.join(x[0] for x in zip(*map(reversed,lst)) if len(set(x))==1)[::-1]"
918,"def has_even(lst): return any(x%2==0 for x in lst)"
919,"def avg_digits(n): d=[int(c) for c in str(n)]; return sum(d)/len(d)"
920,"def same_freq(s): return len(set(s.count(c) for c in set(s)))==1"
921,"def any_square(lst): return any(x==y**2 for x in lst for y in lst)"
922,"def clean_list(lst): import re; return [re.sub(r'[^A-Za-z ]','',x) for x in lst]"
923,"def repeated_digits(n): return sum(str(n).count(d)>1 for d in set(str(n)))"
924,"def repeat_letters(s): return [c*2 for c in s]"
925,"def uniques(lst): return [x for x in lst if lst.count(x)==1]"
926,"def round_to_3(lst): return [round(x/3)*3 for x in lst]"
927,"def most_consonants(s): return max(s.split(), key=lambda w: sum(c.lower() not in 'aeiou' and c.isalpha() for c in w))"
928,"def sum_digits_single(s): total = sum(int(c) for c in s if c.isdigit()); return total if total<10 else sum_digits_single(str(total))"
929,"def vowel_counts(s): return {v:s.lower().count(v) for v in 'aeiou'}"
930,"def swap_first_last(n): s=str(n); return int(s[-1]+s[1:-1]+s[0]) if len(s)>1 else n"
931,"def reverse_prime(n): from sympy import isprime; return isprime(int(str(n)[::-1]))"
932,"def filter_3digit(lst): return [x for x in lst if isinstance(x,int) and 100<=x<=999]"
933,"def prod_digits_single(n): p=1; [p:=p*int(d) for d in str(n) if d!='0']; return p if p<10 else prod_digits_single(p)"
934,"def count_div2_5(lst): return sum(1 for x in lst if x%10==0)"
935,"def all_vowels(s): return all(v in s.lower() for v in 'aeiou')"
936,"def even_index_bools(lst): return [i%2==0 for i in range(len(lst))]"
937,"def last_letters(s): return ''.join(w[-1] for w in s.split())"
938,"def remove_above_two(s): return ''.join(c for c in s if s.count(c)<=2)"
939,"def mirror_alpha(s): return ''.join(chr(219-ord(c)) if c.isalpha() else c for c in s.lower())"
940,"def no_repeat_strings(lst): return [s for s in lst if len(set(s))==len(s)]"
941,"def strict_alt(lst): return all((lst[i]>lst[i-1])!=(lst[i]>lst[i+1]) for i in range(1,len(lst)-1))"
942,"def index_equals_val(lst): return sum(1 for i,x in enumerate(lst) if i==x)"
943,"def reverse_if_long(s): w=s.split(); return ' '.join(w[::-1]) if len(w)>5 else s"
944,"def z_vowels(s): return ''.join('z' if c.lower() in 'aeiou' else c for c in s)"
945,"def to_roman_digits(n): roman = ['','I','II','III','IV','V','VI','VII','VIII','IX']; return ''.join(roman[int(d)] for d in str(n))"
946,"def same_type(lst): return all(type(x)==type(lst[0]) for x in lst)"
947,"def same_digits(x,y): return set(str(x))==set(str(y))"
948,"def word_len_dict(s): return {w:len(w) for w in s.split()}"
949,"def rotate_div3(n): s=str(n); return any(int(s[i:]+s[:i])%3==0 for i in range(len(s)))"
950,"def even_odd_diff(n): d=[int(x) for x in str(n)]; return sum(x for x in d if x%2==0) - sum(x for x in d if x%2==1)"
951,"def sort_by_vowel_count(s): return ' '.join(sorted(s.split(), key=lambda w: sum(c in 'aeiouAEIOU' for c in w)))"
952,"def one_vowel_type(s): return len(set(c for c in s.lower() if c in 'aeiou'))==1"
953,"def alt_case(lst): return [c.lower() if i%2==0 else c.upper() for i,c in enumerate(lst)]"
954,"def ascii_div3(s): print([c for c in s if ord(c)%3==0])"
955,"def total_prime(lst): from sympy import isprime; return isprime(sum(len(x) for x in lst))"
956,"def max_sum_3(lst): return max(sum(lst[i:i+3]) for i in range(len(lst)-2))"
957,"def substr_same_ends(s): return sum(s[i]==s[j] for i in range(len(s)) for j in range(i,len(s)))"
958,"def cap_last(s): return ' '.join(w[:-1]+w[-1].upper() if w else '' for w in s.split())"
959,"def odd_chars(s): return [c for c in set(s) if s.count(c)%2==1]"
960,"def spaced_reverse(s): return '-'.join(reversed(s))"
961,"def same_chars_diff_order(s): return sorted(s)==sorted(s[::-1]) and s!=s[::-1]"
962,"def remove_firsts(s): return ''.join(s.replace(c,'',1) for c in set(s))"
963,"def most_freq_digit(lst): from collections import Counter; return Counter(''.join(map(str,lst))).most_common(1)[0][0]"
964,"def second_smallest(lst): m=float('inf'); sm=float('inf'); [m,sm:=(x, m) if x<m else (m, x) if x<sm and x!=m else (m,sm) for x in lst]; return sm"
965,"def words_len4(s): return [w for w in s.split() if len(w)==4]"
966,"def same_first_last(lst): return sum(1 for w in lst if w[0]==w[-1])"
967,"def alt_digits(n): s=str(n); return int(s[::2]), int(s[1::2])"
968,"def can_form_palindrome(s): from collections import Counter; return sum(v%2 for v in Counter(s).values())<=1"
969,"def sum_digits_pow(n): return sum(int(d) for d in str(n**len(str(n))))"
970,"def str_to_int(s): return sum((ord(c)-48)*10**i for i,c in enumerate(reversed(s)))"
971,"def max_digit_diff(n): d=[int(x) for x in str(n)]; return max(d)-min(d)"
972,"def has_3vowels(s): return any(all(s[i+k] in 'aeiou' for k in range(3)) for i in range(len(s)-2))"
973,"def alt_min_max(lst): res=[]; lst=sorted(lst); while lst: res.append(lst.pop(0) if len(res)%2==0 else lst.pop()); return res"
974,"def square_digits_rev(n): return [int(d)**2 for d in reversed(str(n))]"
975,"def count_2digit(lst): return sum(10<=abs(x)<100 for x in lst)"
976,"def alt_case_check(s): return all(s[i].isupper()!=s[i+1].isupper() for i in range(len(s)-1))"
977,"def distinct_middle(s): m=s[1:-1]; return len(set(m))"
978,"def pal_base10_2(): return [x for x in range(1,100) if str(x)==str(x)[::-1] and bin(x)[2:]==bin(x)[2:][::-1]]"
979,"def semi_palindrome(s): l=len(s)//2; return s[:l]==s[-1:-l-1:-1]"
980,"def count_odd_chars(s): return sum(ord(c)%2==1 for c in s)"
981,"def shared_halves(s): h=len(s)//2; return [c for c in set(s[:h]) if c in s[-h:]]"
982,"def remove_dup_digits(n): return int(''.join(d for d in str(n) if str(n).count(d)==1))"
983,"def alt_digit_letter(s): return all(s[i].isdigit() != s[i+1].isdigit() for i in range(len(s)-1))"
984,"def match_positions(s1,s2): return sum(a==b for a,b in zip(s1,s2))"
985,"def first_vowel_idx(s): for i,c in enumerate(s): return i if c.lower() in 'aeiou' else -1"
986,"def len_is_prime(w): from sympy import isprime; return isprime(len(w))"
987,"def remove_vowels_after_first(s): f=False; return ''.join(c if c.lower() not in 'aeiou' or not f else '' if f else (f:=True,c)[1] for c in s)"
988,"def all_palindromes(lst): return all(w==w[::-1] for w in lst)"
989,"def common_last(lst): from collections import Counter; return Counter(w[-1] for w in lst).most_common(1)[0][0]"
990,"def reverse_vowel_words(s): return ' '.join(w[::-1] if w[0].lower() in 'aeiou' else w for w in s.split())"
991,"def even_palindromes(lst): return [w for w in lst if len(w)%2==0 and w==w[::-1]]"
992,"def str_to_dict(s): return {c:i for i,c in enumerate(s)}"
993,"def is_geo_seq(lst): return all(lst[i]/lst[i-1]==lst[1]/lst[0] for i in range(2,len(lst)))"
994,"def extract_sort_digits(s): return sorted(int(c) for c in s if c.isdigit())"
995,"def replace_repeated_vowels(s): seen={}; out=''; for c in s: out+=str(seen[c])+1 if c in 'aeiou' and c in seen else c; seen[c]=seen.get(c,0)+1; return out"
996,"def group_by_letter(lst): from collections import defaultdict; d=defaultdict(list); [d[w[0]].append(w) for w in lst]; return dict(d)"
997,"def sorted_unique_digits(s): return sorted(set(int(c) for c in s if c.isdigit()))"
998,"def to_title(s): return ' '.join(w[0].upper()+w[1:].lower() if w else '' for w in s.split())"
999,"def can_split_equal(lst): return any(sum(lst[:i])==sum(lst[i:]) for i in range(1,len(lst)))"
1000,"def shift_digits_right(n): s=str(n); return int(s[-1]+s[:-1])"

