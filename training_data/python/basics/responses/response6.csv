id,response
501,"def upper_list(lst): return [s.upper() for s in lst]"
502,"def sum_every_second(lst): return sum(lst[1::2])"
503,"def is_palindrome(n): rev=0; x=n; while x: rev=rev*10+x%10; x//=10; return n==rev"
504,"import re; def extract_nums(s): return list(map(int, re.findall(r'\d+', s)))"
505,"def same_start_end(lst): return sum(1 for w in lst if w and w[0]==w[-1])"
506,"def remove_upper(s): return ''.join(c for c in s if not c.isupper())"
507,"def swap_case(s): return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"
508,"def longest_word_len(s): return max(len(w) for w in s.split())"
509,"def middle_chars(s): l=len(s); return s[(l-1)//2:l//2+1]"
510,"def digits_to_int(lst): return int(''.join(map(str,lst)))"
511,"def balanced_parens(s): stack=0; return all((stack:=stack+1 if c=='(' else stack-1 if c==')' else stack)>=0 for c in s) and stack==0"
512,"def print_char_positions(s): [print(i,c) for i,c in enumerate(s)]"
513,"def insert_char(s, c, idx): return s[:idx]+c+s[idx:]"
514,"def round_list(lst): return [round(x) for x in lst]"
515,"def remove_gt_avg(lst): avg=sum(lst)/len(lst); return [x for x in lst if x<=avg]"
516,"from datetime import datetime; def diff_times(t1,t2): fmt='%H:%M:%S'; return str(datetime.strptime(t2,fmt)-datetime.strptime(t1,fmt))"
517,"def is_ascii_arithmetic(s): return all(ord(s[i])-ord(s[i-1])==ord(s[1])-ord(s[0]) for i in range(2,len(s)))"
518,"def only_letters(s): return ''.join(c for c in s if c.isalpha())"
519,"def all_equal(lst): return len(set(lst))==1"
520,"def format_list(lst): return ', '.join(lst[:-1]) + ' and ' + lst[-1] if len(lst)>1 else ''.join(lst)"
521,"def count_palindromes(lst): return sum(1 for w in lst if w==w[::-1])"
522,"def print_upper(s): [print(c) for c in s if c.isupper()]"
523,"def first_repeat(lst): seen=set(); for x in lst: if x in seen: return x; seen.add(x)"
524,"import random; def random_list(n,a,b): return [random.randint(a,b) for _ in range(n)]"
525,"def to_sentence_case(s): return s[0].upper() + s[1:].lower() if s else ''"
526,"def number_pattern(n): [print(' '.join(str(x) for x in range(1,i+1))) for i in range(1,n+1)]"
527,"from collections import Counter; def freq(lst): return dict(Counter(lst))"
528,"def reverse_manual(s): out=''; [out:=c+out for c in s]; return out"
529,"def remove_adjacent_dupes(lst): return [v for i,v in enumerate(lst) if i==0 or v!=lst[i-1]]"
530,"def count_types(s): d=l=sp=0; [d:=d+1 if c.isdigit() else l:=l+1 if c.isalpha() else sp:=sp+1 if c==' ' else sp for c in s]; return d,l,sp"
531,"def str_to_dict(s): return {i:c for i,c in enumerate(s)}"
532,"def str_len_dict(lst): return {x:len(x) for x in lst}"
533,"def flatten(lst): return [i for sub in lst for i in sub]"
534,"def pad_zeros(lst, length): return lst + [0]*(length-len(lst))"
535,"def min_max(lst): minv=maxv=lst[0]; [minv:=x if x<minv else minv for x in lst]; [maxv:=x if x>maxv else maxv for x in lst]; return minv,maxv"
536,"def to_bools(lst): return [bool(x) for x in lst]"
537,"def single_occurrence(s): return [c for c in s if s.count(c)==1]"
538,"def even_digits(n): [print(d) for d in str(n) if int(d)%2==0]"
539,"def ascii_list(s): return [ord(c) for c in s]"
540,"def list_length(lst): c=0; [c:=c+1 for _ in lst]; return c"
541,"def reverse_digits(n): r=0; while n: r=r*10+n%10; n//=10; return r"
542,"def lower_letters(s): return ''.join(c for c in s if c.islower())"
543,"def all_same(s): return len(set(s))==1"
544,"def to_upper_manual(s): return ''.join(chr(ord(c)-32) if 'a'<=c<='z' else c for c in s)"
545,"from collections import Counter; def most_freq_digit(n): return Counter(str(n)).most_common(1)[0][0]"
546,"def odd_numbers(): return [i for i in range(1,101,2)]"
547,"def is_palindrome_math(n): x=n; rev=0; while x: rev=rev*10 + x%10; x//=10; return rev==n"
548,"def mult_digits(n): p=1; [p:=p*int(d) for d in str(n)]; print(p)"
549,"def divisible_by_digit_sum(n): return n % sum(int(d) for d in str(n)) == 0"
550,"def convert_time(t): h,m = map(int, t.split(':')); return f'{(h-1)%12+1}:{m:02d} {"AM" if h<12 else "PM"}'"
551,"def unique_chars(s): seen=set(); return ''.join(c for c in s if not (c in seen or seen.add(c)))"
552,"def remove_digits(s): return ''.join(c for c in s if not c.isdigit())"
553,"def reverse_every_second(lst): lst[1::2] = lst[1::2][::-1]; return lst"
554,"def count_digit(n,d): return str(n).count(str(d))"
555,"def shift_letters(s): return ''.join(chr((ord(c)-97+2)%26+97) if c.isalpha() and c.islower() else c for c in s)"
556,"def replace_substring(s, old, new): return s.replace(old,new)"
557,"def double_evens(lst): return [x*2 if x%2==0 else x for x in lst]"
558,"def letters_used(*strings): return sorted(set(''.join(strings)))"
559,"def is_mirror(lst): return lst == lst[::-1]"
560,"def reverse_long_words(s): return ' '.join(w[::-1] if len(w)>4 else w for w in s.split())"
561,"def to_binary_list(lst): return [bin(x)[2:] for x in lst]"
562,"def remove_dupes(s): out=''; [out:=out+c if c not in out else out for c in s]; return out"
563,"def last_word(s): return s.strip().split()[-1]"
564,"def num_pyramid(n): [print(' '.join(str(i+1) for _ in range(i+1))) for i in range(n)]"
565,"def digit_sums(lst): return [sum(int(d) for d in str(x)) for x in lst]"
566,"def is_special(c): return not c.isalnum()"
567,"def longest_increasing(lst): res, temp = [], []; [temp.append(x) if not temp or x>temp[-1] else (res.append(temp); temp:=[x]) for x in lst]; res.append(temp); return max(res, key=len)"
568,"import re; def extract_numbers(s): return list(map(int, re.findall(r'\d+', s)))"
569,"def oxford_comma(lst): return ', '.join(lst[:-1]) + ', and ' + lst[-1] if len(lst)>2 else ' and '.join(lst)"
570,"def dict_to_tuples(d): return list(d.items())"
571,"def is_consonant(c): return c.isalpha() and c.lower() not in 'aeiou'"
572,"def filter_short_words(s): return ' '.join(w for w in s.split() if len(w)>=5)"
573,"def avg_digits(n): digits=[int(d) for d in str(n)]; return sum(digits)/len(digits)"
574,"def mask_digits(n): s=str(n); return '*'*(len(s)-2) + s[-2:]"
575,"def space_to_underscore(lst): return [s.replace(' ','_') for s in lst]"
576,"def sort_string(s): return ''.join(sorted(s))"
577,"def longest_palindrome(lst): return max((w for w in lst if w==w[::-1]), key=len, default='')"
578,"def merge_hyphen(lst): return '-'.join(lst)"
579,"def all_unique(lst): return len(lst) == len(set(lst))"
580,"def enumerate_list(lst): return list(enumerate(lst))"
581,"def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')"
582,"def insert_every_third(s, ch): return ''.join(c+ch if (i+1)%3==0 else c for i,c in enumerate(s))"
583,"def count_spaces(s): return s.count(' ')"
584,"def mult_evens(lst): p=1; [p:=p*x for x in lst if x%2==0]; print(p)"
585,"def remove_min(lst): m=min(lst); return [x for x in lst if x!=m]"
586,"def center_text(s, width): return s.center(width)"
587,"def one_edit_away(a,b): if abs(len(a)-len(b))>1: return False; if len(a)>len(b): a,b=b,a; i=j=diff=0; while i<len(a) and j<len(b): diff+=a[i]!=b[j]; j+=1; i+=a[i]!=b[j-1]; return diff+(len(b)-j)<=1"
588,"def reverse_sentence(s): return ' '.join(s.split()[::-1])"
589,"def last_digit(n): return n % 10"
590,"def alt_ones_zeros(n): return [i%2 for i in range(n)]"
591,"def round_up_10(lst): return [((x+9)//10)*10 for x in lst]"
592,"def to_title_case(s): return ' '.join(w[0].upper()+w[1:].lower() if w else '' for w in s.split())"
593,"def vowel_count_words(s): return [sum(1 for c in w if c.lower() in 'aeiou') for w in s.split()]"
594,"def shift_chars(s): return ''.join(chr((ord(c)-97+2)%26+97) if c.isalpha() else c for c in s.lower())"
595,"def all_indexes(s, ch): return [i for i,c in enumerate(s) if c==ch]"
596,"def num_to_words(s): return s.translate(str.maketrans('0123456789','zeroonetwothreefourfivesixseveneightnine'))"
597,"def dict_values_unique(d): return len(set(d.values())) == len(d.values())"
598,"def reverse_digits(n): return [int(d) for d in str(n)][::-1]"
599,"def num_to_str(n): return '%d' % n"
600,"def even_index_chars(s): return s[::2]"

