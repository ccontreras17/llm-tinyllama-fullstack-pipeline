id,response
701,"def is_ascii(s): return all(ord(c) < 128 for c in s)"
702,"def str_to_digits(s): return [int(c) for c in s if c.isdigit()]"
703,"import string; def strip_punct(lst): return [''.join(c for c in s if c not in string.punctuation) for s in lst]"
704,"def replace_every_second(s): w=s.split(); w[1::2]=['Python']*(len(w)//2); return ' '.join(w)"
705,"def count_before(s,a,b): return sum(1 for i in range(len(s)) if s[i]==a and b in s[i+1:])"
706,"def max_word_len(lst): return max(len(w) for w in lst)"
707,"def second_index(s,c): return s.find(c, s.find(c)+1)"
708,"def strip_digits(s): new=''.join(c for c in s if not c.isdigit()); return new, len(s)-len(new)"
709,"def is_isogram(w): return len(set(w.lower())) == len(w)"
710,"def contains_sub(lst,sub): return [s for s in lst if sub in s]"
711,"def ints_to_str(lst): return ' '.join(map(str,lst))"
712,"def same_start(lst): return len(set(s[0].lower() for s in lst))==1"
713,"def is_automorphic(n): return str(n*n).endswith(str(n))"
714,"def words_gt_7(s): return [w for w in s.split() if len(w)>7]"
715,"def alt_case(s): return ''.join(c.lower() if i%2==0 else c.upper() for i,c in enumerate(s))"
716,"def count_end_char(lst,c): return sum(1 for w in lst if w.endswith(c))"
717,"def shift_by_5(s): return ''.join(chr((ord(c)-97+5)%26+97) if c.isalpha() else c for c in s.lower())"
718,"def is_circular(a,b): return any(a==b[i:]+b[:i] for i in range(len(b)))"
719,"def no_repeats(lst): return [w for w in lst if len(set(w))==len(w)]"
720,"def num_triangle(n): [print(' '.join(str(j) for j in range(1,i+1))) for i in range(1,n+1)]"
721,"def prod_eq_n(n): from math import prod; return n==prod(map(int,str(n)))"
722,"def count_vc(s): v=sum(c.lower() in 'aeiou' for c in s); c=sum(c.isalpha() and c.lower() not in 'aeiou' for c in s); return {'vowels':v,'consonants':c}"
723,"def nonrepeats(s): return sum(1 for c in s if s.count(c)==1)"
724,"def remove_3rd(lst): return [x for i,x in enumerate(lst) if (i-2)%3!=0 or i<2]"
725,"def common_chars(a,b): return list(set(a)&set(b))"
726,"def repeat_by_val(lst): return [x for x in lst for _ in range(x)]"
727,"def substrings(s): return [s[i:j] for i in range(len(s)) for j in range(i+2,len(s)+1)]"
728,"def replace_dupes(s): from collections import Counter; c=Counter(s); return ''.join(str(c[ch]) if c[ch]>1 else ch for ch in s)"
729,"def rev_words_stack(s): return ' '.join(reversed(s.split()))"
730,"def hash_even_idx(s): return ''.join('#' if i%2==0 else c for i,c in enumerate(s))"
731,"def min_missing(lst): i=1; while i in lst: i+=1; return i"
732,"def shift_cyclic(w,n): return ''.join(chr((ord(c)-97+n)%26+97) if c.isalpha() else c for c in w.lower())"
733,"def is_palindrome(n): s=str(n); return all(s[i]==s[-1-i] for i in range(len(s)//2))"
734,"def uc_followed_by_lc(s): return sum(1 for i in range(len(s)-1) if s[i].isupper() and s[i+1].islower())"
735,"def same_case(s): return s.islower() or s.isupper()"
736,"def double_digits(n): return int(''.join(str(int(d)*2) for d in str(n)))"
737,"def shortest_word_len(s): return min(len(w) for w in s.split())"
738,"def mirror_pattern(n): [print(''.join(str(i) for i in range(1,r+1))+''.join(str(i) for i in range(r-1,0,-1))) for r in range(1,n+1)]"
739,"from math import gcd; def is_coprime(a,b): return gcd(a,b)==1"
740,"def remove_dup_digits(n): return int(''.join(sorted(set(str(n)), key=str(n).index)))"
741,"def all_pairs(lst): return [(a,b) for i,a in enumerate(lst) for b in lst[i+1:]]"
742,"def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"
743,"def min_even(t): return min((x for x in t if x%2==0), default=None)"
744,"from collections import Counter; def exact_twice(lst): return [x for x,c in Counter(lst).items() if c==2]"
745,"def sort_preserve_case(s): return ''.join(sorted(s,key=lambda x: (x.lower(), not x.islower())))"
746,"def repeat_first(s,n): return s[0]*n + s[1:]"
747,"def to_bin_ascii(s): return ' '.join(format(ord(c),'08b') for c in s)"
748,"def triple_digits(n): return ''.join(str(int(d)*3) for d in str(n))"
749,"def no_vowel_words(lst): return [w for w in lst if all(c.lower() not in 'aeiou' for c in w)]"
750,"def is_subsequence(s1,s2): it=iter(s2); return all(c in it for c in s1)"
751,"def sum_digits_product(a,b): return sum(int(d) for d in str(a*b))"
752,"def alt_upper(s): return ''.join(c.upper() if i%2==1 else c for i,c in enumerate(s))"
753,"def split_chunks(s,n): return [s[i:i+n] for i in range(0,len(s),n)]"
754,"def div_by_digit_sum(lst): return [n for n in lst if sum(int(d) for d in str(n)) and n%sum(int(d) for d in str(n))==0]"
755,"def get_lowercase(s): return [c for c in s if c.islower()]"
756,"def even_pos_chars(lst): return ''.join(''.join(s[i] for i in range(len(s)) if i%2==0) for s in lst)"
757,"def remove_min_ascii(s): return s.replace(min(s), '', 1)"
758,"from math import prod; def prod_odds(lst): return prod(x for x in lst if x%2==1)"
759,"def is_circular_rotation(a,b): return len(a)==len(b) and b in a+a"
760,"def words_with_digit(lst): return sum(any(c.isdigit() for c in w) for w in lst)"
761,"def vowel_consonant_equal(w): v=sum(c.lower() in 'aeiou' for c in w); c=sum(c.lower() in 'bcdfghjklmnpqrstvwxyz' for c in w); return v==c"
762,"def swap_pairs(s): return ''.join(s[i+1]+s[i] if i+1<len(s) else s[i] for i in range(0,len(s),2))"
763,"def digit_counts(lst): return [len(str(abs(n))) for n in lst]"
764,"def has_consecutive_chars(s): return any(s[i]==s[i+1] for i in range(len(s)-1))"
765,"def unique_3digits(): return [n for n in range(100,1000) if len(set(str(n)))==3]"
766,"def reverse_letters(s): return ''.join(c for c in reversed(s) if c.isalpha())"
767,"def sort_by_digit_count(lst): return sorted(lst,key=lambda x: len(str(abs(x))))"
768,"def longest_identical(s): from itertools import groupby; return max((len(list(g)) for _,g in groupby(s)), default=0)"
769,"def vowel_to_pos(s): return ''.join(str(ord(c)-96) if c in 'aeiou' else c for c in s.lower())"
770,"def middle_row(m): return m[len(m)//2]"
771,"def first_nonrepeat_digit(n): from collections import Counter; c=Counter(str(n)); return next((int(d) for d in str(n) if c[d]==1), None)"
772,"def is_symmetric(s): return s == s[::-1]"
773,"def dec_to_bin(n): b=''; while n: b=str(n%2)+b; n//=2; return b or '0'"
774,"def round_to_5(lst): return [round(x/5)*5 for x in lst]"
775,"def swap_halves(s): mid=len(s)//2; return s[mid:]+s[:mid] if len(s)%2==0 else s[mid+1:]+s[mid]+s[:mid]"
776,"def powers_of_two(lst): return [x for x in lst if x>0 and (x&(x-1))==0]"
777,"def to_initials(lst): return [w[0] for w in lst if w]"
778,"def alt_vc_words(s): return [w for w in s.split() if all((i%2==0 and w[i].lower() in 'aeiou') or (i%2==1 and w[i].lower() not in 'aeiou') for i in range(len(w)))]"
779,"def all_palindromes(lst): return all(w==w[::-1] for w in lst)"
780,"def str_to_dict(s): return {c:i for i,c in enumerate(s)}"
781,"def ascii_sum(s): return sum(ord(c) for c in s)"
782,"def even_len_words(s): return all(len(w)%2==0 for w in s.split())"
783,"def add_digits(n1,n2): return [int(a)+int(b) for a,b in zip(str(n1),str(n2))]"
784,"def brackets_chars(s): return ''.join(f'[{c}]' for c in s)"
785,"def split_alt_vc(s): import re; return re.findall(r'([aeiou][^aeiou]|[^aeiou][aeiou])',s,re.IGNORECASE)"
786,"def repeat_digits(n): return [int(d) for d in set(str(n)) if str(n).count(d)>1]"
787,"def sum_even_odd_indices(n): digits=[int(d) for d in str(n)]; return sum(digits[::2])-sum(digits[1::2])"
788,"def number_to_words(n): units=['zero','one','two','three','four','five','six','seven','eight','nine']; return ' '.join(units[int(d)] for d in str(n))"
789,"def rotate_string(s,n): return s[n%len(s):]+s[:n%len(s)]"
790,"def num_to_str_len(lst): return [str(len(str(n))) for n in lst]"
791,"def star_mask(s): return ''.join(c if c.isdigit() else '*' for c in s)"
792,"def group_chars(s): return {'letters':[c for c in s if c.isalpha()], 'digits':[c for c in s if c.isdigit()], 'other':[c for c in s if not c.isalnum()]}"
793,"def max_number_digits(n): return int(''.join(sorted(str(n),reverse=True)))"
794,"def replace_nonletters(s): return ''.join(c if c.isalpha() else '-' for c in s)"
795,"def avg_word_len(p): words=p.split(); return sum(len(w) for w in words)/len(words) if words else 0"
796,"def reversed_pattern(n): [print(''.join(str(i) for i in range(n,0,-1))) for _ in range(n)]"
797,"def common_suffix(lst): from os.path import commonprefix; return commonprefix([w[::-1] for w in lst])[::-1]"
798,"def count_1digit(lst): return sum(1 for x in lst if 0<=x<10)"
799,"from math import factorial; def factorial_by_index(n): return [factorial(i) for i in range(n)]"
800,"def primestr_indices(s): def isprime(n): return n>1 and all(n%i for i in range(2,int(n**0.5)+1)); return ''.join(s[i] for i in range(len(s)) if isprime(i))"

