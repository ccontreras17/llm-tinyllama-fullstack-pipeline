id,response
801,"def split_odd_even(lst): res, curr = [], [lst[0]]; for i in lst[1:]: res.append(curr) if (i%2==0)^(curr[-1]%2==0) else curr.append(i); curr = [i]; res.append(curr); return res"
802,"def max_digit_sum(lst): return max(lst, key=lambda x: sum(int(d) for d in str(x)))"
803,"def next_letters(s): return ''.join(chr((ord(c)-96)%26+97) if c.isalpha() else c for c in s.lower())"
804,"def remove_duplicates(s): return ''.join(c for c in s if s.count(c)==1)"
805,"def first_missing_positive(lst): s=set(lst); i=1; while i in s: i+=1; return i"
806,"def length_3_strings(lst): return [s for s in lst if len(s)==3]"
807,"def reverse_vowels(s): v=[c for c in s if c in 'aeiouAEIOU']; return ''.join(v.pop() if c in 'aeiouAEIOU' else c for c in s)"
808,"def last_chars(sentence): return ''.join(w[-1] for w in sentence.split() if w)"
809,"def has_n_unique(s,n): return len(set(s))==n"
810,"def reduce_product(n): import math; p=n; while p>9: p=math.prod(int(d) for d in str(p)); return p"
811,"def rotate_right(s,k): k=k%len(s); return s[-k:]+s[:-k]"
812,"def unique_3digit(): return [n for n in range(100,1000) if len(set(str(n)))==3]"
813,"def count_consonants(s): return sum(c.lower() in 'bcdfghjklmnpqrstvwxyz' for c in s)"
814,"def remove_nonints(lst): return [x for x in lst if isinstance(x,int)]"
815,"def count_len2_subs(s): return len(s)-1 if len(s)>1 else 0"
816,"def remove_num_words(s): return ' '.join(w for w in s.split() if not any(c.isdigit() for c in w))"
817,"def longest_palindrome(s): return max([s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if s[i:j]==s[i:j][::-1]], key=len, default='')"
818,"def rank_positions(lst): sorted_lst=sorted(lst); return [sorted_lst.index(x) for x in lst]"
819,"def same_divisor(lst): from math import gcd; from functools import reduce; g=reduce(gcd,lst); return all(x%g==0 for x in lst)"
820,"def find_anagrams(lst): from collections import defaultdict; d=defaultdict(list); [d[''.join(sorted(w))].append(w) for w in lst]; return [v for v in d.values() if len(v)>1]"
821,"def most_common(lst): return max(set(lst), key=lst.count)"
822,"def flatten_2d(lst): res=[]; [res.extend(row) for row in lst]; return res"
823,"def remove_vowels_except_first(s): seen=False; return ''.join(c if not seen and c.lower() in 'aeiou' else (c if c.lower() not in 'aeiou' else '') for c in s)"
824,"def insert_between(s,char): return char.join(s)"
825,"def is_reverse_binary(n): return n==int(bin(n)[2:][::-1],2)"
826,"def is_palindrome_ignore_case(s): return s.lower()==s[::-1].lower()"
827,"def remove_last_n(s,n): return s[:-n]"
828,"def tuple_indices(s): return list(enumerate(s))"
829,"def lower_nodigits(s): return ''.join(c.lower() for c in s if not c.isdigit())"
830,"def every_second_word(s): return s.split()[1::2]"
831,"def sort_digits_desc(n): return int(''.join(sorted(str(n),reverse=True)))"
832,"def all_primes(lst): from math import isqrt; return all(x>1 and all(x%i for i in range(2,isqrt(x)+1)) for x in lst)"
833,"def alternate_start_end(lst): return [lst.pop(0) if i%2==0 else lst.pop() for i in range(len(lst))]"
834,"def count_digit_occurrences(n,d): return sum(str(i).count(str(d)) for i in range(1,n+1))"
835,"def replace_repeats(s): return ''.join(str(s[:i].count(c)+1) if s.count(c)>1 else c for i,c in enumerate(s))"
836,"def longest_inc_seq(n): s=str(n); res, temp = '', ''; for i in range(len(s)): temp+=s[i]; if i==len(s)-1 or s[i]>=s[i+1]: res=max(res,temp,key=len); temp=''; return res"
837,"def reverse_preserve_special(s): l,r=list(s),len(s)-1; i=0; while i<r: if not l[i].isalpha(): i+=1; continue; if not l[r].isalpha(): r-=1; continue; l[i],l[r]=l[r],l[i]; i+=1; r-=1; return ''.join(l)"
838,"def char_counts(s): d={}; [d.update({c:d.get(c,0)+1}) for c in s]; return d"
839,"def digit_sum_even(lst): return [n for n in lst if sum(int(d) for d in str(n))%2==0]"
840,"def zero_even_digits(n): return int(''.join('0' if int(d)%2==0 else d for d in str(n)))"
841,"def same_elements(lst1,lst2): return sorted(lst1)==sorted(lst2)"
842,"def same_start_end(s): return sum(w[0].lower()==w[-1].lower() for w in s.split() if len(w)>1)"
843,"def sum_factorial_digits(n): from math import factorial; return sum(factorial(int(d)) for d in str(n))"
844,"def keep_only(s,allowed): return ''.join(c for c in s if c in allowed)"
845,"def format_commas(n): return '{:,}'.format(n)"
846,"def reverse_even_words(s): return ' '.join(w[::-1] if len(w)%2==0 else w for w in s.split())"
847,"def mean_positives(lst): pos=[x for x in lst if x>0]; return sum(pos)/len(pos) if pos else 0"
848,"def count_3_5(lst): return sum(1 for x in lst if x%3==0 or x%5==0)"
849,"def sum_digits_from_str(s): return sum(int(c) for c in s if c.isdigit())"
850,"def only_letters_spaces(s): return all(c.isalpha() or c.isspace() for c in s)"
851,"def longest_vowel_start(lst): return max((s for s in lst if s[0].lower() in 'aeiou'), key=len, default='')"
852,"def reverse_list(lst): res=[]; [res.insert(0,x) for x in lst]; return res"
853,"def list_to_binary(lst): return ''.join(bin(x)[2:] for x in lst)"
854,"def count_dict(lst): d={}; [d.update({x:d.get(x,0)+1}) for x in lst]; return d"
855,"def max_adj_diff(lst): return max(abs(a-b) for a,b in zip(lst,lst[1:]))"
856,"def repeated_digits(n): return [d for d in set(str(n)) if str(n).count(d)>1]"
857,"def lowercase_subs(s): import re; return re.findall(r'[a-z]+',s)"
858,"def increasing_indexes(lst): return [i for i in range(1,len(lst)) if lst[i]>lst[i-1]]"
859,"def to_lower(s): return ''.join(chr(ord(c)+32) if 'A'<=c<='Z' else c for c in s)"
860,"def fib_chars(s): fib, res, i = [0,1], ''; while fib[-1]<len(s): fib.append(fib[-1]+fib[-2]); return ''.join(s[i] for i in fib if i<len(s))"
861,"def round_even(lst): return [int(round(x/2)*2) for x in lst]"
862,"def count_transitions(s): return sum(s[i]!=s[i+1] for i in range(len(s)-1))"
863,"def reverse_third(sentence): w=sentence.split(); return ' '.join(w[i][::-1] if i%3==2 else w[i] for i in range(len(w)))"
864,"def split_equal_digits(n): s=str(n); l=len(s); return [s[i:i+(l//2)] for i in range(0,l,l//2)]"
865,"def punct_to_underscore(s): import string; return ''.join('_' if c in string.punctuation else c for c in s)"
866,"def remove_strings(lst): return [x for x in lst if not isinstance(x,str)]"
867,"def max_consec_char(s): from itertools import groupby; return max(((k,len(list(g))) for k,g in groupby(s)), key=lambda x:x[1])[0]"
868,"def is_alpha_order(s): s=''.join(filter(str.isalpha,s.lower())); return s==''.join(sorted(s))"
869,"def count_shared_with_reverse(s): return sum(c in s[::-1] for c in set(s))"
870,"def mirror_words(s): return ' '.join(w+w[::-1] for w in s.split())"
871,"def reduce_to_zero(n): steps=0; while n>0: n-=sum(int(d) for d in str(n)); steps+=1; return steps"
872,"def below_avg(lst): avg=sum(lst)/len(lst); return [x for x in lst if x<avg]"
873,"def space_every_third(s): return ''.join(' ' if (i+1)%3==0 else c for i,c in enumerate(s))"
874,"def digit_root(n): return n if n<10 else digit_root(sum(int(d) for d in str(n)))"
875,"def max_consec_len(s): from itertools import groupby; return max(len(list(g)) for _,g in groupby(s))"
876,"def clean_alpha_palindrome(s): f=''.join(filter(str.isalpha,s)).lower(); return f==f[::-1]"
877,"def remove_big(lst): return [x for x in lst if not (isinstance(x,int) and x>9999)]"
878,"def cap_third(sentence): w=sentence.split(); return ' '.join(w[i].capitalize() if i%3==2 else w[i] for i in range(len(w)))"
879,"def split_on_delim(s,d): return s.split(d)"
880,"def word_lengths(s): return [len(w) for w in s.split()]"
881,"def longest_unique_substring(s): res, curr = '', ''; for c in s: curr = curr[curr.index(c)+1:] + c if c in curr else curr + c; res = max(res, curr, key=len); return res"
882,"def has_all_vowels(w): return all(v in w.lower() for v in 'aeiou')"
883,"def vowel_count(s): return {v:s.lower().count(v) for v in 'aeiou'}"
884,"def same_pos_digits(s1,s2): return [i for i in range(min(len(s1),len(s2))) if s1[i]==s2[i] and s1[i].isdigit()]"
885,"def caps_to_stars(s): return ''.join(f'*{c.lower()}*' if c.isupper() else c for c in s)"
886,"def staircase(h): [print(''.join(str(i+1) for _ in range(i+1))) for i in range(h)]"
887,"def get_initials(s): return ''.join(w[0].upper() for w in s.split())"
888,"def add_one_wrap(n): return int(''.join(str((int(d)+1)%10) for d in str(n)))"
889,"def all_same_digits(n): s=str(n); return all(c==s[0] for c in s)"
890,"def reverse_caps(lst): return [s[::-1].upper() for s in lst]"
891,"def square_tuples(lst): return [(x,x**2) for x in lst]"
892,"def remove_repeat_2(s): return ''.join(s[i] for i in range(len(s)-1) if s[i:i+2]!=s[i-2:i]) + s[-1]"
893,"def has_exactly_two(s): return any(s.count(c)==2 for c in set(s))"
894,"def repeated_chars(s): return [c for c in set(s) if s.count(c)>1]"
895,"def reverse_words(s): return ' '.join(s.split()[::-1])"
896,"def has_subseq(lst,sub): return any(lst[i:i+len(sub)]==sub for i in range(len(lst)-len(sub)+1))"
897,"def sum_odd_digits(n): return sum(int(d) for d in str(n) if int(d)%2==1)"
898,"def star_second(s): return ' '.join(w[0]+'*'+w[2:] if len(w)>1 else w for w in s.split())"
899,"def sum_diffs(lst): return sum(abs(a-b) for a,b in zip(lst,lst[1:]))"
900,"def square_digits(s): return ''.join(str(int(c)**2) if c.isdigit() else c for c in s)"

