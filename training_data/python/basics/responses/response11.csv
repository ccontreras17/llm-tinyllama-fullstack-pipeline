id,response
1001,"def unique_word_lengths(s): l=[len(w) for w in s.split()]; return len(set(l))==len(l)"
1002,"def longest_alt_vowel_consonant(s): import re; return max(re.findall(r'(?i)(?:(?:[aeiou][^aeiou])|(?:[^aeiou][aeiou]))+', s), key=len, default='')"
1003,"def avg_ascii(s): return sum(map(ord,s))/len(s) if s else 0"
1004,"def no_repeats(lst): return [w for w in lst if len(set(w))==len(w)]"
1005,"def remove_first_last_vowel(s): v=[i for i,c in enumerate(s) if c.lower() in 'aeiou']; return s[:v[0]]+s[v[0]+1:v[-1]]+s[v[-1]+1:] if len(v)>=2 else s"
1006,"def reverse_words_with_digit(s): return ' '.join(w[::-1] if any(c.isdigit() for c in w) else w for w in s.split())"
1007,"def vowel_order_count(s): return [s.lower().count(v) for v in 'aeiou']"
1008,"def every_third_upper(s): return ''.join(c.upper() if i%3==2 else c for i,c in enumerate(s))"
1009,"def palindromes_when_doubled(lst): return [x for x in lst if str(x*2)==str(x*2)[::-1]]"
1010,"def local_maxima(lst): return [i for i in range(1,len(lst)-1) if lst[i]>lst[i-1] and lst[i]>lst[i+1]]"
1011,"def cube_digits(n): return int(''.join(str(int(d)**3) for d in str(n)))"
1012,"def non_alnum(s): return [c for c in s if not c.isalnum()]"
1013,"def two_vowels(w): return len(set(c for c in w.lower() if c in 'aeiou'))>=2"
1014,"def remove_repeated_consonants(s): return ''.join(c for c in s if c.lower() in 'aeiou' or s.lower().count(c)==1)"
1015,"def sort_by_unique_chars(lst): return sorted(lst, key=lambda w: len(set(w)))"
1016,"def reverse_lower_words(s): return ' '.join(w.lower()[::-1] for w in s.split())"
1017,"def vowel_consonant_diff(w): v=sum(1 for c in w if c.lower() in 'aeiou'); c=sum(1 for c in w if c.isalpha() and c.lower() not in 'aeiou'); return v-c"
1018,"def prev_letter(s): return ''.join(chr(ord(c)-1) if c.isalpha() else c for c in s)"
1019,"def only_vowel_words(lst): return [w for w in lst if all(c.lower() in 'aeiou' for c in w)]"
1020,"def reverse_halves(n): s=str(n); h=len(s)//2; return s[:h][::-1]+s[h:][::-1]"
1021,"def chars_multiple_of_3(s): return ''.join(c for i,c in enumerate(s) if i%3==0)"
1022,"def all_words_start_vowel(s): return all(w[0].lower() in 'aeiou' for w in s.split())"
1023,"def double_except_vowels(s): return ''.join(c*2 if c.lower() not in 'aeiou' else c for c in s)"
1024,"def div_7_or_11(): print([x for x in range(1,101) if x%7==0 or x%11==0])"
1025,"def reverse_string_static_digits(s): digits=[(i,c) for i,c in enumerate(s) if c.isdigit()]; letters=[c for c in s if not c.isdigit()][::-1]; for i,c in digits: letters.insert(i,c); return ''.join(letters)"
1026,"def shortest_with_2vowels(s): return min((w for w in s.split() if sum(c in 'aeiou' for c in w)>=2), key=len, default='')"
1027,"def digit_count_dict(n): from collections import Counter; return dict(Counter(str(n)))"
1028,"def has_repeated_words(s): w=s.lower().split(); return len(w)!=len(set(w))"
1029,"def cap_2nd_4th(s): return ' '.join(''.join(c.upper() if i in [1,3] else c for i,c in enumerate(w)) for w in s.split())"
1030,"def prime_digits(n): return [int(d) for d in str(n) if int(d) in [2,3,5,7]]"
1031,"def remove_from_other(a,b): return ''.join(c for c in a if c not in b)"
1032,"def print_staircase(c, h): [print(c*(i+1)) for i in range(h)]"
1033,"def is_mirror_half(s): l=len(s)//2; return s[:l]==s[-1:-l-1:-1]"
1034,"def bangify_last_letter(s): return ' '.join(w[:-1]+'!' if w else '' for w in s.split())"
1035,"def contains_python(s): return 'python' in s.lower()"
1036,"def chars_between_vowels(w): v=[i for i,c in enumerate(w) if c.lower() in 'aeiou']; return v[-1]-v[0]-1 if len(v)>=2 else 0"
1037,"def shortest_with_all_vowels(lst): return min((w for w in lst if all(v in w for v in 'aeiou')), key=len, default='')"
1038,"def alt_from_end(s): return ''.join(c.upper() if i%2 else c.lower() for i,c in enumerate(reversed(s)))[::-1]"
1039,"def alt_even_odd(lst): return all((x%2)!=(lst[i+1]%2) for i,x in enumerate(lst[:-1]))"
1040,"def cap_every_other_from_end(s): w=s.split(); return ' '.join(w[::-1][::2][::-1] + [w[::-1][1::2][::-1]]).strip()"
1041,"def interleave_strings(a,b): return ''.join(x+y for x,y in zip(a,b)) + a[len(b):] + b[len(a):]"
1042,"def replace_digit_count(n): s=str(n); return int(''.join(str(s.count(d)) for d in s))"
1043,"def rev_initials(s): return ''.join(w[0] for w in s.split())[::-1]"
1044,"def remove_odd_index_vowels(s): return ''.join(c for i,c in enumerate(s) if not (i%2 and c.lower() in 'aeiou'))"
1045,"def ascii_sum_div7(s): return sum(map(ord,s))%7==0"
1046,"def letter_to_next_ascii(s): return ''.join(str(ord(chr(ord(c)+1))) if c.isalpha() else c for c in s)"
1047,"def overlapping_count(s, sub): return sum(s[i:].startswith(sub) for i in range(len(s)))"
1048,"def alphabetic_pairs(s): return [s[i:i+2] for i in range(len(s)-1) if s[i:i+2].isalpha()]"
1049,"def is_digit_list(s): return [c.isdigit() for c in s]"
1050,"def longest_unique_string(lst): return max((w for w in lst if len(w)==len(set(w))), key=len, default='')"
1051,"def reverse_non_alnum(s): import re; parts=re.findall(r'\w+|\W+', s); return ''.join(p[::-1] if not p.isalnum() else p for p in parts)"
1052,"def shift_digits(n): return int(''.join(str((int(d)+int(d))%10) for d in str(n)))"
1053,"def substr_4(s): return [s[i:i+4] for i in range(len(s)-3)]"
1054,"def alt_append(lst): res=[]; for i,v in enumerate(lst): res.insert(0,v) if i%2 else res.append(v); return res"
1055,"def reverse_k(s,k): return ''.join(s[i:i+k][::-1] for i in range(0,len(s),k))"
1056,"def div_by_digit_count(n): return n%len(str(n))==0"
1057,"def cap_after_digit(s): return ''.join(c.upper() if i>0 and s[i-1].isdigit() else c for i,c in enumerate(s))"
1058,"def avg_digits_in_str(s): digs=[int(c) for c in s if c.isdigit()]; return sum(digs)/len(digs) if digs else 0"
1059,"def rmv_vowels_with_index(s): return ''.join(str(i) if c in 'aeiou' else c for i,c in enumerate(s))"
1060,"def triangle(n): [print(' '*(n-i-1)+'*'*(2*i+1)) for i in range(n)]"
1061,"def sum_even_pos_digits(n): return sum(int(d) for i,d in enumerate(str(n)) if i%2==0)"
1062,"def group_chars(s): l,d,y=[],[],[]; [l.append(c) if c.isalpha() else d.append(c) if c.isdigit() else y.append(c) for c in s]; return l,d,y"
1063,"def same_sandwich(s): return sum(1 for i in range(1,len(s)-1) if s[i-1]==s[i+1])"
1064,"def substr_between(s,c): return s[s.find(c)+1:s.rfind(c)] if s.count(c)>=2 else ''"
1065,"def space_letters_digits(s): import re; return re.sub(r'(?<=[a-zA-Z])(?=\d)|(?<=\d)(?=[a-zA-Z])', ' ', s)"
1066,"def consonant_to_hash(s): return ''.join('#' if c.isalpha() and c.lower() not in 'aeiou' else c for c in s)"
1067,"def split_vowels_cons(s): v,c=[],[]; [v.append(c) if c in 'aeiouAEIOU' else c.append(c) for c in s if c.isalpha()]; return v,c"
1068,"def upper_vowels(lst): return [''.join(c.upper() if c in 'aeiou' else c for c in w) for w in lst]"
1069,"def rev_digits_squared(n): return n==int(str(int(str(n)[::-1])**2)[::-1])"
1070,"def alt_merge(a,b): return ''.join(x+y for x,y in zip(a,b))"
1071,"def star_frequent(s): from collections import Counter; m=Counter(s).most_common(1)[0][0]; return s.replace(m,'*')"
1072,"def rev_strings_vowel_caps(lst): return [''.join(c.upper() if c in 'aeiouAEIOU' else c for c in w[::-1]) for w in lst[::-1]]"
1073,"def unique_sub_2(s): return len(set(s[i:i+2] for i in range(len(s)-1)))==len(s)-1"
1074,"def digit_cube_tuples(): return [(i, i**3) for i in range(10)]"
1075,"def longest_alt_word(s): return max((w for w in s.split() if all((w[i].isalpha() and (w[i].isupper()!=w[i+1].isupper())) for i in range(len(w)-1))), key=len, default='')"
1076,"def split_no_list(s): return [*s]"
1077,"def sort_ascii_desc(s): return ''.join(sorted(s, key=ord, reverse=True))"
1078,"def char_below_m(s): return sum(1 for c in s if c<'m')"
1079,"def increasing_digits(n): s=str(n); return [int(s[i]) for i in range(len(s)-1) if s[i]<s[i+1]]"
1080,"def rmv_non_alpha(s): return ''.join(c for c in s if c.isalpha())"
1081,"def even_vowel_count(w): return sum(1 for c in w if c in 'aeiouAEIOU')%2==0"
1082,"def chars_in_2_words(s): from collections import Counter; w=s.split(); allchars=''.join(set(w1)&set(w2) for i,w1 in enumerate(w) for w2 in w[i+1:]); return [c for c in set(allchars) if allchars.count(c)==2]"
1083,"def rev_skip_alt(s): return s[::-2]"
1084,"def fib_sum(n): a,b,res=0,1,[0,1]; [res.append(a+b) or (a,b:=(b,a+b)) for _ in range(n-2)]; return res[:n]"
1085,"def rmv_first_char_occ(s): return ''.join(c for c in s if c!=s[0])"
1086,"def sort_by_upper(lst): return sorted(lst, key=lambda w: sum(1 for c in w if c.isupper()))"
1087,"def index_highest_digit(n): s=str(n); return s.index(max(s))"
1088,"def diff_one_char(a,b): return len(a)==len(b) and sum(x!=y for x,y in zip(a,b))==1"
1089,"def consonant_to_pos(s): return ''.join(str(ord(c.lower())-96) if c.isalpha() and c.lower() not in 'aeiou' else c for c in s)"
1090,"def prod_2nd_digits(n): d=str(n); return eval('*'.join(d[i] for i in range(1,len(d),2)))"
1091,"def vowel_palindromes(lst): return [w for w in lst if w==w[::-1] and w[0].lower() in 'aeiou']"
1092,"def alt_add_sub(n): return sum(int(d) if i%2==0 else -int(d) for i,d in enumerate(str(n)))"
1093,"def every_third_char(s): return s[2::3]"
1094,"def digits_to_dollar(s): return ''.join('$' if c.isdigit() else c for c in s)"
1095,"def chars_surrounded_by_vowels(s): return sum(1 for i in range(1,len(s)-1) if s[i-1].lower() in 'aeiou' and s[i+1].lower() in 'aeiou')"
1096,"def vowel_subs(s): return [s[i:j+1] for i in range(len(s)) for j in range(i,len(s)) if s[i] in 'aeiou' and s[j] in 'aeiou']"
1097,"def word_len_diff(s): w=[len(x) for x in s.split()]; return max(w)-min(w) if w else 0"
1098,"def rearrange_start_end_same(w): from collections import Counter; return any(w.count(c)>=2 for c in set(w))"
1099,"def unique_consonants(s): return len(set(c.lower() for c in s if c.isalpha() and c.lower() not in 'aeiou'))"
1100,"def reverse_list_while(lst): i,j=0,len(lst)-1; while i<j: lst[i],lst[j]=lst[j],lst[i]; i+=1;j-=1; return lst"

