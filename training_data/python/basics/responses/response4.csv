id,response
301,"def first_n_multiples(x,n): return [x*i for i in range(1,n+1)]"
302,"def bin_to_int(b): return int(b,2)"
303,"import re; def mask_digits(s): return re.sub(r'\d','#',s)"
304,"def merge_lists(a,b,c): return a + b + c"
305,"def even_digits(n): return [int(d) for d in str(n) if int(d)%2==0]"
306,"def int_to_bin(n): return bin(n)[2:]"
307,"def remove_zeros(lst): return [x for x in lst if x != 0]"
308,"def format_float(f): return f'{f:.2f}'"
309,"def space_chars(s): return ' '.join(s)"
310,"def powers_of_2(): return [2**i for i in range(1,11)]"
311,"def count_letter(w,l): return w.count(l)"
312,"def greater_than(lst, n): return [x for x in lst if x > n]"
313,"def join_sentence(words): return ' '.join(words)"
314,"def abs_list(lst): return [abs(x) for x in lst]"
315,"def is_rotation(a,b): return len(a)==len(b) and b in a+a"
316,"a,b=map(int,input().split()); [print(i) for i in range(a,b+1) if i%2]"
317,"def int_to_reversed_digits(n): return [int(d) for d in str(n)[::-1]]"
318,"from itertools import product; print([''.join(map(str,x)) for x in product([1,2,3],repeat=3)])"
319,"def sum_div_10(lst): return sum(lst)%10==0"
320,"def custom_sort(lst): for i in range(len(lst)): [lst.__setitem__(j,lst[j+1]) or lst.__setitem__(j+1,tmp) for j in range(len(lst)-i-1) if (tmp:=lst[j]) > lst[j+1]]; return lst"
321,"def triple_chars(s): return ''.join(c*3 for c in s)"
322,"def has_adjacent_dupes(lst): return any(lst[i]==lst[i+1] for i in range(len(lst)-1))"
323,"def vertical(s): [print(c) for c in s]"
324,"def word_lengths(words): return [len(w) for w in words]"
325,"def has_upper(s): return any(c.isupper() for c in s)"
326,"def reverse_dict(d): return {v:k for k,v in d.items()}"
327,"def second_smallest(lst): return sorted(set(lst))[1]"
328,"def rev_print(n=100): print(n); rev_print(n-1) if n>1 else None"
329,"def count_gt_100(lst): return sum(1 for x in lst if x>100)"
330,"def shift_right(lst): return [lst[-1]] + lst[:-1]"
331,"def diff_sets(a,b): return a - b"
332,"def unique_chars(s): return [c for c in s if s.count(c)==1]"
333,"import math; def circle_area(r): return math.pi * r**2"
334,"def rotate_left(s): return s[1:] + s[0]"
335,"def common_chars(a,b): return list(set(a)&set(b))"
336,"def flatten(lst): return [item for sub in lst for item in sub]"
337,"from collections import Counter; def word_count(lst): return dict(Counter(lst))"
338,"def list_to_int(lst): return int(''.join(map(str,lst)))"
339,"def insert_middle(a,b): mid=len(a)//2; return a[:mid]+b+a[mid:]"
340,"import time; [print(i) or time.sleep(1) for i in range(10,0,-1)]"
341,"def ends_with_vowel(s): return s[-1].lower() in 'aeiou'"
342,"def trim(s): return s.strip()"
343,"def dedupe_tuple(t): return tuple(dict.fromkeys(t))"
344,"def find_indexes(lst, val): return [i for i,x in enumerate(lst) if x==val]"
345,"def add_pair(d,k,v): d[k]=v; return d"
346,"def words_start_vowel(s): return [w for w in s.split() if w[0].lower() in 'aeiou']"
347,"def remove_middle(lst): mid=len(lst)//2; return lst[:mid]+lst[mid+1:]"
348,"def rev_spaced(s): return ' '.join(s[::-1])"
349,"def min_even(lst): evens=[x for x in lst if x%2==0]; return min(evens) if evens else None"
350,"def all_even(lst): return all(x%2==0 for x in lst)"
351,"def index_of_max(lst): return lst.index(max(lst))"
352,"def delete_odd_indexes(lst): return [x for i,x in enumerate(lst) if i%2==0]"
353,"def first_last(s): return s[0] + s[-1] if s else ''"
354,"def filter_negatives(t): return tuple(x for x in t if x >= 0)"
355,"def dashify(s): return s.replace(' ','-')"
356,"[[print(row) for row in [[1]*3 for _ in range(3)]]]"
357,"def str_to_int_list(s): return list(map(int, s.split()))"
358,"def multiply(a,b): return sum(a for _ in range(b))"
359,"def count_vowels(s): return sum(1 for c in s if c in 'aeiou')"
360,"def factors(n): [print(i) for i in range(1,n+1) if n%i==0]"
361,"def first_unique(s): return next((c for c in s if s.count(c)==1), None)"
362,"def reverse_words(s): return [w[::-1] for w in s.split()]"
363,"def second_last(lst): return lst[-2]"
364,"def insert_every_second(lst,val): return [val if i%2 else x for i,x in enumerate(lst+[None]) if x is not None]"
365,"def count_words(s): return len(s.split())"
366,"def max_diff(lst): return max(lst) - min(lst)"
367,"def alt_caps(s): return ''.join(c.upper() if i%2==0 else c for i,c in enumerate(s))"
368,"def count_nonspace(s): return sum(1 for c in s if c != ' ')"
369,"import math; def sqrt_list(lst): return [math.sqrt(x) for x in lst]"
370,"def palindromes(s): return [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if s[i:j]==s[i:j][::-1]]"
371,"def even_index_elements(lst): return lst[::2]"
372,"def tuple_to_csv(t): return ','.join(t)"
373,"from collections import Counter; def most_common_char(s): return Counter(s).most_common(1)[0][0]"
374,"def upper_vowels(s): return ''.join(c.upper() if c in 'aeiou' else c for c in s)"
375,"def dash_odds(n): s=str(n); return s[0]+''.join('-'+s[i] if int(s[i-1])%2 and int(s[i])%2 else s[i] for i in range(1,len(s)))"
376,"def round_floats(lst): return [round(x) for x in lst]"
377,"def is_symmetric(lst): return lst == lst[::-1]"
378,"def sum_digits_list(lst): return sum(sum(int(d) for d in str(n)) for n in lst)"
379,"def remove_strings(lst): return [x for x in lst if not isinstance(x,str)]"
380,"def same_start_end(lst): return sum(1 for s in lst if s and s[0]==s[-1])"
381,"def repeat_lines(s,n): return '\n'.join([s]*n)"
382,"def cap_first_last(s): return ' '.join(w[0].upper()+w[1:-1]+w[-1].upper() if len(w)>1 else w.upper() for w in s.split())"
383,"import string; def count_punct(s): return sum(1 for c in s if c in string.punctuation)"
384,"def flatten_tuple(t): return tuple(x for sub in t for x in sub)"
385,"def count_palindrome_words(s): return sum(1 for w in s.split() if w==w[::-1])"
386,"import math; def mult_digits(s): return math.prod(int(c) for c in s if c.isdigit())"
387,"def truncate_10(s): return s[:10]"
388,"def div_3_5(): return [x for x in range(1,1000) if x%3==0 and x%5==0]"
389,"def mask_vowels(s): return ''.join('_' if c in 'aeiouAEIOU' else c for c in s)"
390,"def count_chars(s): return sum(c==' ' for c in s), sum(c.isdigit() for c in s), sum(c.isupper() for c in s)"
391,"def add_no_plus(a,b): while b: a,b = a^b, (a&b)<<1; return a"
392,"def lists_equal(a,b): return len(a)==len(b) and all(x==y for x,y in zip(a,b))"
393,"def next_ascii(s): return ''.join(chr(ord(c)+1) for c in s)"
394,"import re; def sum_numbers(s): return sum(map(int,re.findall(r'\d+',s)))"
395,"def is_alpha(s): return s.isalpha()"
396,"def filter_dict(d,t): return {k:v for k,v in d.items() if v > t}"
397,"def longest_run(s): from itertools import groupby; return max(len(list(g)) for _,g in groupby(s))"
398,"def show_positions(lst): [print(f'{i}: {x}') for i,x in enumerate(lst)]"
399,"def sec_to_dhms(s): d,h = divmod(s,86400); h,m = divmod(h,3600); m,s = divmod(m,60); return d,h,m,s"
400,"print('Hello World')"

