id,response
1,"def is_palindrome(s): return s == s[::-1]"
2,"def factorial(n): return 1 if n == 0 else n * factorial(n-1)"
3,"def fibonacci(n): a,b,res=0,1,[]; [res.append(a) or (a,b := b,a+b) for _ in range(n)]; return res"
4,"def remove_duplicates(lst): return list(set(lst))"
5,"from collections import Counter; def char_freq(s): return dict(Counter(s))"
6,"def is_prime(n): return n > 1 and all(n % i for i in range(2, int(n**0.5)+1))"
7,"from math import gcd; def find_gcd(a,b): return gcd(a,b)"
8,"def reverse_words(sentence): return ' '.join(sentence.split()[::-1])"
9,"def merge_dicts(d1,d2): return {**d1, **d2}"
10,"def sum_evens(lst): return sum(x for x in lst if x % 2 == 0)"
11,"def second_largest(lst): return sorted(set(lst))[-2]"
12,"def flatten(lst): return [i for sub in lst for i in sub]"
13,"def contains_substring(s, sub): return sub in s"
14,"def sort_by_second(tuples): return sorted(tuples, key=lambda x: x[1])"
15,"def is_leap(year): return year%4==0 and (year%100!=0 or year%400==0)"
16,"import os; def file_size(path): return os.path.getsize(path)"
17,"import string; def remove_punct(s): return s.translate(str.maketrans('', '', string.punctuation))"
18,"def read_file(path): [print(line.strip()) for line in open(path)]"
19,"def join_strings(lst): return ','.join(lst)"
20,"import random,string; def gen_pass(): return ''.join(random.choices(string.ascii_letters+string.digits, k=10))"
21,"def unique_elements(lst): return list(set(lst))"
22,"from collections import Counter; def most_frequent(lst): return Counter(lst).most_common(1)[0][0]"
23,"def average(lst): return sum(lst)/len(lst)"
24,"def are_anagrams(a,b): return sorted(a)==sorted(b)"
25,"def count_vowels(s): return sum(1 for c in s.lower() if c in 'aeiou')"
26,"from datetime import datetime; def now(): return datetime.now()"
27,"def triangle_area(b,h): return 0.5 * b * h"
28,"def is_sorted(lst): return lst == sorted(lst)"
29,"import math; def sqrt(n): return math.sqrt(n)"
30,"import os; def list_files(path): return os.listdir(path)"
31,"def longest_word(sentence): return max(sentence.split(), key=len)"
32,"def is_armstrong(n): return n == sum(int(d)**len(str(n)) for d in str(n))"
33,"def cap_words(s): return s.title()"
34,"def squares(): return [x**2 for x in range(1,11)]"
35,"def sum_digits(n): return sum(int(d) for d in str(n))"
36,"def replace_spaces(s): return s.replace(' ','_')"
37,"def bin_to_dec(b): return int(b, 2)"
38,"def all_unique(lst): return len(lst)==len(set(lst))"
39,"def remove_whitespace(s): return ''.join(s.split())"
40,"def to_dict(keys,vals): return dict(zip(keys, vals))"
41,"def max_of_three(a,b,c): return max(a,b,c)"
42,"def table(n): [print(f'{n} x {i} = {n*i}') for i in range(1,11)]"
43,"def common_elements(a,b): return list(set(a)&set(b))"
44,"def c_to_k(c): return c + 273.15"
45,"import math; def factorial(n): return math.factorial(n)"
46,"def compound_interest(p,r,t): return p*(1+r/100)**t - p"
47,"def count_lines(path): return sum(1 for _ in open(path))"
48,"def reverse_file(path): lines=open(path).readlines(); lines.reverse(); [print(line.strip()) for line in lines]"
49,"def find_index(lst, x): return lst.index(x)"
50,"def remove_all(lst, val): return [x for x in lst if x != val]"
51,"def merge_sorted(a,b): return sorted(a + b)"
52,"with open('file.txt','w') as f: f.write('Your text here')"
53,"def is_all_numbers(lst): return all(isinstance(x, (int,float)) for x in lst)"
54,"def sum_div_by_3(lst): return sum(x for x in lst if x % 3 == 0)"
55,"def gen_primes(n): p, r = [], 2; while len(p) < n: all(r%i for i in range(2,int(r**0.5)+1)) and p.append(r); r+=1; return p"
56,"import os; def rename_files(path, prefix): [os.rename(f'{path}/{f}', f'{path}/{prefix}{f}') for f in os.listdir(path)]"
57,"def median(lst): s=sorted(lst); l=len(s); return (s[l//2] if l%2 else (s[l//2-1]+s[l//2])/2)"
58,"import string; def is_pangram(s): return set(string.ascii_lowercase) <= set(s.lower())"
59,"def power(a,b): return a ** b"
60,"def dec_to_bin(n): return bin(n)[2:]"
61,"def remove_none(lst): return [x for x in lst if x is not None]"
62,"def word_count(file,word): return open(file).read().split().count(word)"
63,"def starts_with(s, prefix): return s.startswith(prefix)"
64,"from functools import reduce; def factorial(n): return reduce(lambda x,y:x*y, range(1,n+1), 1)"
65,"def sort_desc(lst): return sorted(lst, reverse=True)"
66,"import random; def random_ints(n, a=0, b=100): return [random.randint(a,b) for _ in range(n)]"
67,"def is_even(n): return n % 2 == 0"
68,"def remove_dupes_order(lst): seen=set(); return [x for x in lst if not (x in seen or seen.add(x))]"
69,"def fib_n(n): a,b=0,1; [a:=b; b:=a+b for _ in range(n-1)]; return a"
70,"def to_title(s): return s.title()"
71,"def is_digits(s): return s.isdigit()"
72,"def evens(): return [x for x in range(2,101,2)]"
73,"def rect_perimeter(w,h): return 2*(w+h)"
74,"def split_words(s): return s.split()"
75,"nested = {'outer': {'inner': 'value'}}"
76,"from functools import reduce; def multiply(lst): return reduce(lambda x,y:x*y, lst)"
77,"import re; def valid_email(e): return bool(re.match(r'^[\w.-]+@[\w.-]+\.\w+$', e))"
78,"def count_upper(s): return sum(1 for c in s if c.isupper())"
79,"def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')"
80,"def distance(p1,p2): return ((p2[0]-p1[0])**2 + (p2[1]-p1[1])**2)**0.5"
81,"def key_exists(d, key): return key in d"
82,"def merge_dicts(*dicts): res={}; [res.update(d) for d in dicts]; return res"
83,"def is_palindrome_ignore_space(s): s=s.replace(' ',''); return s==s[::-1]"
84,"def find_pairs(lst, target): return [(x,y) for i,x in enumerate(lst) for y in lst[i+1:] if x+y==target]"
85,"from collections import Counter; def word_freq(s): return dict(Counter(s.split()))"
86,"def extract_digits(s): return [int(c) for c in s if c.isdigit()]"
87,"from itertools import permutations; def perms(s): return [''.join(p) for p in permutations(s)]"
88,"def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))"
89,"def replace_vowels(s): return ''.join('*' if c.lower() in 'aeiou' else c for c in s)"
90,"def common_exists(a,b): return bool(set(a)&set(b))"
91,"def primes_1_to_50(): return [x for x in range(2,51) if all(x%i for i in range(2,int(x**0.5)+1))]"
92,"def list_to_str(lst): return ''.join(lst)"
93,"import re; def clean_string(s): return re.sub(r'[^a-zA-Z0-9]', '', s)"
94,"def is_identifier(s): return s.isidentifier()"
95,"def word_count(s): return len(s.split())"
96,"def list_to_csv(lst): return ','.join(map(str,lst))"
97,"def swap_first_last(lst): lst[0],lst[-1]=lst[-1],lst[0]; return lst"
98,"def is_perfect_square(n): return int(n**0.5)**2 == n"
99,"def round2(n): return round(n,2)"
100,"def remove_empty(lst): return [x for x in lst if x]"

