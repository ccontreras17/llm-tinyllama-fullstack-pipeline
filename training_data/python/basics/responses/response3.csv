id,response
201,"def c_to_f(c): return (c * 9/5) + 32"
202,"def check_sign(n): return 'Positive' if n>0 else 'Negative' if n<0 else 'Zero'"
203,"def cube(n): return n ** 3"
204,"def count_digits(n): return len(str(abs(n)))"
205,"def is_vowel(c): return c.lower() in 'aeiou'"
206,"def ascii_value(c): return ord(c)"
207,"def swap_temp(a,b): t=a; a=b; b=t; return a,b"
208,"def swap_no_temp(a,b): a,b = b,a; return a,b"
209,"import math; def circumference(r): return 2 * math.pi * r"
210,"def char_case(c): return 'Upper' if c.isupper() else 'Lower'"
211,"def sum_natural(n): return sum(range(n))"
212,"[print(f'{i} x {j} = {i*j}') for i in range(1,6) for j in range(1,11)]"
213,"def print_natural(): i=1; while i<=10: print(i); i+=1"
214,"[print(i) for i in range(1,101) if i%3 != 0]"
215,"def reverse_number(n): return int(str(n)[::-1])"
216,"def num_to_digits(n): return [int(d) for d in str(n)]"
217,"def simple_interest(p,r,t): return (p*r*t)/100"
218,"[print(chr(i), i) for i in range(128)]"
219,"def is_digit(c): return c.isdigit()"
220,"for i in range(1,6): print(' '*(5-i)+'*'*i)"
221,"def print_evens(): [print(i) for i in range(2,51,2)]"
222,"for i in range(10,0,-1): print(i)"
223,"def len_even_or_odd(s): return 'Even' if len(s)%2==0 else 'Odd'"
224,"import random; print(random.randint(1,100))"
225,"import math; def round_up(n): return math.ceil(n)"
226,"import os; print(os.getcwd())"
227,"def remove_last(s): return s[:-1]"
228,"def print_first_last(lst): print(lst[0], lst[-1])"
229,"def in_range(n, start, end): return start <= n <= end"
230,"def float_to_int(lst): return list(map(int, lst))"
231,"def min_in_list(lst): return min(lst)"
232,"def min_to_hr_min(m): return divmod(m, 60)"
233,"def print_square(n): [print('#'*n) for _ in range(n)]"
234,"def ascii_each(s): return [(c, ord(c)) for c in s]"
235,"def reverse_in_place(lst): lst.reverse(); return lst"
236,"[print(i) for i in range(1,40,2)]"
237,"def div_3_5(n): return n%3==0 and n%5==0"
238,"def mult_7(): return [7*i for i in range(1,11)]"
239,"def split_list(lst): mid=len(lst)//2; return lst[:mid], lst[mid:]"
240,"def remove_char(s,c): return s.replace(c,'')"
241,"for i in range(1,6): print(' '.join(str(j) for j in range(1,i+1)))"
242,"def last_n(lst,n): return lst[-n:]"
243,"def compare_strings(a,b): return a.lower() == b.lower()"
244,"def even_indexed(s): return s[::2]"
245,"def concat_indexwise(a,b): return [x+y for x,y in zip(a,b)]"
246,"def double_chars(s): return ''.join(c*2 for c in s)"
247,"def remove_dupe_chars(s): return ''.join(dict.fromkeys(s))"
248,"def filter_long(lst): return [s for s in lst if len(s) > 5]"
249,"def count_lower(s): return sum(1 for c in s if c.islower())"
250,"def valid_identifier(s): return s.isidentifier()"
251,"def repeat_string(s, n): return s * n"
252,"def extract_upper(s): return ''.join(c for c in s if c.isupper())"
253,"def div_by_7(): return [x for x in range(1,1001) if x%7==0]"
254,"def count_element(lst, el): return lst.count(el)"
255,"def replace_first(s, old, new): return s.replace(old, new, 1)"
256,"def remove_nth(lst, n): return lst[:n]+lst[n+1:]"
257,"def pad_zero(s, width): return s.zfill(width)"
258,"def insert_start(lst, val): return [val]+lst"
259,"def tuple_to_str(t): return ''.join(t)"
260,"def is_empty(lst): return len(lst) == 0"
261,"def equal_ignore_case(a,b): return a.lower() == b.lower()"
262,"def slice_str(s): return s[2:6]"
263,"def str_to_list(s): return list(s)"
264,"def sum_ascii(s): return sum(ord(c) for c in s)"
265,"def contains_none(lst): return any(x is None for x in lst)"
266,"def replace_nth_char(s, n, c): return s[:n] + c + s[n+1:]"
267,"def list_to_lower(lst): return [x.lower() for x in lst]"
268,"def word_lengths(s): return [len(w) for w in s.split()]"
269,"def remove_newlines(s): return s.replace('\n','')"
270,"def list_to_tuple(lst): return tuple(lst)"
271,"def char_in_string(c,s): return c in s"
272,"def is_divisible(a,b): return a % b == 0"
273,"def repeat_elements(lst, n): return [x for x in lst for _ in range(n)]"
274,"def middle_element(lst): return lst[len(lst)//2]"
275,"def count_true(lst): return sum(lst)"
276,"from functools import reduce; def product(lst): return reduce(lambda x,y:x*y, lst, 1)"
277,"from itertools import product; print([''.join(c) for c in product(['a','b','c'], repeat=3)])"
278,"def count_chars(s): d={}; [d.update({c:d.get(c,0)+1}) for c in s]; return d"
279,"for i in range(5): print(' '*(4-i)+'*'*(2*i+1)); [print(' '*(i+1)+'*'*(7-2*i)) for i in range(4)]"
280,"def range_diff(lst): return max(lst) - min(lst)"
281,"[print(i,x) for i,x in enumerate(['a','b','c'])]"
282,"def remove_first_n(s,n): return s[n:]"
283,"def keys_to_dict(keys, default=0): return dict.fromkeys(keys, default)"
284,"def repeated_list(el, n): return [el]*n"
285,"def remove_negatives(lst): return [x for x in lst if x >= 0]"
286,"def insert_substring(s, sub, idx): return s[:idx]+sub+s[idx:]"
287,"def word_in_sentence(word, sent): return word in sent.split()"
288,"def count_types(s): d=l=s=0; [d:=d+1 if c.isdigit() else l:=l+1 if c.isalpha() else s:=s+1 for c in s]; return d,l,s"
289,"def print_1_to_10(n=1): print(n); print_1_to_10(n+1) if n<10 else None"
290,"def to_lower(s): return ''.join(chr(ord(c)+32) if 'A'<=c<='Z' else c for c in s)"
291,"a=int(input()); b=int(input()); print(a+b)"
292,"def odd_numbers(n): return [x for x in range(1,n+1) if x%2]"
293,"for i in range(1,6): print(' '.join(str(j) for j in range(1,i+1)))"
294,"def mask_string(s): return '*'*(len(s)-4)+s[-4:]"
295,"def max_2d(lst): return max(max(row) for row in lst)"
296,"def to_seconds(h,m,s): return h*3600 + m*60 + s"
297,"def count_words(s): return len(s.split())"
298,"def all_lower(s): return s == s.lower()"
299,"def str_to_int_list(s): return list(map(int, s.split()))"
300,"def repeat_list(lst, n): return lst * n"

