id,response
401,"def multiples_of_4(): print([i for i in range(1,101) if i%4==0])"
402,"def is_substring(word, text): return word in text"
403,"def sum_odds(lst): return sum(x for x in lst if x%2)"
404,"def longer_str(a,b): return a if len(a)>len(b) else b"
405,"def remove_third(s): return ''.join(c for i,c in enumerate(s) if (i+1)%3!=0)"
406,"def squares(): return [i**2 for i in range(1,10)]"
407,"def count_lowercase(s): return sum(1 for c in s if c.islower())"
408,"def repeat_char(c,n): print(c*n)"
409,"def repeated_chars(s): return list({c for c in s if s.count(c) > 1})"
410,"def to_acronym(s): return ''.join(word[0].upper() for word in s.split())"
411,"def print_1_to_n(n): return n and print_1_to_n(n-1) or print(n)"
412,"def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"
413,"def list_to_dict(lst): return {v:i for i,v in enumerate(lst)}"
414,"def merge_unique(*lists): return list(set(sum(lists, [])))"
415,"def is_pangram(s): import string; return set(string.ascii_lowercase) <= set(s.lower())"
416,"def cap_even_pos(s): return ''.join(c.upper() if i%2==0 else c for i,c in enumerate(s))"
417,"import re; def clean_string(s): return re.sub(r'[^a-zA-Z0-9]', '', s)"
418,"def ends_with(s,suffix): return s.endswith(suffix)"
419,"def tuples_to_dict(t): return dict(t)"
420,"def unicode_val(c): return ord(c)"
421,"def print_binary(n): if n>0: print_binary(n//2); print(n%2,end='')"
422,"def has_repeats(s): return len(set(s)) != len(s)"
423,"def max_in_list(lst): m=lst[0]; [m:=x if x>m else m for x in lst]; return m"
424,"def multiple_2_6(n): return n%2==0 and n%6==0"
425,"def only_letters(s): return ''.join(c for c in s if c.isalpha())"
426,"def count_caps(s): return sum(1 for w in s.split() if w[0].isupper())"
427,"def alt_case(s): return ''.join(c.upper() if i%2==0 else c.lower() for i,c in enumerate(s))"
428,"def harmonic(n): [print(1/i) for i in range(1,n+1)]"
429,"def to_hex(s): return [hex(ord(c)) for c in s]"
430,"import random,string; print(random.choice(string.ascii_uppercase))"
431,"def in_range(n, start, end): return start <= n <= end"
432,"def mask_middle(s): mid=len(s)//2; return s[:mid]+'*'+s[mid+1:]"
433,"def sum_primes(n): return sum(x for x in range(2,n+1) if all(x%i for i in range(2,int(x**0.5)+1)))"
434,"def strictly_increasing(lst): return all(lst[i] < lst[i+1] for i in range(len(lst)-1))"
435,"def avg_rounded(lst): return round(sum(lst)/len(lst))"
436,"def char_type(c): return 'Letter' if c.isalpha() else 'Digit' if c.isdigit() else 'Symbol'"
437,"def reverse_num(n): r=0; while n: r=r*10+n%10; n//=10; print(r)"
438,"def vowel_indexes(s): return [i for i,c in enumerate(s) if c.lower() in 'aeiou']"
439,"def is_century(year): return year % 100 == 0"
440,"def to_exponential(n): return '{:.2e}'.format(n)"
441,"def rotate_left(lst,n): return lst[n:] + lst[:n]"
442,"def count_upper_vowels(s): return sum(1 for c in s if c in 'AEIOU')"
443,"def is_harshad(n): return n % sum(int(d) for d in str(n)) == 0"
444,"def sqrt_loop(lst): return [x**0.5 for x in lst]"
445,"from collections import Counter; def max_freq_char(s): return Counter(s).most_common(1)[0][0]"
446,"def chunk_list(lst,n): return [lst[i:i+n] for i in range(0,len(lst),n)]"
447,"def strip_leading_zeros(s): return s.lstrip('0')"
448,"def is_palindrome(s): return s == s[::-1]"
449,"def skip_odds(s): return ''.join(s[i] for i in range(len(s)) if i%2==0)"
450,"from functools import reduce; from math import gcd; def gcd_multi(lst): return reduce(gcd, lst)"
451,"def ascii_diff(a,b): return abs(ord(a)-ord(b))"
452,"def pattern(n): [print('*'*i) for i in range(1,n+1)]"
453,"def has_consecutive(lst): return sorted(lst) == list(range(min(lst), max(lst)+1))"
454,"import re; def clean_list(lst): return [re.sub(r'[^a-zA-Z0-9 ]','',s) for s in lst]"
455,"def prod_digits(n): return 1 if n<10 else n%10 * prod_digits(n//10)"
456,"def count_even_odd(n): e=o=0; [e:=e+1 if int(d)%2==0 else o:=o+1 for d in str(n)]; return e,o"
457,"def remove_repeats(s): return ''.join(dict.fromkeys(s))"
458,"from collections import Counter; def freq_map(s): return Counter(s)"
459,"def longest_unique_substr(s): seen = {}; start = max_len = 0; for i,c in enumerate(s): start = max(start, seen.get(c,-1)+1); seen[c]=i; max_len = max(max_len, i-start+1); return max_len"
460,"def capitalized_words(s): return [w for w in s.split() if w.istitle()]"
461,"def multiply_by_index(lst): return [i*x for i,x in enumerate(lst)]"
462,"def last_digits(lst): return [int(str(x)[-1]) for x in lst]"
463,"def sum_digits_in_str(s): return sum(int(c) for c in s if c.isdigit())"
464,"def unique_letter_count(s): return len(set(c for c in s if c.isalpha()))"
465,"def all_odd_digits(n): return all(int(d)%2 for d in str(n))"
466,"def word_lengths(s): return ' '.join(str(len(w)) for w in s.split())"
467,"def double_values(lst): out=[]; [out.append(x*2) for x in lst]; return out"
468,"def longest_word(lst): return max(lst, key=len)"
469,"def one_unique_char(s): return len(set(s))==1"
470,"from collections import Counter; def count_all(s): return Counter(s)"
471,"def remove_gt(lst,val): return [x for x in lst if x <= val]"
472,"import re; def camel_to_snake(s): return re.sub(r'([A-Z])', r'_\1', s).lower()"
473,"import string; def count_chars(s): return sum(1 for c in s if c not in string.punctuation+' ')"
474,"def is_alnum(s): return s.isalnum()"
475,"def digital_root(n): return n if n<10 else digital_root(sum(map(int,str(n))))"
476,"def rotate_string(s,n): return s[n:] + s[:n]"
477,"def sum_formula(n): return n*(n+1)//2"
478,"import random; print(random.choice(['Heads','Tails']))"
479,"def count_digits(s): return sum(1 for c in s if c.isdigit())"
480,"def convert_all(n): return bin(n), oct(n), hex(n)"
481,"def same_chars(a,b): return sorted(a)==sorted(b)"
482,"def last_n(s,n): return s[-n:]"
483,"def reverse_math(n): rev=0; while n: rev=rev*10 + n%10; n//=10; return rev"
484,"def format_str(): name=input(); age=int(input()); print(f'My name is {name} and I am {age}')"
485,"def squares_of_evens(lst): return [x**2 for x in lst if x%2==0]"
486,"def extract_domain(email): return email.split('@')[-1]"
487,"def dedupe_str(s): seen=set(); out=''; [out:=out+c if c not in seen else None or seen.add(c) for c in s]; return out"
488,"import time; def countdown(n): [print(i) or time.sleep(1) for i in range(n,0,-1)]"
489,"def min_positive(lst): pos=[x for x in lst if x>0]; return min(pos) if pos else None"
490,"def newline_words(s): [print(w) for w in s.split()]"
491,"def factors(n): return [i for i in range(1,n+1) if n%i==0]"
492,"def check_numeric(s): return s.isnumeric()"
493,"def initials(name): return ''.join(w[0].upper() for w in name.split())"
494,"def letters_list(w): out=[]; [out.append(c) for c in w]; return out"
495,"def has_duplicates(lst): return len(lst) != len(set(lst))"
496,"def every_third(lst): return lst[2::3]"
497,"def count_distinct(s): return len(set(s))"
498,"def alt_upper_lower(s): return ''.join(c.upper() if i%2==0 else c.lower() for i,c in enumerate(s))"
499,"def mult_digits(a,b): return int(str(a)[-1]) * int(str(b)[0])"
500,"def letters_to_unicode(s): return ' '.join(str(ord(c)) for c in s)"


