{"instruction": "Write a Python function to check if a string is a palindrome.", "response": "def is_palindrome(s): return s == s[::-1]"}
{"instruction": "Write a Python function to calculate the factorial of a number using recursion.", "response": "def factorial(n): return 1 if n == 0 else n * factorial(n-1)"}
{"instruction": "Write a Python function to compute the Fibonacci sequence up to n terms.", "response": "def fibonacci(n): a,b,res=0,1,[]; [res.append(a) or (a,b := b,a+b) for _ in range(n)]; return res"}
{"instruction": "Write a Python program to remove duplicates from a list.", "response": "def remove_duplicates(lst): return list(set(lst))"}
{"instruction": "Write a Python script to count the frequency of each character in a string.", "response": "from collections import Counter; def char_freq(s): return dict(Counter(s))"}
{"instruction": "Write a Python function to check if a number is prime.", "response": "def is_prime(n): return n > 1 and all(n % i for i in range(2, int(n**0.5)+1))"}
{"instruction": "Write a Python program to find the greatest common divisor (GCD) of two numbers.", "response": "from math import gcd; def find_gcd(a,b): return gcd(a,b)"}
{"instruction": "Write a Python function to reverse the words in a sentence.", "response": "def reverse_words(sentence): return ' '.join(sentence.split()[::-1])"}
{"instruction": "Write a Python script to merge two dictionaries.", "response": "def merge_dicts(d1,d2): return {**d1, **d2}"}
{"instruction": "Write a Python function to calculate the sum of all even numbers in a list.", "response": "def sum_evens(lst): return sum(x for x in lst if x % 2 == 0)"}
{"instruction": "Write a Python program to find the second largest number in a list.", "response": "def second_largest(lst): return sorted(set(lst))[-2]"}
{"instruction": "Write a Python function to flatten a nested list.", "response": "def flatten(lst): return [i for sub in lst for i in sub]"}
{"instruction": "Write a Python script to check if a substring exists within a string.", "response": "def contains_substring(s, sub): return sub in s"}
{"instruction": "Write a Python program to sort a list of tuples by the second element.", "response": "def sort_by_second(tuples): return sorted(tuples, key=lambda x: x[1])"}
{"instruction": "Write a Python function to check if a year is a leap year.", "response": "def is_leap(year): return year%4==0 and (year%100!=0 or year%400==0)"}
{"instruction": "Write a Python script to get the file size of a given file.", "response": "import os; def file_size(path): return os.path.getsize(path)"}
{"instruction": "Write a Python function to remove punctuation from a string.", "response": "import string; def remove_punct(s): return s.translate(str.maketrans('', '', string.punctuation))"}
{"instruction": "Write a Python program to read a file line by line and print each line.", "response": "def read_file(path): [print(line.strip()) for line in open(path)]"}
{"instruction": "Write a Python function to convert a list of strings to a single string separated by commas.", "response": "def join_strings(lst): return ','.join(lst)"}
{"instruction": "Write a Python program to generate a random password of length 10.", "response": "import random,string; def gen_pass(): return ''.join(random.choices(string.ascii_letters+string.digits, k=10))"}
{"instruction": "Write a Python function to find all the unique elements in a list.", "response": "def unique_elements(lst): return list(set(lst))"}
{"instruction": "Write a Python script to find the most frequent element in a list.", "response": "from collections import Counter; def most_frequent(lst): return Counter(lst).most_common(1)[0][0]"}
{"instruction": "Write a Python function to compute the average of numbers in a list.", "response": "def average(lst): return sum(lst)/len(lst)"}
{"instruction": "Write a Python program to check if two strings are anagrams.", "response": "def are_anagrams(a,b): return sorted(a)==sorted(b)"}
{"instruction": "Write a Python function to count the number of vowels in a string.", "response": "def count_vowels(s): return sum(1 for c in s.lower() if c in 'aeiou')"}
{"instruction": "Write a Python script to get the current date and time.", "response": "from datetime import datetime; def now(): return datetime.now()"}
{"instruction": "Write a Python function to calculate the area of a triangle given its base and height.", "response": "def triangle_area(b,h): return 0.5 * b * h"}
{"instruction": "Write a Python program to check if a list is sorted in ascending order.", "response": "def is_sorted(lst): return lst == sorted(lst)"}
{"instruction": "Write a Python function to calculate the square root of a number.", "response": "import math; def sqrt(n): return math.sqrt(n)"}
{"instruction": "Write a Python script to list all files in a directory.", "response": "import os; def list_files(path): return os.listdir(path)"}
{"instruction": "Write a Python function to find the longest word in a sentence.", "response": "def longest_word(sentence): return max(sentence.split(), key=len)"}
{"instruction": "Write a Python program to check if a number is an Armstrong number.", "response": "def is_armstrong(n): return n == sum(int(d)**len(str(n)) for d in str(n))"}
{"instruction": "Write a Python function to capitalize the first letter of each word in a string.", "response": "def cap_words(s): return s.title()"}
{"instruction": "Write a Python program to create a list of squares from 1 to 10.", "response": "def squares(): return [x**2 for x in range(1,11)]"}
{"instruction": "Write a Python function to calculate the sum of digits of a number.", "response": "def sum_digits(n): return sum(int(d) for d in str(n))"}
{"instruction": "Write a Python script to replace all spaces in a string with underscores.", "response": "def replace_spaces(s): return s.replace(' ','_')"}
{"instruction": "Write a Python program to convert a binary number to decimal.", "response": "def bin_to_dec(b): return int(b, 2)"}
{"instruction": "Write a Python function to check if all elements in a list are unique.", "response": "def all_unique(lst): return len(lst)==len(set(lst))"}
{"instruction": "Write a Python script to remove all whitespace characters from a string.", "response": "def remove_whitespace(s): return ''.join(s.split())"}
{"instruction": "Write a Python program to create a dictionary from two lists.", "response": "def to_dict(keys,vals): return dict(zip(keys, vals))"}
{"instruction": "Write a Python function to return the maximum of three numbers.", "response": "def max_of_three(a,b,c): return max(a,b,c)"}
{"instruction": "Write a Python script to print the multiplication table of a given number.", "response": "def table(n): [print(f'{n} x {i} = {n*i}') for i in range(1,11)]"}
{"instruction": "Write a Python function to find the common elements between two lists.", "response": "def common_elements(a,b): return list(set(a)&set(b))"}
{"instruction": "Write a Python program to convert Celsius to Kelvin.", "response": "def c_to_k(c): return c + 273.15"}
{"instruction": "Write a Python script to calculate the factorial using the math module.", "response": "import math; def factorial(n): return math.factorial(n)"}
{"instruction": "Write a Python function to calculate the compound interest.", "response": "def compound_interest(p,r,t): return p*(1+r/100)**t - p"}
{"instruction": "Write a Python program to count the number of lines in a text file.", "response": "def count_lines(path): return sum(1 for _ in open(path))"}
{"instruction": "Write a Python script to reverse the order of words in a file.", "response": "def reverse_file(path): lines=open(path).readlines(); lines.reverse(); [print(line.strip()) for line in lines]"}
{"instruction": "Write a Python function to find the index of an element in a list.", "response": "def find_index(lst, x): return lst.index(x)"}
{"instruction": "Write a Python program to remove all occurrences of a specific element from a list.", "response": "def remove_all(lst, val): return [x for x in lst if x != val]"}
{"instruction": "Write a Python function to merge two sorted lists into a single sorted list.", "response": "def merge_sorted(a,b): return sorted(a + b)"}
{"instruction": "Write a Python script to create a text file and write some text to it.", "response": "with open('file.txt','w') as f: f.write('Your text here')"}
{"instruction": "Write a Python function to check if a list contains only numbers.", "response": "def is_all_numbers(lst): return all(isinstance(x, (int,float)) for x in lst)"}
{"instruction": "Write a Python program to find the sum of all numbers divisible by 3 in a list.", "response": "def sum_div_by_3(lst): return sum(x for x in lst if x % 3 == 0)"}
{"instruction": "Write a Python function to generate the first n prime numbers.", "response": "def gen_primes(n): p, r = [], 2; while len(p) < n: all(r%i for i in range(2,int(r**0.5)+1)) and p.append(r); r+=1; return p"}
{"instruction": "Write a Python script to rename all files in a directory by adding a prefix.", "response": "import os; def rename_files(path, prefix): [os.rename(f'{path}/{f}', f'{path}/{prefix}{f}') for f in os.listdir(path)]"}
{"instruction": "Write a Python program to find the median of a list.", "response": "def median(lst): s=sorted(lst); l=len(s); return (s[l//2] if l%2 else (s[l//2-1]+s[l//2])/2)"}
{"instruction": "Write a Python function to check if a string is a pangram.", "response": "import string; def is_pangram(s): return set(string.ascii_lowercase) <= set(s.lower())"}
{"instruction": "Write a Python script to calculate the power of a number.", "response": "def power(a,b): return a ** b"}
{"instruction": "Write a Python program to convert a decimal number to binary.", "response": "def dec_to_bin(n): return bin(n)[2:]"}
{"instruction": "Write a Python function to remove None values from a list.", "response": "def remove_none(lst): return [x for x in lst if x is not None]"}
{"instruction": "Write a Python script to count how many times a word appears in a file.", "response": "def word_count(file,word): return open(file).read().split().count(word)"}
{"instruction": "Write a Python program to check if a string starts with a given prefix.", "response": "def starts_with(s, prefix): return s.startswith(prefix)"}
{"instruction": "Write a Python function to get the factorial of a number using reduce.", "response": "from functools import reduce; def factorial(n): return reduce(lambda x,y:x*y, range(1,n+1), 1)"}
{"instruction": "Write a Python script to sort a list in descending order.", "response": "def sort_desc(lst): return sorted(lst, reverse=True)"}
{"instruction": "Write a Python function to generate a list of random integers.", "response": "import random; def random_ints(n, a=0, b=100): return [random.randint(a,b) for _ in range(n)]"}
{"instruction": "Write a Python program to check if a number is even or odd.", "response": "def is_even(n): return n % 2 == 0"}
{"instruction": "Write a Python script to remove duplicates while preserving order.", "response": "def remove_dupes_order(lst): seen=set(); return [x for x in lst if not (x in seen or seen.add(x))]"}
{"instruction": "Write a Python function to return the nth Fibonacci number.", "response": "def fib_n(n): a,b=0,1; [a:=b; b:=a+b for _ in range(n-1)]; return a"}
{"instruction": "Write a Python program to convert a string to title case.", "response": "def to_title(s): return s.title()"}
{"instruction": "Write a Python function to check if a string contains only digits.", "response": "def is_digits(s): return s.isdigit()"}
{"instruction": "Write a Python script to create a list of all even numbers between 1 and 100.", "response": "def evens(): return [x for x in range(2,101,2)]"}
{"instruction": "Write a Python program to calculate the perimeter of a rectangle.", "response": "def rect_perimeter(w,h): return 2*(w+h)"}
{"instruction": "Write a Python function to split a string into a list of words.", "response": "def split_words(s): return s.split()"}
{"instruction": "Write a Python script to create a nested dictionary.", "response": "nested = {'outer': {'inner': 'value'}}"}
{"instruction": "Write a Python program to multiply all numbers in a list.", "response": "from functools import reduce; def multiply(lst): return reduce(lambda x,y:x*y, lst)"}
{"instruction": "Write a Python function to validate an email address.", "response": "import re; def valid_email(e): return bool(re.match(r'^[\\w.-]+@[\\w.-]+\\.\\w+$', e))"}
{"instruction": "Write a Python script to count the number of uppercase letters in a string.", "response": "def count_upper(s): return sum(1 for c in s if c.isupper())"}
{"instruction": "Write a Python program to remove all vowels from a string.", "response": "def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')"}
{"instruction": "Write a Python function to calculate the distance between two points.", "response": "def distance(p1,p2): return ((p2[0]-p1[0])**2 + (p2[1]-p1[1])**2)**0.5"}
{"instruction": "Write a Python script to check if a given key exists in a dictionary.", "response": "def key_exists(d, key): return key in d"}
{"instruction": "Write a Python program to merge multiple dictionaries.", "response": "def merge_dicts(*dicts): res={}; [res.update(d) for d in dicts]; return res"}
{"instruction": "Write a Python function to check if a string is a palindrome ignoring spaces.", "response": "def is_palindrome_ignore_space(s): s=s.replace(' ',''); return s==s[::-1]"}
{"instruction": "Write a Python script to find all pairs in a list whose sum is equal to a target value.", "response": "def find_pairs(lst, target): return [(x,y) for i,x in enumerate(lst) for y in lst[i+1:] if x+y==target]"}
{"instruction": "Write a Python function to count the occurrence of each word in a string.", "response": "from collections import Counter; def word_freq(s): return dict(Counter(s.split()))"}
{"instruction": "Write a Python program to extract digits from a string.", "response": "def extract_digits(s): return [int(c) for c in s if c.isdigit()]"}
{"instruction": "Write a Python function to generate all permutations of a string.", "response": "from itertools import permutations; def perms(s): return [''.join(p) for p in permutations(s)]"}
{"instruction": "Write a Python script to sort a dictionary by its values.", "response": "def sort_dict_by_value(d): return dict(sorted(d.items(), key=lambda item: item[1]))"}
{"instruction": "Write a Python program to replace vowels in a string with '*'.", "response": "def replace_vowels(s): return ''.join('*' if c.lower() in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python function to check if two lists have at least one common element.", "response": "def common_exists(a,b): return bool(set(a)&set(b))"}
{"instruction": "Write a Python script to print all prime numbers between 1 and 50.", "response": "def primes_1_to_50(): return [x for x in range(2,51) if all(x%i for i in range(2,int(x**0.5)+1))]"}
{"instruction": "Write a Python program to convert a list of characters into a string.", "response": "def list_to_str(lst): return ''.join(lst)"}
{"instruction": "Write a Python function to remove all non-alphanumeric characters from a string.", "response": "import re; def clean_string(s): return re.sub(r'[^a-zA-Z0-9]', '', s)"}
{"instruction": "Write a Python script to check if a string is a valid identifier.", "response": "def is_identifier(s): return s.isidentifier()"}
{"instruction": "Write a Python program to count the number of words in a sentence.", "response": "def word_count(s): return len(s.split())"}
{"instruction": "Write a Python function to convert a list of integers to a comma-separated string.", "response": "def list_to_csv(lst): return ','.join(map(str,lst))"}
{"instruction": "Write a Python script to swap the first and last elements of a list.", "response": "def swap_first_last(lst): lst[0],lst[-1]=lst[-1],lst[0]; return lst"}
{"instruction": "Write a Python program to check if a number is a perfect square.", "response": "def is_perfect_square(n): return int(n**0.5)**2 == n"}
{"instruction": "Write a Python function to round a number to two decimal places.", "response": "def round2(n): return round(n,2)"}
{"instruction": "Write a Python script to remove all empty strings from a list.", "response": "def remove_empty(lst): return [x for x in lst if x]"}
{"instruction": "Explain why this Python code raises an error: `print(unknown_variable)`", "response": "Because 'unknown_variable' is not defined."}
{"instruction": "Write a Python function that takes a list and returns only unique elements while preserving order.", "response": "def unique_order(lst): seen=set(); return [x for x in lst if not (x in seen or seen.add(x))]"}
{"instruction": "Refactor this nested loop into a list comprehension: `for i in range(5): for j in range(5): result.append(i*j)`", "response": "result = [i*j for i in range(5) for j in range(5)]"}
{"instruction": "Write Python code to merge two dictionaries recursively.", "response": "def recursive_merge(d1,d2): from collections.abc import Mapping; for k,v in d2.items(): d1[k] = recursive_merge(d1.get(k,{}),v) if isinstance(v,Mapping) else v; return d1"}
{"instruction": "Explain what the `zip()` function does in Python.", "response": "It pairs elements from multiple iterables into tuples."}
{"instruction": "Write a Python function that counts how many times each character appears in a string, case-insensitive.", "response": "from collections import Counter; def count_chars(s): return dict(Counter(s.lower()))"}
{"instruction": "Given a list of strings, write Python code to sort them by length.", "response": "def sort_by_length(lst): return sorted(lst, key=len)"}
{"instruction": "Write a Python script that reads a text file and prints the 10 most common words.", "response": "from collections import Counter; print(Counter(open('file.txt').read().split()).most_common(10))"}
{"instruction": "Explain the difference between `deepcopy` and `copy` in Python.", "response": "'copy' creates a shallow copy; 'deepcopy' copies nested objects fully."}
{"instruction": "Write Python code that checks if a list is a palindrome.", "response": "def is_palindrome(lst): return lst == lst[::-1]"}
{"instruction": "Write a Python function that takes a string and returns True if it is a valid email address.", "response": "import re; def valid_email(s): return bool(re.match(r'^[\\w.-]+@[\\w.-]+\\.\\w+$', s))"}
{"instruction": "Explain what a generator is in Python and how it differs from a list.", "response": "A generator yields items lazily, lists store all items in memory."}
{"instruction": "Write a Python function that returns the intersection of two lists.", "response": "def intersect(a,b): return list(set(a)&set(b))"}
{"instruction": "Refactor this code to remove the global variable: `counter = 0; def increment(): global counter; counter += 1`", "response": "def make_incrementer(): counter=0; def inc(): nonlocal counter; counter+=1; return counter"}
{"instruction": "Write Python code to flatten a nested dictionary into a single-level dictionary with keys joined by dots.", "response": "def flatten_dict(d,p=''): items={}; [items.update(flatten_dict(v,f'{p}{k}.')) if isinstance(v,dict) else items.update({f'{p}{k}':v}) for k,v in d.items()]; return items"}
{"instruction": "Write a Python function that takes a list of integers and returns a new list with only the even numbers squared.", "response": "def evens_squared(lst): return [x**2 for x in lst if x%2==0]"}
{"instruction": "Explain what the `*args` and `**kwargs` parameters do.", "response": "*args collects positional args, **kwargs collects keyword args as dict."}
{"instruction": "Write a Python function that validates if a string contains only ASCII characters.", "response": "def is_ascii(s): return all(ord(c) < 128 for c in s)"}
{"instruction": "Given two dates as strings, write Python code to compute the number of days between them.", "response": "from datetime import datetime; def date_diff(a,b): return abs((datetime.strptime(a,'%Y-%m-%d') - datetime.strptime(b,'%Y-%m-%d')).days)"}
{"instruction": "Explain why mutable default arguments can be problematic in Python functions.", "response": "They persist across calls, leading to unexpected behavior."}
{"instruction": "Write Python code that converts a list of integers to a comma-separated string.", "response": "def to_csv(lst): return ','.join(map(str,lst))"}
{"instruction": "Write a Python function to detect whether a string is a pangram.", "response": "import string; def is_pangram(s): return set(string.ascii_lowercase) <= set(s.lower())"}
{"instruction": "Explain the difference between `classmethod` and `staticmethod`.", "response": "classmethod gets the class as the first arg; staticmethod gets nothing extra."}
{"instruction": "Write a Python function that takes a dictionary and returns a new dictionary with keys and values swapped.", "response": "def swap_dict(d): return {v:k for k,v in d.items()}"}
{"instruction": "Write Python code that finds the longest common prefix in a list of strings.", "response": "def longest_prefix(strs): from os.path import commonprefix; return commonprefix(strs)"}
{"instruction": "Explain what a decorator is and provide an example.", "response": "A decorator wraps a function. Example: def deco(f): def wrap(*a,**kw): return f(*a,**kw); return wrap"}
{"instruction": "Write a Python script to download the content of a URL and save it to a file.", "response": "import requests; open('file.txt','wb').write(requests.get('URL').content)"}
{"instruction": "Write Python code that converts a JSON string to a dictionary.", "response": "import json; def json_to_dict(s): return json.loads(s)"}
{"instruction": "Explain what `__init__` does in a Python class.", "response": "It initializes an object’s attributes when the class is instantiated."}
{"instruction": "Write a Python function that sorts a list of dictionaries by a specific key.", "response": "def sort_dicts(lst, key): return sorted(lst, key=lambda x: x[key])"}
{"instruction": "Write Python code to create a namedtuple and use it.", "response": "from collections import namedtuple; Point = namedtuple('Point', 'x y'); p = Point(1,2)"}
{"instruction": "Explain how the `with` statement works for files.", "response": "It automatically opens and closes the file safely."}
{"instruction": "Write a Python function to parse a query string into a dictionary.", "response": "from urllib.parse import parse_qs; def parse_query(q): return {k:v[0] for k,v in parse_qs(q).items()}"}
{"instruction": "Write Python code to calculate the mean, median, and mode of a list.", "response": "import statistics as s; def stats(lst): return s.mean(lst), s.median(lst), s.mode(lst)"}
{"instruction": "Explain the purpose of `__str__` and `__repr__`.", "response": "__str__ is for user-friendly string, __repr__ is for debugging."}
{"instruction": "Write Python code that rotates a list n positions to the right.", "response": "def rotate(lst, n): return lst[-n:] + lst[:-n]"}
{"instruction": "Write a Python function to check if a string is a valid IPv4 address.", "response": "import re; def valid_ipv4(s): return bool(re.match(r'^(\\d{1,3}\\.){3}\\d{1,3}$', s))"}
{"instruction": "Explain the difference between `is` and `==`.", "response": "'is' checks identity, '==' checks equality."}
{"instruction": "Write Python code to remove all falsy values from a list.", "response": "def remove_falsy(lst): return [x for x in lst if x]"}
{"instruction": "Write a Python function to chunk a list into sublists of a given size.", "response": "def chunk(lst, size): return [lst[i:i+size] for i in range(0,len(lst),size)]"}
{"instruction": "Explain what `lambda` functions are and give an example.", "response": "A lambda is an anonymous function: e.g. square = lambda x: x*x"}
{"instruction": "Write a Python script that reads a CSV file and prints rows where a specific column matches a value.", "response": "import csv; [print(r) for r in csv.DictReader(open('file.csv')) if r['col'] == 'value']"}
{"instruction": "Write Python code to reverse a dictionary mapping (values to keys).", "response": "def reverse_dict(d): return {v:k for k,v in d.items()}"}
{"instruction": "Explain what the `enumerate()` function does.", "response": "It adds an index to items in a loop."}
{"instruction": "Write a Python function to validate if a string is a valid hexadecimal number.", "response": "def is_hex(s): return all(c in '0123456789abcdefABCDEF' for c in s)"}
{"instruction": "Write Python code that merges two sorted lists into a single sorted list.", "response": "def merge_sorted(a,b): return sorted(a+b)"}
{"instruction": "Explain the concept of duck typing in Python.", "response": "If it walks like a duck and quacks like a duck, it’s a duck — behavior > type."}
{"instruction": "Write a Python script to rename all `.txt` files in a directory to have a `_backup` suffix.", "response": "import os; [os.rename(f, f.replace('.txt','_backup.txt')) for f in os.listdir() if f.endswith('.txt')]"}
{"instruction": "Write Python code to remove all HTML tags from a string.", "response": "import re; def strip_html(s): return re.sub(r'<[^>]*>','',s)"}
{"instruction": "Write a Python function that generates all substrings of a given string.", "response": "def substrings(s): return [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1)]"}
{"instruction": "Explain the Global Interpreter Lock (GIL).", "response": "GIL ensures only one thread executes Python bytecode at a time, limiting true parallelism."}
{"instruction": "Write Python code to find the longest increasing subsequence in a list.", "response": "def lis(seq): from bisect import bisect_left; sub=[]; [sub.append(x) if not sub or x>sub[-1] else sub.__setitem__(bisect_left(sub,x),x) for x in seq]; return sub"}
{"instruction": "Write a Python script to zip an entire folder.", "response": "import shutil; shutil.make_archive('archive','zip','folder_path')"}
{"instruction": "Write Python code to validate a credit card number using the Luhn algorithm.", "response": "def luhn(card): digits=[int(d) for d in str(card)][::-1]; return sum(d if i%2==0 else sum(divmod(d*2,10)) for i,d in enumerate(digits)) % 10 == 0"}
{"instruction": "Explain how `__getitem__` works in custom classes.", "response": "__getitem__ lets instances use indexing like obj[key] by defining it in the class."}
{"instruction": "Write a Python function to compute the nth Catalan number.", "response": "def catalan(n): from math import comb; return comb(2*n,n)//(n+1)"}
{"instruction": "Write Python code to list all running processes (use `psutil`).", "response": "import psutil; [p.info for p in psutil.process_iter(['pid','name'])]"}
{"instruction": "Write a Python function to check if a matrix is symmetric.", "response": "def is_symmetric(m): return m == [list(row) for row in zip(*m)]"}
{"instruction": "Explain why `float('nan') != float('nan')` evaluates to True.", "response": "Because NaN is not equal to anything, even itself (IEEE standard)."}
{"instruction": "Write Python code to parse XML and extract all text content.", "response": "import xml.etree.ElementTree as ET; def extract_text(xml): return ''.join(ET.fromstring(xml).itertext())"}
{"instruction": "Write a Python function to serialize a dictionary to a JSON file.", "response": "import json; def save_json(d,f): json.dump(d, open(f,'w'), indent=2)"}
{"instruction": "Write Python code to compute the SHA-256 hash of a string.", "response": "import hashlib; def sha256(s): return hashlib.sha256(s.encode()).hexdigest()"}
{"instruction": "Explain what context managers are and how to create one.", "response": "They manage resources using `with`; define __enter__ and __exit__ to make one."}
{"instruction": "Write Python code to detect circular references in a graph.", "response": "def has_cycle(g): visited=set(); def dfs(v, path): if v in path: return True; path.add(v); for n in g.get(v,[]): if dfs(n,path): return True; path.remove(v); return False; return any(dfs(n,set()) for n in g)"}
{"instruction": "Write a Python function to solve the Tower of Hanoi problem.", "response": "def hanoi(n,a,b,c): if n: hanoi(n-1,a,c,b); print(a,'->',c); hanoi(n-1,b,a,c)"}
{"instruction": "Explain how `super()` works in multiple inheritance.", "response": "super() accesses methods from the next class in MRO without explicit naming."}
{"instruction": "Write Python code to create a simple REST API with Flask.", "response": "from flask import Flask; app=Flask(__name__); @app.route('/')\\ndef home(): return 'Hello'; app.run()"}
{"instruction": "Write a Python script to monitor memory usage over time.", "response": "import psutil,time; [print(psutil.virtual_memory().used) or time.sleep(1) for _ in range(10)]"}
{"instruction": "Write a Python function to pretty-print a nested dictionary.", "response": "import pprint; def pretty(d): pprint.pprint(d, indent=2)"}
{"instruction": "Explain what monkey patching is.", "response": "Changing or extending code at runtime, often used for quick hacks."}
{"instruction": "Write Python code to implement a basic caching decorator.", "response": "def cache(f): memo={}; def wrap(*a): return memo[a] if a in memo else memo.setdefault(a, f(*a)); return wrap"}
{"instruction": "Write a Python function to detect if a string is a valid UUID.", "response": "import uuid; def is_uuid(s): try: uuid.UUID(s); return True; except: return False"}
{"instruction": "Write Python code to generate prime numbers up to n.", "response": "def primes(n): return [x for x in range(2,n+1) if all(x%i for i in range(2,int(x**0.5)+1))]"}
{"instruction": "Explain the difference between `map()` and list comprehensions.", "response": "map() returns a lazy iterator; list comps are clearer and often faster for simple tasks."}
{"instruction": "Write Python code to parse and validate cron expressions.", "response": "import re; def valid_cron(expr): return bool(re.match(r'^(\\S+\\s+){4}\\S+$', expr))"}
{"instruction": "Write a Python script to convert Markdown to HTML.", "response": "import markdown; def md_to_html(text): return markdown.markdown(text)"}
{"instruction": "Write Python code to create a progress bar during iteration.", "response": "from tqdm import tqdm; [x for x in tqdm(range(1000))]"}
{"instruction": "Explain what the `__slots__` attribute does in classes.", "response": "__slots__ restricts dynamic attribute creation and saves memory."}
{"instruction": "Write a Python function to balance parentheses in a string.", "response": "def balance_parens(s): count=0; return all((count:=count+1 if c=='(' else count-1)>=0 for c in s if c in '()') and count==0"}
{"instruction": "Write Python code to simulate rolling two dice 1000 times.", "response": "import random; rolls=[(random.randint(1,6), random.randint(1,6)) for _ in range(1000)]"}
{"instruction": "Explain why `list` is mutable but `tuple` is not.", "response": "Lists can change after creation; tuples are fixed (immutable)."}
{"instruction": "Write Python code to generate random passwords with given constraints.", "response": "import random,string; def gen_pw(n): return ''.join(random.choices(string.ascii_letters+string.digits,k=n))"}
{"instruction": "Write a Python function to implement binary search.", "response": "def binary_search(lst,x): l,r=0,len(lst)-1; while l<=r: m=(l+r)//2; if lst[m]==x: return m; l,r = (m+1,r) if lst[m]<x else (l,m-1); return -1"}
{"instruction": "Write Python code to create a min-heap using `heapq`.", "response": "import heapq; heap=[]; [heapq.heappush(heap,x) for x in [3,1,4]]"}
{"instruction": "Explain how coroutines differ from regular generators.", "response": "Coroutines can pause and resume with values using 'await'; generators use 'yield'."}
{"instruction": "Write a Python script to find duplicate files in a directory.", "response": "import os,hashlib; def dupes(path): seen={}; [seen.setdefault(hashlib.md5(open(f,'rb').read()).hexdigest(),[]).append(f) for f in os.listdir(path)]; return [v for v in seen.values() if len(v)>1]"}
{"instruction": "Write Python code to parse INI configuration files.", "response": "import configparser; cfg=configparser.ConfigParser(); cfg.read('file.ini')"}
{"instruction": "Write a Python function to compute Levenshtein distance.", "response": "def levenshtein(a,b): dp=[[0]*(len(b)+1) for _ in range(len(a)+1)]; [dp[i].__setitem__(0,i) for i in range(len(a)+1)]; [dp[0].__setitem__(j,j) for j in range(len(b)+1)]; [[dp[i].__setitem__(j,min(dp[i-1][j]+1,dp[i][j-1]+1,dp[i-1][j-1]+(a[i-1]!=b[j-1]))) for j in range(1,len(b)+1)] for i in range(1,len(a)+1)]; return dp[-1][-1]"}
{"instruction": "Explain the purpose of `__enter__` and `__exit__`.", "response": "__enter__ sets up context, __exit__ tears it down (e.g. open files)."}
{"instruction": "Write Python code to validate if a string is a palindrome ignoring case and punctuation.", "response": "import re; def is_palindrome(s): s=re.sub(r'[^a-z0-9]','',s.lower()); return s==s[::-1]"}
{"instruction": "Write a Python script to check if a port is open on a remote server.", "response": "import socket; def check_port(host,port): s=socket.socket(); return s.connect_ex((host,port))==0"}
{"instruction": "Write Python function to serialize and deserialize a binary tree.", "response": "def serialize(root): return preorder(root); def deserialize(data): pass  # Typically uses recursion and queue"}
{"instruction": "Explain the `async` and `await` keywords.", "response": "async defines an async function; await pauses until result of async call."}
{"instruction": "Write Python code to find all permutations of a list.", "response": "from itertools import permutations; def all_perms(lst): return list(permutations(lst))"}
{"instruction": "Write a Python script to watch a directory for file changes.", "response": "import watchdog.events,watchdog.observers,time; class H(watchdog.events.FileSystemEventHandler): def on_modified(self,e): print('Changed:',e.src_path); obs=watchdog.observers.Observer(); obs.schedule(H(), path='.', recursive=True); obs.start(); time.sleep(10); obs.stop()"}
{"instruction": "Explain what memoization is.", "response": "Caching technique that stores function results to avoid recalculation."}
{"instruction": "Write Python code to generate Fibonacci numbers iteratively.", "response": "def fib(n): a,b=[],0,1; [a.append(b) or (b:=a[-1]+b if a else 1) for _ in range(n)]; return a"}
{"instruction": "Write a Python function to convert Roman numerals to integers.", "response": "def roman_to_int(s): m={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}; total=0; prev=0; for c in reversed(s): val=m[c]; total += val if val >= prev else -val; prev=val; return total"}
{"instruction": "Explain how `yield` works in Python.", "response": "yield pauses a function saving its state; resumes from there on next call."}
{"instruction": "Write Python code to validate if a string contains balanced brackets.", "response": "def balanced_brackets(s): stack=[]; pairs={')':'(','}':'{',']':'['}; for c in s: stack.append(c) if c in '({[' else (stack.pop() if stack and stack[-1]==pairs.get(c) else stack.append('?')); return not stack"}
{"instruction": "Write a Python function to convert Celsius to Fahrenheit.", "response": "def c_to_f(c): return (c * 9/5) + 32"}
{"instruction": "Write a Python script to check if a number is positive, negative, or zero.", "response": "def check_sign(n): return 'Positive' if n>0 else 'Negative' if n<0 else 'Zero'"}
{"instruction": "Write a Python function to compute the cube of a number.", "response": "def cube(n): return n ** 3"}
{"instruction": "Write a Python program to count the number of digits in an integer.", "response": "def count_digits(n): return len(str(abs(n)))"}
{"instruction": "Write a Python function to determine if a character is a vowel or consonant.", "response": "def is_vowel(c): return c.lower() in 'aeiou'"}
{"instruction": "Write a Python script to print the ASCII value of a character.", "response": "def ascii_value(c): return ord(c)"}
{"instruction": "Write a Python function to swap two numbers using a temporary variable.", "response": "def swap_temp(a,b): t=a; a=b; b=t; return a,b"}
{"instruction": "Write a Python script to swap two numbers without using a temporary variable.", "response": "def swap_no_temp(a,b): a,b = b,a; return a,b"}
{"instruction": "Write a Python function to calculate the circumference of a circle.", "response": "import math; def circumference(r): return 2 * math.pi * r"}
{"instruction": "Write a Python program to determine if a character is uppercase or lowercase.", "response": "def char_case(c): return 'Upper' if c.isupper() else 'Lower'"}
{"instruction": "Write a Python function to find the sum of natural numbers below a given number.", "response": "def sum_natural(n): return sum(range(n))"}
{"instruction": "Write a Python script to generate multiplication tables from 1 to 5.", "response": "[print(f'{i} x {j} = {i*j}') for i in range(1,6) for j in range(1,11)]"}
{"instruction": "Write a Python function to print the first 10 natural numbers using a while loop.", "response": "def print_natural(): i=1; while i<=10: print(i); i+=1"}
{"instruction": "Write a Python program to display numbers from 1 to 100 except multiples of 3.", "response": "[print(i) for i in range(1,101) if i%3 != 0]"}
{"instruction": "Write a Python script to reverse a number.", "response": "def reverse_number(n): return int(str(n)[::-1])"}
{"instruction": "Write a Python function to convert a number to a list of its digits.", "response": "def num_to_digits(n): return [int(d) for d in str(n)]"}
{"instruction": "Write a Python program to calculate simple interest.", "response": "def simple_interest(p,r,t): return (p*r*t)/100"}
{"instruction": "Write a Python script to print all ASCII characters with their values.", "response": "[print(chr(i), i) for i in range(128)]"}
{"instruction": "Write a Python function to determine if a character is a digit.", "response": "def is_digit(c): return c.isdigit()"}
{"instruction": "Write a Python script to print a pyramid pattern of stars.", "response": "for i in range(1,6): print(' '*(5-i)+'*'*i)"}
{"instruction": "Write a Python function to print all even numbers from 1 to 50.", "response": "def print_evens(): [print(i) for i in range(2,51,2)]"}
{"instruction": "Write a Python script to count down from 10 to 1.", "response": "for i in range(10,0,-1): print(i)"}
{"instruction": "Write a Python function to check if the length of a string is even or odd.", "response": "def len_even_or_odd(s): return 'Even' if len(s)%2==0 else 'Odd'"}
{"instruction": "Write a Python program to generate a random integer between 1 and 100.", "response": "import random; print(random.randint(1,100))"}
{"instruction": "Write a Python function to round a number up to the nearest integer.", "response": "import math; def round_up(n): return math.ceil(n)"}
{"instruction": "Write a Python script to print the current working directory.", "response": "import os; print(os.getcwd())"}
{"instruction": "Write a Python function to remove the last character from a string.", "response": "def remove_last(s): return s[:-1]"}
{"instruction": "Write a Python program to print the first and last element of a list.", "response": "def print_first_last(lst): print(lst[0], lst[-1])"}
{"instruction": "Write a Python function to check if a number is within a given range.", "response": "def in_range(n, start, end): return start <= n <= end"}
{"instruction": "Write a Python script to convert a list of floats to integers.", "response": "def float_to_int(lst): return list(map(int, lst))"}
{"instruction": "Write a Python function to find the smallest number in a list.", "response": "def min_in_list(lst): return min(lst)"}
{"instruction": "Write a Python script to convert minutes into hours and minutes.", "response": "def min_to_hr_min(m): return divmod(m, 60)"}
{"instruction": "Write a Python function to print a square of '#' characters.", "response": "def print_square(n): [print('#'*n) for _ in range(n)]"}
{"instruction": "Write a Python program to find the ASCII value of each character in a string.", "response": "def ascii_each(s): return [(c, ord(c)) for c in s]"}
{"instruction": "Write a Python function to reverse a list in place.", "response": "def reverse_in_place(lst): lst.reverse(); return lst"}
{"instruction": "Write a Python script to print the first 20 odd numbers.", "response": "[print(i) for i in range(1,40,2)]"}
{"instruction": "Write a Python function to check if a number is divisible by both 3 and 5.", "response": "def div_3_5(n): return n%3==0 and n%5==0"}
{"instruction": "Write a Python program to create a list of the first 10 multiples of 7.", "response": "def mult_7(): return [7*i for i in range(1,11)]"}
{"instruction": "Write a Python script to split a list into two halves.", "response": "def split_list(lst): mid=len(lst)//2; return lst[:mid], lst[mid:]"}
{"instruction": "Write a Python function to remove a specific character from a string.", "response": "def remove_char(s,c): return s.replace(c,'')"}
{"instruction": "Write a Python script to print a triangle pattern with numbers.", "response": "for i in range(1,6): print(' '.join(str(j) for j in range(1,i+1)))"}
{"instruction": "Write a Python function to return the last n elements of a list.", "response": "def last_n(lst,n): return lst[-n:]"}
{"instruction": "Write a Python program to compare two strings case-insensitively.", "response": "def compare_strings(a,b): return a.lower() == b.lower()"}
{"instruction": "Write a Python script to print even indexed characters in a string.", "response": "def even_indexed(s): return s[::2]"}
{"instruction": "Write a Python function to concatenate two lists index-wise.", "response": "def concat_indexwise(a,b): return [x+y for x,y in zip(a,b)]"}
{"instruction": "Write a Python script to double each character in a string.", "response": "def double_chars(s): return ''.join(c*2 for c in s)"}
{"instruction": "Write a Python function to remove duplicate characters in a string.", "response": "def remove_dupe_chars(s): return ''.join(dict.fromkeys(s))"}
{"instruction": "Write a Python script to filter strings longer than 5 characters in a list.", "response": "def filter_long(lst): return [s for s in lst if len(s) > 5]"}
{"instruction": "Write a Python program to calculate the number of lowercase letters in a string.", "response": "def count_lower(s): return sum(1 for c in s if c.islower())"}
{"instruction": "Write a Python function to check if a string is a valid Python identifier.", "response": "def valid_identifier(s): return s.isidentifier()"}
{"instruction": "Write a Python script to repeat a string n times.", "response": "def repeat_string(s, n): return s * n"}
{"instruction": "Write a Python function to extract all uppercase characters from a string.", "response": "def extract_upper(s): return ''.join(c for c in s if c.isupper())"}
{"instruction": "Write a Python script to find all numbers between 1 and 1000 that are divisible by 7.", "response": "def div_by_7(): return [x for x in range(1,1001) if x%7==0]"}
{"instruction": "Write a Python function to return the number of times a specific element appears in a list.", "response": "def count_element(lst, el): return lst.count(el)"}
{"instruction": "Write a Python script to replace the first occurrence of a word in a string.", "response": "def replace_first(s, old, new): return s.replace(old, new, 1)"}
{"instruction": "Write a Python function to remove the nth element from a list.", "response": "def remove_nth(lst, n): return lst[:n]+lst[n+1:]"}
{"instruction": "Write a Python script to pad a string with zeros to the left.", "response": "def pad_zero(s, width): return s.zfill(width)"}
{"instruction": "Write a Python function to insert an element at the beginning of a list.", "response": "def insert_start(lst, val): return [val]+lst"}
{"instruction": "Write a Python script to convert a tuple to a string.", "response": "def tuple_to_str(t): return ''.join(t)"}
{"instruction": "Write a Python function to check if a list is empty.", "response": "def is_empty(lst): return len(lst) == 0"}
{"instruction": "Write a Python script to check if two strings are equal, ignoring case.", "response": "def equal_ignore_case(a,b): return a.lower() == b.lower()"}
{"instruction": "Write a Python function to slice a string from index 2 to 5.", "response": "def slice_str(s): return s[2:6]"}
{"instruction": "Write a Python script to create a list of characters from a string.", "response": "def str_to_list(s): return list(s)"}
{"instruction": "Write a Python function to calculate the sum of ASCII values in a string.", "response": "def sum_ascii(s): return sum(ord(c) for c in s)"}
{"instruction": "Write a Python script to check if a list contains any None values.", "response": "def contains_none(lst): return any(x is None for x in lst)"}
{"instruction": "Write a Python function to replace the nth character of a string.", "response": "def replace_nth_char(s, n, c): return s[:n] + c + s[n+1:]"}
{"instruction": "Write a Python script to convert all strings in a list to lowercase.", "response": "def list_to_lower(lst): return [x.lower() for x in lst]"}
{"instruction": "Write a Python function to create a list of the lengths of words in a sentence.", "response": "def word_lengths(s): return [len(w) for w in s.split()]"}
{"instruction": "Write a Python script to remove newline characters from a string.", "response": "def remove_newlines(s): return s.replace('\\n','')"}
{"instruction": "Write a Python function to convert a list to a tuple.", "response": "def list_to_tuple(lst): return tuple(lst)"}
{"instruction": "Write a Python script to check if a character is in a given string.", "response": "def char_in_string(c,s): return c in s"}
{"instruction": "Write a Python function to check if a number is divisible by another number.", "response": "def is_divisible(a,b): return a % b == 0"}
{"instruction": "Write a Python script to repeat each element in a list n times.", "response": "def repeat_elements(lst, n): return [x for x in lst for _ in range(n)]"}
{"instruction": "Write a Python function to get the middle element of a list.", "response": "def middle_element(lst): return lst[len(lst)//2]"}
{"instruction": "Write a Python script to count the number of true values in a boolean list.", "response": "def count_true(lst): return sum(lst)"}
{"instruction": "Write a Python function to calculate the product of all elements in a list.", "response": "from functools import reduce; def product(lst): return reduce(lambda x,y:x*y, lst, 1)"}
{"instruction": "Write a Python script to print all three-letter combinations from a list of characters.", "response": "from itertools import product; print([''.join(c) for c in product(['a','b','c'], repeat=3)])"}
{"instruction": "Write a Python function to count characters in a string using a dictionary.", "response": "def count_chars(s): d={}; [d.update({c:d.get(c,0)+1}) for c in s]; return d"}
{"instruction": "Write a Python script to print a diamond pattern using stars.", "response": "for i in range(5): print(' '*(4-i)+'*'*(2*i+1)); [print(' '*(i+1)+'*'*(7-2*i)) for i in range(4)]"}
{"instruction": "Write a Python function to find the difference between max and min in a list.", "response": "def range_diff(lst): return max(lst) - min(lst)"}
{"instruction": "Write a Python script to print all elements of a list with their indices.", "response": "[print(i,x) for i,x in enumerate(['a','b','c'])]"}
{"instruction": "Write a Python function to remove the first n characters of a string.", "response": "def remove_first_n(s,n): return s[n:]"}
{"instruction": "Write a Python script to create a dictionary from a list of keys with default values.", "response": "def keys_to_dict(keys, default=0): return dict.fromkeys(keys, default)"}
{"instruction": "Write a Python function to generate a list of repeated elements.", "response": "def repeated_list(el, n): return [el]*n"}
{"instruction": "Write a Python script to remove all negative numbers from a list.", "response": "def remove_negatives(lst): return [x for x in lst if x >= 0]"}
{"instruction": "Write a Python function to insert a substring into a string at a given index.", "response": "def insert_substring(s, sub, idx): return s[:idx]+sub+s[idx:]"}
{"instruction": "Write a Python script to check if a word is present in a sentence.", "response": "def word_in_sentence(word, sent): return word in sent.split()"}
{"instruction": "Write a Python function to count digits, letters, and symbols in a string.", "response": "def count_types(s): d=l=s=0; [d:=d+1 if c.isdigit() else l:=l+1 if c.isalpha() else s:=s+1 for c in s]; return d,l,s"}
{"instruction": "Write a Python script to print numbers from 1 to 10 using recursion.", "response": "def print_1_to_10(n=1): print(n); print_1_to_10(n+1) if n<10 else None"}
{"instruction": "Write a Python function to convert a string to lowercase without using lower().", "response": "def to_lower(s): return ''.join(chr(ord(c)+32) if 'A'<=c<='Z' else c for c in s)"}
{"instruction": "Write a Python script to add two numbers entered by the user.", "response": "a=int(input()); b=int(input()); print(a+b)"}
{"instruction": "Write a Python function to generate a list of odd numbers from 1 to n.", "response": "def odd_numbers(n): return [x for x in range(1,n+1) if x%2]"}
{"instruction": "Write a Python script to print a pattern of numbers in right angle triangle shape.", "response": "for i in range(1,6): print(' '.join(str(j) for j in range(1,i+1)))"}
{"instruction": "Write a Python function to mask all but the last 4 characters of a string.", "response": "def mask_string(s): return '*'*(len(s)-4)+s[-4:]"}
{"instruction": "Write a Python script to find the maximum element in a 2D list.", "response": "def max_2d(lst): return max(max(row) for row in lst)"}
{"instruction": "Write a Python function to convert hours, minutes, seconds into total seconds.", "response": "def to_seconds(h,m,s): return h*3600 + m*60 + s"}
{"instruction": "Write a Python script to count words in a multiline string.", "response": "def count_words(s): return len(s.split())"}
{"instruction": "Write a Python function to check if all characters in a string are lowercase.", "response": "def all_lower(s): return s == s.lower()"}
{"instruction": "Write a Python script to create a list of integers from a space-separated string.", "response": "def str_to_int_list(s): return list(map(int, s.split()))"}
{"instruction": "Write a Python function to repeat a list n times.", "response": "def repeat_list(lst, n): return lst * n"}
{"instruction": "Write a Python function to return the first n multiples of a number.", "response": "def first_n_multiples(x,n): return [x*i for i in range(1,n+1)]"}
{"instruction": "Write a Python script to convert a binary string to an integer.", "response": "def bin_to_int(b): return int(b,2)"}
{"instruction": "Write a Python function to replace all digits in a string with '#' symbol.", "response": "import re; def mask_digits(s): return re.sub(r'\\d','#',s)"}
{"instruction": "Write a Python script to merge three lists into one.", "response": "def merge_lists(a,b,c): return a + b + c"}
{"instruction": "Write a Python function to find all even digits in a given number.", "response": "def even_digits(n): return [int(d) for d in str(n) if int(d)%2==0]"}
{"instruction": "Write a Python script to convert a number to a binary string.", "response": "def int_to_bin(n): return bin(n)[2:]"}
{"instruction": "Write a Python function to remove all zeros from a list of numbers.", "response": "def remove_zeros(lst): return [x for x in lst if x != 0]"}
{"instruction": "Write a Python script to format a floating number with 2 decimal places.", "response": "def format_float(f): return f'{f:.2f}'"}
{"instruction": "Write a Python function to insert a space between characters in a string.", "response": "def space_chars(s): return ' '.join(s)"}
{"instruction": "Write a Python script to generate a list of powers of 2 from 1 to 10.", "response": "def powers_of_2(): return [2**i for i in range(1,11)]"}
{"instruction": "Write a Python function to count how many times a letter appears in a word.", "response": "def count_letter(w,l): return w.count(l)"}
{"instruction": "Write a Python script to find all elements greater than a given number in a list.", "response": "def greater_than(lst, n): return [x for x in lst if x > n]"}
{"instruction": "Write a Python function to join a list of words into a sentence with spaces.", "response": "def join_sentence(words): return ' '.join(words)"}
{"instruction": "Write a Python script to convert all integers in a list to their absolute values.", "response": "def abs_list(lst): return [abs(x) for x in lst]"}
{"instruction": "Write a Python function to check if two strings are rotations of each other.", "response": "def is_rotation(a,b): return len(a)==len(b) and b in a+a"}
{"instruction": "Write a Python script to print all odd numbers between two numbers entered by the user.", "response": "a,b=map(int,input().split()); [print(i) for i in range(a,b+1) if i%2]"}
{"instruction": "Write a Python function to convert an integer to a list of its digits in reverse order.", "response": "def int_to_reversed_digits(n): return [int(d) for d in str(n)[::-1]]"}
{"instruction": "Write a Python script to generate all three-digit numbers using digits 1 to 3.", "response": "from itertools import product; print([''.join(map(str,x)) for x in product([1,2,3],repeat=3)])"}
{"instruction": "Write a Python function to check if the sum of a list is divisible by 10.", "response": "def sum_div_10(lst): return sum(lst)%10==0"}
{"instruction": "Write a Python script to sort a list of integers without using sort() or sorted().", "response": "def custom_sort(lst): for i in range(len(lst)): [lst.__setitem__(j,lst[j+1]) or lst.__setitem__(j+1,tmp) for j in range(len(lst)-i-1) if (tmp:=lst[j]) > lst[j+1]]; return lst"}
{"instruction": "Write a Python function to repeat every character in a string three times.", "response": "def triple_chars(s): return ''.join(c*3 for c in s)"}
{"instruction": "Write a Python script to check if a list has duplicate elements next to each other.", "response": "def has_adjacent_dupes(lst): return any(lst[i]==lst[i+1] for i in range(len(lst)-1))"}
{"instruction": "Write a Python function to print a vertical list of characters from a string.", "response": "def vertical(s): [print(c) for c in s]"}
{"instruction": "Write a Python script to compute the length of each word in a list of words.", "response": "def word_lengths(words): return [len(w) for w in words]"}
{"instruction": "Write a Python function to return True if a string has at least one uppercase letter.", "response": "def has_upper(s): return any(c.isupper() for c in s)"}
{"instruction": "Write a Python script to reverse the keys and values in a dictionary of strings.", "response": "def reverse_dict(d): return {v:k for k,v in d.items()}"}
{"instruction": "Write a Python function to find the second smallest number in a list.", "response": "def second_smallest(lst): return sorted(set(lst))[1]"}
{"instruction": "Write a Python script to print numbers from 100 to 1 in reverse using recursion.", "response": "def rev_print(n=100): print(n); rev_print(n-1) if n>1 else None"}
{"instruction": "Write a Python function to count how many items in a list are greater than 100.", "response": "def count_gt_100(lst): return sum(1 for x in lst if x>100)"}
{"instruction": "Write a Python script to shift all elements in a list one position to the right.", "response": "def shift_right(lst): return [lst[-1]] + lst[:-1]"}
{"instruction": "Write a Python function to return the difference between two sets.", "response": "def diff_sets(a,b): return a - b"}
{"instruction": "Write a Python script to print characters from a string that occur only once.", "response": "def unique_chars(s): return [c for c in s if s.count(c)==1]"}
{"instruction": "Write a Python function to calculate the area of a circle given its radius.", "response": "import math; def circle_area(r): return math.pi * r**2"}
{"instruction": "Write a Python script to rotate characters in a string by one position to the left.", "response": "def rotate_left(s): return s[1:] + s[0]"}
{"instruction": "Write a Python function to find the common characters between two strings.", "response": "def common_chars(a,b): return list(set(a)&set(b))"}
{"instruction": "Write a Python script to convert a nested list into a flat list.", "response": "def flatten(lst): return [item for sub in lst for item in sub]"}
{"instruction": "Write a Python function to count how many times each word appears in a list.", "response": "from collections import Counter; def word_count(lst): return dict(Counter(lst))"}
{"instruction": "Write a Python script to convert a list of integers into a single integer.", "response": "def list_to_int(lst): return int(''.join(map(str,lst)))"}
{"instruction": "Write a Python function to insert a given string into the middle of another string.", "response": "def insert_middle(a,b): mid=len(a)//2; return a[:mid]+b+a[mid:]"}
{"instruction": "Write a Python script to print a countdown timer from 10 to 1 with delay.", "response": "import time; [print(i) or time.sleep(1) for i in range(10,0,-1)]"}
{"instruction": "Write a Python function to check if a string ends with a vowel.", "response": "def ends_with_vowel(s): return s[-1].lower() in 'aeiou'"}
{"instruction": "Write a Python script to remove leading and trailing whitespace from a string.", "response": "def trim(s): return s.strip()"}
{"instruction": "Write a Python function to remove duplicate items from a tuple.", "response": "def dedupe_tuple(t): return tuple(dict.fromkeys(t))"}
{"instruction": "Write a Python script to find all indexes of a specific element in a list.", "response": "def find_indexes(lst, val): return [i for i,x in enumerate(lst) if x==val]"}
{"instruction": "Write a Python function to add a key-value pair to a dictionary.", "response": "def add_pair(d,k,v): d[k]=v; return d"}
{"instruction": "Write a Python script to find all words in a string that start with a vowel.", "response": "def words_start_vowel(s): return [w for w in s.split() if w[0].lower() in 'aeiou']"}
{"instruction": "Write a Python function to remove the middle element from a list.", "response": "def remove_middle(lst): mid=len(lst)//2; return lst[:mid]+lst[mid+1:]"}
{"instruction": "Write a Python script to display the characters in a string in reverse order with spacing.", "response": "def rev_spaced(s): return ' '.join(s[::-1])"}
{"instruction": "Write a Python function to return the smallest even number in a list.", "response": "def min_even(lst): evens=[x for x in lst if x%2==0]; return min(evens) if evens else None"}
{"instruction": "Write a Python script to check if all numbers in a list are even.", "response": "def all_even(lst): return all(x%2==0 for x in lst)"}
{"instruction": "Write a Python function to get the index of the maximum value in a list.", "response": "def index_of_max(lst): return lst.index(max(lst))"}
{"instruction": "Write a Python script to delete all odd-indexed items from a list.", "response": "def delete_odd_indexes(lst): return [x for i,x in enumerate(lst) if i%2==0]"}
{"instruction": "Write a Python function to create a string made of the first and last characters of a string.", "response": "def first_last(s): return s[0] + s[-1] if s else ''"}
{"instruction": "Write a Python script to filter out all negative numbers in a tuple.", "response": "def filter_negatives(t): return tuple(x for x in t if x >= 0)"}
{"instruction": "Write a Python function to replace spaces with dashes in a string.", "response": "def dashify(s): return s.replace(' ','-')"}
{"instruction": "Write a Python script to print a square matrix using nested lists.", "response": "[[print(row) for row in [[1]*3 for _ in range(3)]]]"}
{"instruction": "Write a Python function to convert a string of numbers into a list of integers.", "response": "def str_to_int_list(s): return list(map(int, s.split()))"}
{"instruction": "Write a Python script to multiply two numbers without using the '*' operator.", "response": "def multiply(a,b): return sum(a for _ in range(b))"}
{"instruction": "Write a Python function to count the number of lowercase vowels in a string.", "response": "def count_vowels(s): return sum(1 for c in s if c in 'aeiou')"}
{"instruction": "Write a Python script to print all the factors of a given number.", "response": "def factors(n): [print(i) for i in range(1,n+1) if n%i==0]"}
{"instruction": "Write a Python function to return the first non-repeating character in a string.", "response": "def first_unique(s): return next((c for c in s if s.count(c)==1), None)"}
{"instruction": "Write a Python script to split a sentence into a list of words and reverse each word.", "response": "def reverse_words(s): return [w[::-1] for w in s.split()]"}
{"instruction": "Write a Python function to find the second last element in a list.", "response": "def second_last(lst): return lst[-2]"}
{"instruction": "Write a Python script to insert a value in a list at every second position.", "response": "def insert_every_second(lst,val): return [val if i%2 else x for i,x in enumerate(lst+[None]) if x is not None]"}
{"instruction": "Write a Python function to calculate how many words are in a given string.", "response": "def count_words(s): return len(s.split())"}
{"instruction": "Write a Python script to find the maximum difference between elements in a list.", "response": "def max_diff(lst): return max(lst) - min(lst)"}
{"instruction": "Write a Python function to capitalize every alternate letter in a string.", "response": "def alt_caps(s): return ''.join(c.upper() if i%2==0 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to count the number of non-space characters in a string.", "response": "def count_nonspace(s): return sum(1 for c in s if c != ' ')"}
{"instruction": "Write a Python function to convert a list of numbers into their square roots.", "response": "import math; def sqrt_list(lst): return [math.sqrt(x) for x in lst]"}
{"instruction": "Write a Python script to find all palindromic substrings in a string.", "response": "def palindromes(s): return [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if s[i:j]==s[i:j][::-1]]"}
{"instruction": "Write a Python function to return a new list containing elements at even indexes.", "response": "def even_index_elements(lst): return lst[::2]"}
{"instruction": "Write a Python script to convert a tuple of strings into a comma-separated string.", "response": "def tuple_to_csv(t): return ','.join(t)"}
{"instruction": "Write a Python function to return the character that appears most frequently in a string.", "response": "from collections import Counter; def most_common_char(s): return Counter(s).most_common(1)[0][0]"}
{"instruction": "Write a Python script to replace all lowercase vowels with their uppercase counterparts.", "response": "def upper_vowels(s): return ''.join(c.upper() if c in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python function to insert dashes between consecutive odd numbers in a number.", "response": "def dash_odds(n): s=str(n); return s[0]+''.join('-'+s[i] if int(s[i-1])%2 and int(s[i])%2 else s[i] for i in range(1,len(s)))"}
{"instruction": "Write a Python script to round all float numbers in a list to the nearest whole number.", "response": "def round_floats(lst): return [round(x) for x in lst]"}
{"instruction": "Write a Python function to check if a list is symmetric.", "response": "def is_symmetric(lst): return lst == lst[::-1]"}
{"instruction": "Write a Python script to print the sum of digits of all numbers in a list.", "response": "def sum_digits_list(lst): return sum(sum(int(d) for d in str(n)) for n in lst)"}
{"instruction": "Write a Python function to remove all strings from a mixed-type list.", "response": "def remove_strings(lst): return [x for x in lst if not isinstance(x,str)]"}
{"instruction": "Write a Python script to count how many strings in a list start and end with the same letter.", "response": "def same_start_end(lst): return sum(1 for s in lst if s and s[0]==s[-1])"}
{"instruction": "Write a Python function to return a string repeated n times, each on a new line.", "response": "def repeat_lines(s,n): return '\\n'.join([s]*n)"}
{"instruction": "Write a Python script to capitalize the first and last letter of each word in a string.", "response": "def cap_first_last(s): return ' '.join(w[0].upper()+w[1:-1]+w[-1].upper() if len(w)>1 else w.upper() for w in s.split())"}
{"instruction": "Write a Python function to count the total number of punctuation characters in a string.", "response": "import string; def count_punct(s): return sum(1 for c in s if c in string.punctuation)"}
{"instruction": "Write a Python script to convert a nested tuple into a flat tuple.", "response": "def flatten_tuple(t): return tuple(x for sub in t for x in sub)"}
{"instruction": "Write a Python function to count the number of words that are palindromes in a sentence.", "response": "def count_palindrome_words(s): return sum(1 for w in s.split() if w==w[::-1])"}
{"instruction": "Write a Python script to multiply all digits in a string.", "response": "import math; def mult_digits(s): return math.prod(int(c) for c in s if c.isdigit())"}
{"instruction": "Write a Python function to truncate a string to the first 10 characters.", "response": "def truncate_10(s): return s[:10]"}
{"instruction": "Write a Python script to find all numbers below 1000 that are divisible by both 3 and 5.", "response": "def div_3_5(): return [x for x in range(1,1000) if x%3==0 and x%5==0]"}
{"instruction": "Write a Python function to mask vowels in a string with an underscore.", "response": "def mask_vowels(s): return ''.join('_' if c in 'aeiouAEIOU' else c for c in s)"}
{"instruction": "Write a Python script to count total spaces, digits, and uppercase characters in a string.", "response": "def count_chars(s): return sum(c==' ' for c in s), sum(c.isdigit() for c in s), sum(c.isupper() for c in s)"}
{"instruction": "Write a Python function to add two numbers without using the '+' operator.", "response": "def add_no_plus(a,b): while b: a,b = a^b, (a&b)<<1; return a"}
{"instruction": "Write a Python script to check if two lists are of the same length and have the same elements.", "response": "def lists_equal(a,b): return len(a)==len(b) and all(x==y for x,y in zip(a,b))"}
{"instruction": "Write a Python function to replace each character in a string with its next ASCII character.", "response": "def next_ascii(s): return ''.join(chr(ord(c)+1) for c in s)"}
{"instruction": "Write a Python script to extract numbers from a string and add them together.", "response": "import re; def sum_numbers(s): return sum(map(int,re.findall(r'\\d+',s)))"}
{"instruction": "Write a Python function to test whether all characters in a string are alphabetic.", "response": "def is_alpha(s): return s.isalpha()"}
{"instruction": "Write a Python script to filter a dictionary to only keys with values above a threshold.", "response": "def filter_dict(d,t): return {k:v for k,v in d.items() if v > t}"}
{"instruction": "Write a Python function to determine the longest run of a single character in a string.", "response": "def longest_run(s): from itertools import groupby; return max(len(list(g)) for _,g in groupby(s))"}
{"instruction": "Write a Python script to display each item in a list with its position number.", "response": "def show_positions(lst): [print(f'{i}: {x}') for i,x in enumerate(lst)]"}
{"instruction": "Write a Python function to convert seconds into days, hours, minutes, and seconds.", "response": "def sec_to_dhms(s): d,h = divmod(s,86400); h,m = divmod(h,3600); m,s = divmod(m,60); return d,h,m,s"}
{"instruction": "Write Python code to print Hello World.", "response": "print('Hello World')"}
{"instruction": "Write a Python function to print all multiples of 4 from 1 to 100.", "response": "def multiples_of_4(): print([i for i in range(1,101) if i%4==0])"}
{"instruction": "Write a Python script to check if a given word is a substring of another.", "response": "def is_substring(word, text): return word in text"}
{"instruction": "Write a Python function to sum only the odd numbers in a list.", "response": "def sum_odds(lst): return sum(x for x in lst if x%2)"}
{"instruction": "Write a Python script to compare lengths of two strings and return the longer one.", "response": "def longer_str(a,b): return a if len(a)>len(b) else b"}
{"instruction": "Write a Python function to remove every third character from a string.", "response": "def remove_third(s): return ''.join(c for i,c in enumerate(s) if (i+1)%3!=0)"}
{"instruction": "Write a Python script to generate a list of all square numbers less than 100.", "response": "def squares(): return [i**2 for i in range(1,10)]"}
{"instruction": "Write a Python function to count the number of lowercase letters in a string.", "response": "def count_lowercase(s): return sum(1 for c in s if c.islower())"}
{"instruction": "Write a Python script to repeat a character 'n' times and print the result.", "response": "def repeat_char(c,n): print(c*n)"}
{"instruction": "Write a Python function to find all characters that appear more than once in a string.", "response": "def repeated_chars(s): return list({c for c in s if s.count(c) > 1})"}
{"instruction": "Write a Python script to convert a string to an acronym.", "response": "def to_acronym(s): return ''.join(word[0].upper() for word in s.split())"}
{"instruction": "Write a Python function to print numbers from 1 to n without using a loop.", "response": "def print_1_to_n(n): return n and print_1_to_n(n-1) or print(n)"}
{"instruction": "Write a Python script to reverse every word in a sentence while keeping their order.", "response": "def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"}
{"instruction": "Write a Python function to get a dictionary from a list where elements are keys with their index as value.", "response": "def list_to_dict(lst): return {v:i for i,v in enumerate(lst)}"}
{"instruction": "Write a Python script to merge multiple lists into one and remove duplicates.", "response": "def merge_unique(*lists): return list(set(sum(lists, [])))"}
{"instruction": "Write a Python function to check if a sentence contains all letters of the alphabet.", "response": "def is_pangram(s): import string; return set(string.ascii_lowercase) <= set(s.lower())"}
{"instruction": "Write a Python script to capitalize letters at even positions in a string.", "response": "def cap_even_pos(s): return ''.join(c.upper() if i%2==0 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python function to remove all symbols except letters and numbers from a string.", "response": "import re; def clean_string(s): return re.sub(r'[^a-zA-Z0-9]', '', s)"}
{"instruction": "Write a Python script to check if a string ends with a specific suffix.", "response": "def ends_with(s,suffix): return s.endswith(suffix)"}
{"instruction": "Write a Python function to convert a list of tuples into a dictionary.", "response": "def tuples_to_dict(t): return dict(t)"}
{"instruction": "Write a Python script to get the Unicode code point of a character.", "response": "def unicode_val(c): return ord(c)"}
{"instruction": "Write a Python function to print the binary equivalent of a number using recursion.", "response": "def print_binary(n): if n>0: print_binary(n//2); print(n%2,end='')"}
{"instruction": "Write a Python script to determine if a string contains any repeated characters.", "response": "def has_repeats(s): return len(set(s)) != len(s)"}
{"instruction": "Write a Python function to get the maximum of a list without using max().", "response": "def max_in_list(lst): m=lst[0]; [m:=x if x>m else m for x in lst]; return m"}
{"instruction": "Write a Python script to check if a number is a multiple of both 2 and 6.", "response": "def multiple_2_6(n): return n%2==0 and n%6==0"}
{"instruction": "Write a Python function to extract only letters from a string with mixed characters.", "response": "def only_letters(s): return ''.join(c for c in s if c.isalpha())"}
{"instruction": "Write a Python script to count how many words in a sentence start with a capital letter.", "response": "def count_caps(s): return sum(1 for w in s.split() if w[0].isupper())"}
{"instruction": "Write a Python function to alternate case for each character in a string.", "response": "def alt_case(s): return ''.join(c.upper() if i%2==0 else c.lower() for i,c in enumerate(s))"}
{"instruction": "Write a Python script to print the first n numbers of the harmonic series.", "response": "def harmonic(n): [print(1/i) for i in range(1,n+1)]"}
{"instruction": "Write a Python function to convert each character in a string to its hexadecimal value.", "response": "def to_hex(s): return [hex(ord(c)) for c in s]"}
{"instruction": "Write a Python script to generate a random uppercase letter.", "response": "import random,string; print(random.choice(string.ascii_uppercase))"}
{"instruction": "Write a Python function to check if a number is within a specific range (inclusive).", "response": "def in_range(n, start, end): return start <= n <= end"}
{"instruction": "Write a Python script to replace the middle character of a string with '*'.", "response": "def mask_middle(s): mid=len(s)//2; return s[:mid]+'*'+s[mid+1:]"}
{"instruction": "Write a Python function to find the sum of all prime numbers up to a given number.", "response": "def sum_primes(n): return sum(x for x in range(2,n+1) if all(x%i for i in range(2,int(x**0.5)+1)))"}
{"instruction": "Write a Python script to check whether a list is strictly increasing.", "response": "def strictly_increasing(lst): return all(lst[i] < lst[i+1] for i in range(len(lst)-1))"}
{"instruction": "Write a Python function to return the average of numbers in a list rounded to the nearest integer.", "response": "def avg_rounded(lst): return round(sum(lst)/len(lst))"}
{"instruction": "Write a Python script to check whether a character is a letter, digit, or symbol.", "response": "def char_type(c): return 'Letter' if c.isalpha() else 'Digit' if c.isdigit() else 'Symbol'"}
{"instruction": "Write a Python function to print the reverse of a number without converting it to a string.", "response": "def reverse_num(n): r=0; while n: r=r*10+n%10; n//=10; print(r)"}
{"instruction": "Write a Python script to print the index of all vowels in a string.", "response": "def vowel_indexes(s): return [i for i,c in enumerate(s) if c.lower() in 'aeiou']"}
{"instruction": "Write a Python function to determine if a year is a century year.", "response": "def is_century(year): return year % 100 == 0"}
{"instruction": "Write a Python script to convert a number to exponential notation.", "response": "def to_exponential(n): return '{:.2e}'.format(n)"}
{"instruction": "Write a Python function to rotate a list to the left by n positions.", "response": "def rotate_left(lst,n): return lst[n:] + lst[:n]"}
{"instruction": "Write a Python script to count how many uppercase vowels appear in a string.", "response": "def count_upper_vowels(s): return sum(1 for c in s if c in 'AEIOU')"}
{"instruction": "Write a Python function to check if a number is a Harshad number.", "response": "def is_harshad(n): return n % sum(int(d) for d in str(n)) == 0"}
{"instruction": "Write a Python script to get the square root of each element in a list using a loop.", "response": "def sqrt_loop(lst): return [x**0.5 for x in lst]"}
{"instruction": "Write a Python function to return the character with the highest frequency in a string.", "response": "from collections import Counter; def max_freq_char(s): return Counter(s).most_common(1)[0][0]"}
{"instruction": "Write a Python script to split a list into chunks of size n.", "response": "def chunk_list(lst,n): return [lst[i:i+n] for i in range(0,len(lst),n)]"}
{"instruction": "Write a Python function to remove leading zeros from a number represented as a string.", "response": "def strip_leading_zeros(s): return s.lstrip('0')"}
{"instruction": "Write a Python script to check if the characters in a string form a palindrome sequence.", "response": "def is_palindrome(s): return s == s[::-1]"}
{"instruction": "Write a Python function to return a new string without the characters at odd indices.", "response": "def skip_odds(s): return ''.join(s[i] for i in range(len(s)) if i%2==0)"}
{"instruction": "Write a Python script to calculate the GCD of multiple numbers using reduce().", "response": "from functools import reduce; from math import gcd; def gcd_multi(lst): return reduce(gcd, lst)"}
{"instruction": "Write a Python function to find the difference between the ASCII values of two characters.", "response": "def ascii_diff(a,b): return abs(ord(a)-ord(b))"}
{"instruction": "Write a Python script to generate a pattern of '*' based on user input height.", "response": "def pattern(n): [print('*'*i) for i in range(1,n+1)]"}
{"instruction": "Write a Python function to check if a list contains consecutive numbers.", "response": "def has_consecutive(lst): return sorted(lst) == list(range(min(lst), max(lst)+1))"}
{"instruction": "Write a Python script to remove special characters from all strings in a list.", "response": "import re; def clean_list(lst): return [re.sub(r'[^a-zA-Z0-9 ]','',s) for s in lst]"}
{"instruction": "Write a Python function to find the product of digits in a number using recursion.", "response": "def prod_digits(n): return 1 if n<10 else n%10 * prod_digits(n//10)"}
{"instruction": "Write a Python script to count even and odd digits in a number.", "response": "def count_even_odd(n): e=o=0; [e:=e+1 if int(d)%2==0 else o:=o+1 for d in str(n)]; return e,o"}
{"instruction": "Write a Python function to replace repeated characters with a single occurrence.", "response": "def remove_repeats(s): return ''.join(dict.fromkeys(s))"}
{"instruction": "Write a Python script to create a frequency map of characters from a sentence.", "response": "from collections import Counter; def freq_map(s): return Counter(s)"}
{"instruction": "Write a Python function to return the longest substring with unique characters.", "response": "def longest_unique_substr(s): seen = {}; start = max_len = 0; for i,c in enumerate(s): start = max(start, seen.get(c,-1)+1); seen[c]=i; max_len = max(max_len, i-start+1); return max_len"}
{"instruction": "Write a Python script to extract all capitalized words from a string.", "response": "def capitalized_words(s): return [w for w in s.split() if w.istitle()]"}
{"instruction": "Write a Python function to multiply elements in a list by their index.", "response": "def multiply_by_index(lst): return [i*x for i,x in enumerate(lst)]"}
{"instruction": "Write a Python script to return only the last digits from each number in a list.", "response": "def last_digits(lst): return [int(str(x)[-1]) for x in lst]"}
{"instruction": "Write a Python function to sum the digits in a string containing both letters and numbers.", "response": "def sum_digits_in_str(s): return sum(int(c) for c in s if c.isdigit())"}
{"instruction": "Write a Python script to count the number of unique letters in a string.", "response": "def unique_letter_count(s): return len(set(c for c in s if c.isalpha()))"}
{"instruction": "Write a Python function to check whether all digits in a number are odd.", "response": "def all_odd_digits(n): return all(int(d)%2 for d in str(n))"}
{"instruction": "Write a Python script to replace each word in a string with its length.", "response": "def word_lengths(s): return ' '.join(str(len(w)) for w in s.split())"}
{"instruction": "Write a Python function to double the values in a list without using list comprehension.", "response": "def double_values(lst): out=[]; [out.append(x*2) for x in lst]; return out"}
{"instruction": "Write a Python script to find the longest word in a list of strings.", "response": "def longest_word(lst): return max(lst, key=len)"}
{"instruction": "Write a Python function to determine if a string contains only one unique character.", "response": "def one_unique_char(s): return len(set(s))==1"}
{"instruction": "Write a Python script to count the total occurrences of each character using Counter.", "response": "from collections import Counter; def count_all(s): return Counter(s)"}
{"instruction": "Write a Python function to remove all items greater than a specific value from a list.", "response": "def remove_gt(lst,val): return [x for x in lst if x <= val]"}
{"instruction": "Write a Python script to convert a camelCase string to snake_case.", "response": "import re; def camel_to_snake(s): return re.sub(r'([A-Z])', r'_\\1', s).lower()"}
{"instruction": "Write a Python function to count total characters excluding spaces and punctuation.", "response": "import string; def count_chars(s): return sum(1 for c in s if c not in string.punctuation+' ')"}
{"instruction": "Write a Python script to validate if all characters in a string are alphanumeric.", "response": "def is_alnum(s): return s.isalnum()"}
{"instruction": "Write a Python function to compute the digital root of a number.", "response": "def digital_root(n): return n if n<10 else digital_root(sum(map(int,str(n))))"}
{"instruction": "Write a Python script to rotate characters in a string by n positions.", "response": "def rotate_string(s,n): return s[n:] + s[:n]"}
{"instruction": "Write a Python function to find the sum of the first n natural numbers using formula.", "response": "def sum_formula(n): return n*(n+1)//2"}
{"instruction": "Write a Python script to simulate a coin toss and print heads or tails.", "response": "import random; print(random.choice(['Heads','Tails']))"}
{"instruction": "Write a Python function to count how many digits are in a given string.", "response": "def count_digits(s): return sum(1 for c in s if c.isdigit())"}
{"instruction": "Write a Python script to convert a number to its binary, octal, and hexadecimal equivalents.", "response": "def convert_all(n): return bin(n), oct(n), hex(n)"}
{"instruction": "Write a Python function to determine if two strings have the same characters in any order.", "response": "def same_chars(a,b): return sorted(a)==sorted(b)"}
{"instruction": "Write a Python script to get the last n characters of a string.", "response": "def last_n(s,n): return s[-n:]"}
{"instruction": "Write a Python function to reverse the digits of a number using math only.", "response": "def reverse_math(n): rev=0; while n: rev=rev*10 + n%10; n//=10; return rev"}
{"instruction": "Write a Python script to format a string using user-provided values.", "response": "def format_str(): name=input(); age=int(input()); print(f'My name is {name} and I am {age}')"}
{"instruction": "Write a Python function to return a new list with squares of even numbers only.", "response": "def squares_of_evens(lst): return [x**2 for x in lst if x%2==0]"}
{"instruction": "Write a Python script to extract the domain name from an email address.", "response": "def extract_domain(email): return email.split('@')[-1]"}
{"instruction": "Write a Python function to remove duplicates from a string while preserving order.", "response": "def dedupe_str(s): seen=set(); out=''; [out:=out+c if c not in seen else None or seen.add(c) for c in s]; return out"}
{"instruction": "Write a Python script to create a countdown from a given number with a delay.", "response": "import time; def countdown(n): [print(i) or time.sleep(1) for i in range(n,0,-1)]"}
{"instruction": "Write a Python function to get the smallest positive number in a list.", "response": "def min_positive(lst): pos=[x for x in lst if x>0]; return min(pos) if pos else None"}
{"instruction": "Write a Python script to print each word of a sentence on a new line.", "response": "def newline_words(s): [print(w) for w in s.split()]"}
{"instruction": "Write a Python function to find all factors of a number using a list comprehension.", "response": "def factors(n): return [i for i in range(1,n+1) if n%i==0]"}
{"instruction": "Write a Python script to check if a string is numeric using isnumeric().", "response": "def check_numeric(s): return s.isnumeric()"}
{"instruction": "Write a Python function to extract the initials from a full name.", "response": "def initials(name): return ''.join(w[0].upper() for w in name.split())"}
{"instruction": "Write a Python script to create a list of all letters in a word using a for loop.", "response": "def letters_list(w): out=[]; [out.append(c) for c in w]; return out"}
{"instruction": "Write a Python function to test if a given list has at least two identical elements.", "response": "def has_duplicates(lst): return len(lst) != len(set(lst))"}
{"instruction": "Write a Python script to create a new list from every third element of an input list.", "response": "def every_third(lst): return lst[2::3]"}
{"instruction": "Write a Python function to count the number of distinct characters in a string.", "response": "def count_distinct(s): return len(set(s))"}
{"instruction": "Write a Python script to alternate between upper and lower case in a string.", "response": "def alt_upper_lower(s): return ''.join(c.upper() if i%2==0 else c.lower() for i,c in enumerate(s))"}
{"instruction": "Write a Python function to multiply the last digit of one number with the first digit of another.", "response": "def mult_digits(a,b): return int(str(a)[-1]) * int(str(b)[0])"}
{"instruction": "Write a Python script to replace all letters in a string with their Unicode code.", "response": "def letters_to_unicode(s): return ' '.join(str(ord(c)) for c in s)"}
{"instruction": "Write a Python function to convert a list of strings to uppercase.", "response": "def upper_list(lst): return [s.upper() for s in lst]"}
{"instruction": "Write a Python script to calculate the sum of every second element in a list.", "response": "def sum_every_second(lst): return sum(lst[1::2])"}
{"instruction": "Write a Python function to test if a number is a palindrome without converting it to a string.", "response": "def is_palindrome(n): rev=0; x=n; while x: rev=rev*10+x%10; x//=10; return n==rev"}
{"instruction": "Write a Python script to extract all numbers from a mixed string.", "response": "import re; def extract_nums(s): return list(map(int, re.findall(r'\\d+', s)))"}
{"instruction": "Write a Python function to count how many words are in a list that start and end with the same character.", "response": "def same_start_end(lst): return sum(1 for w in lst if w and w[0]==w[-1])"}
{"instruction": "Write a Python script to remove all uppercase letters from a string.", "response": "def remove_upper(s): return ''.join(c for c in s if not c.isupper())"}
{"instruction": "Write a Python function to swap the case of each character in a string.", "response": "def swap_case(s): return ''.join(c.lower() if c.isupper() else c.upper() for c in s)"}
{"instruction": "Write a Python script to find the length of the longest word in a sentence.", "response": "def longest_word_len(s): return max(len(w) for w in s.split())"}
{"instruction": "Write a Python function to return the middle character(s) of a string.", "response": "def middle_chars(s): l=len(s); return s[(l-1)//2:l//2+1]"}
{"instruction": "Write a Python script to convert a list of digits into a single integer.", "response": "def digits_to_int(lst): return int(''.join(map(str,lst)))"}
{"instruction": "Write a Python function to determine if a string has balanced parentheses.", "response": "def balanced_parens(s): stack=0; return all((stack:=stack+1 if c=='(' else stack-1 if c==')' else stack)>=0 for c in s) and stack==0"}
{"instruction": "Write a Python script to print all characters in a string along with their positions.", "response": "def print_char_positions(s): [print(i,c) for i,c in enumerate(s)]"}
{"instruction": "Write a Python function to insert a character at a specified index in a string.", "response": "def insert_char(s, c, idx): return s[:idx]+c+s[idx:]"}
{"instruction": "Write a Python script to round a list of float numbers to the nearest whole number.", "response": "def round_list(lst): return [round(x) for x in lst]"}
{"instruction": "Write a Python function to remove elements from a list that are greater than the average.", "response": "def remove_gt_avg(lst): avg=sum(lst)/len(lst); return [x for x in lst if x<=avg]"}
{"instruction": "Write a Python script to calculate the difference between two time values.", "response": "from datetime import datetime; def diff_times(t1,t2): fmt='%H:%M:%S'; return str(datetime.strptime(t2,fmt)-datetime.strptime(t1,fmt))"}
{"instruction": "Write a Python function to check if the characters in a string form an arithmetic sequence by ASCII value.", "response": "def is_ascii_arithmetic(s): return all(ord(s[i])-ord(s[i-1])==ord(s[1])-ord(s[0]) for i in range(2,len(s)))"}
{"instruction": "Write a Python script to extract all alphabetic characters from a string.", "response": "def only_letters(s): return ''.join(c for c in s if c.isalpha())"}
{"instruction": "Write a Python function to check if a list has all elements equal.", "response": "def all_equal(lst): return len(set(lst))==1"}
{"instruction": "Write a Python script to format a list into a comma-separated string with 'and' before the last item.", "response": "def format_list(lst): return ', '.join(lst[:-1]) + ' and ' + lst[-1] if len(lst)>1 else ''.join(lst)"}
{"instruction": "Write a Python function to count how many strings in a list are palindromes.", "response": "def count_palindromes(lst): return sum(1 for w in lst if w==w[::-1])"}
{"instruction": "Write a Python script to print all uppercase characters in a string on new lines.", "response": "def print_upper(s): [print(c) for c in s if c.isupper()]"}
{"instruction": "Write a Python function to return the first repeated element in a list.", "response": "def first_repeat(lst): seen=set(); for x in lst: if x in seen: return x; seen.add(x)"}
{"instruction": "Write a Python script to generate a list of n random integers between a given range.", "response": "import random; def random_list(n,a,b): return [random.randint(a,b) for _ in range(n)]"}
{"instruction": "Write a Python function to convert a string to sentence case.", "response": "def to_sentence_case(s): return s[0].upper() + s[1:].lower() if s else ''"}
{"instruction": "Write a Python script to print a pattern of numbers where each row shows numbers from 1 to the row number.", "response": "def number_pattern(n): [print(' '.join(str(x) for x in range(1,i+1))) for i in range(1,n+1)]"}
{"instruction": "Write a Python function to get the frequency of each element in a list.", "response": "from collections import Counter; def freq(lst): return dict(Counter(lst))"}
{"instruction": "Write a Python script to get the reverse of a string without using slicing or reversed().", "response": "def reverse_manual(s): out=''; [out:=c+out for c in s]; return out"}
{"instruction": "Write a Python function to remove adjacent duplicate elements from a list.", "response": "def remove_adjacent_dupes(lst): return [v for i,v in enumerate(lst) if i==0 or v!=lst[i-1]]"}
{"instruction": "Write a Python script to count digits, letters, and spaces in a string.", "response": "def count_types(s): d=l=sp=0; [d:=d+1 if c.isdigit() else l:=l+1 if c.isalpha() else sp:=sp+1 if c==' ' else sp for c in s]; return d,l,sp"}
{"instruction": "Write a Python function to convert a string into a dictionary using index as key.", "response": "def str_to_dict(s): return {i:c for i,c in enumerate(s)}"}
{"instruction": "Write a Python script to convert a list of strings into a dictionary with lengths as values.", "response": "def str_len_dict(lst): return {x:len(x) for x in lst}"}
{"instruction": "Write a Python function to flatten a list of lists into a single list.", "response": "def flatten(lst): return [i for sub in lst for i in sub]"}
{"instruction": "Write a Python script to pad a list with zeros to a fixed length.", "response": "def pad_zeros(lst, length): return lst + [0]*(length-len(lst))"}
{"instruction": "Write a Python function to return the minimum and maximum from a list without using min() or max().", "response": "def min_max(lst): minv=maxv=lst[0]; [minv:=x if x<minv else minv for x in lst]; [maxv:=x if x>maxv else maxv for x in lst]; return minv,maxv"}
{"instruction": "Write a Python script to convert all elements in a list to their boolean value.", "response": "def to_bools(lst): return [bool(x) for x in lst]"}
{"instruction": "Write a Python function to get all characters that appear exactly once in a string.", "response": "def single_occurrence(s): return [c for c in s if s.count(c)==1]"}
{"instruction": "Write a Python script to print even digits from a number using modulo.", "response": "def even_digits(n): [print(d) for d in str(n) if int(d)%2==0]"}
{"instruction": "Write a Python function to create a list of ASCII values from a string.", "response": "def ascii_list(s): return [ord(c) for c in s]"}
{"instruction": "Write a Python script to return the list length without using len().", "response": "def list_length(lst): c=0; [c:=c+1 for _ in lst]; return c"}
{"instruction": "Write a Python function to reverse the digits of a number using a loop.", "response": "def reverse_digits(n): r=0; while n: r=r*10+n%10; n//=10; return r"}
{"instruction": "Write a Python script to extract lowercase letters from a sentence.", "response": "def lower_letters(s): return ''.join(c for c in s if c.islower())"}
{"instruction": "Write a Python function to check if all characters in a string are the same.", "response": "def all_same(s): return len(set(s))==1"}
{"instruction": "Write a Python script to convert a string to uppercase without using upper().", "response": "def to_upper_manual(s): return ''.join(chr(ord(c)-32) if 'a'<=c<='z' else c for c in s)"}
{"instruction": "Write a Python function to find the most frequent digit in a number.", "response": "from collections import Counter; def most_freq_digit(n): return Counter(str(n)).most_common(1)[0][0]"}
{"instruction": "Write a Python script to generate a list of all odd numbers up to 100.", "response": "def odd_numbers(): return [i for i in range(1,101,2)]"}
{"instruction": "Write a Python function to check if a number is a palindrome using math operations.", "response": "def is_palindrome_math(n): x=n; rev=0; while x: rev=rev*10 + x%10; x//=10; return rev==n"}
{"instruction": "Write a Python script to print the multiplication of digits in a number.", "response": "def mult_digits(n): p=1; [p:=p*int(d) for d in str(n)]; print(p)"}
{"instruction": "Write a Python function to check if a number is divisible by the sum of its digits.", "response": "def divisible_by_digit_sum(n): return n % sum(int(d) for d in str(n)) == 0"}
{"instruction": "Write a Python script to convert time from 24-hour to 12-hour format.", "response": "def convert_time(t): h,m = map(int, t.split(':')); return f'{(h-1)%12+1}:{m:02d} {AM\" if h<12 else \"PM\"}'\""}
{"instruction": "Write a Python function to extract all unique characters from a string in the order they appear.", "response": "def unique_chars(s): seen=set(); return ''.join(c for c in s if not (c in seen or seen.add(c)))"}
{"instruction": "Write a Python script to remove all numeric characters from a string.", "response": "def remove_digits(s): return ''.join(c for c in s if not c.isdigit())"}
{"instruction": "Write a Python function to return a new list with every second element reversed.", "response": "def reverse_every_second(lst): lst[1::2] = lst[1::2][::-1]; return lst"}
{"instruction": "Write a Python script to count how many times a specific digit appears in a number.", "response": "def count_digit(n,d): return str(n).count(str(d))"}
{"instruction": "Write a Python function to shift each letter in a string forward by two places.", "response": "def shift_letters(s): return ''.join(chr((ord(c)-97+2)%26+97) if c.isalpha() and c.islower() else c for c in s)"}
{"instruction": "Write a Python script to replace all occurrences of a substring with another string.", "response": "def replace_substring(s, old, new): return s.replace(old,new)"}
{"instruction": "Write a Python function to double only the even numbers in a list.", "response": "def double_evens(lst): return [x*2 if x%2==0 else x for x in lst]"}
{"instruction": "Write a Python script to get the list of all letters used in multiple strings.", "response": "def letters_used(*strings): return sorted(set(''.join(strings)))"}
{"instruction": "Write a Python function to check if a list is a mirror image of itself.", "response": "def is_mirror(lst): return lst == lst[::-1]"}
{"instruction": "Write a Python script to reverse words in a string that are longer than 4 characters.", "response": "def reverse_long_words(s): return ' '.join(w[::-1] if len(w)>4 else w for w in s.split())"}
{"instruction": "Write a Python function to convert a list of numbers into a list of their binary equivalents.", "response": "def to_binary_list(lst): return [bin(x)[2:] for x in lst]"}
{"instruction": "Write a Python script to remove duplicate characters from a string without using set().", "response": "def remove_dupes(s): out=''; [out:=out+c if c not in out else out for c in s]; return out"}
{"instruction": "Write a Python function to extract the last word from a sentence.", "response": "def last_word(s): return s.strip().split()[-1]"}
{"instruction": "Write a Python script to print a numeric pyramid pattern.", "response": "def num_pyramid(n): [print(' '.join(str(i+1) for _ in range(i+1))) for i in range(n)]"}
{"instruction": "Write a Python function to return the digit sum of each number in a list.", "response": "def digit_sums(lst): return [sum(int(d) for d in str(x)) for x in lst]"}
{"instruction": "Write a Python script to check if a given character is a special symbol.", "response": "def is_special(c): return not c.isalnum()"}
{"instruction": "Write a Python function to get the longest increasing sequence in a list.", "response": "def longest_increasing(lst): res, temp = [], []; [temp.append(x) if not temp or x>temp[-1] else (res.append(temp); temp:=[x]) for x in lst]; res.append(temp); return max(res, key=len)"}
{"instruction": "Write a Python script to extract numbers from a string and store them in a list.", "response": "import re; def extract_numbers(s): return list(map(int, re.findall(r'\\d+', s)))"}
{"instruction": "Write a Python function to format a list into a human-readable string (Oxford comma style).", "response": "def oxford_comma(lst): return ', '.join(lst[:-1]) + ', and ' + lst[-1] if len(lst)>2 else ' and '.join(lst)"}
{"instruction": "Write a Python script to convert a dictionary to a list of tuples.", "response": "def dict_to_tuples(d): return list(d.items())"}
{"instruction": "Write a Python function to determine if a character is a consonant.", "response": "def is_consonant(c): return c.isalpha() and c.lower() not in 'aeiou'"}
{"instruction": "Write a Python script to filter words from a sentence that are shorter than 5 characters.", "response": "def filter_short_words(s): return ' '.join(w for w in s.split() if len(w)>=5)"}
{"instruction": "Write a Python function to calculate the average of digits in a number.", "response": "def avg_digits(n): digits=[int(d) for d in str(n)]; return sum(digits)/len(digits)"}
{"instruction": "Write a Python script to mask all digits in a number except the last two.", "response": "def mask_digits(n): s=str(n); return '*'*(len(s)-2) + s[-2:]"}
{"instruction": "Write a Python function to replace all spaces in a list of strings with underscores.", "response": "def space_to_underscore(lst): return [s.replace(' ','_') for s in lst]"}
{"instruction": "Write a Python script to sort characters in a string alphabetically.", "response": "def sort_string(s): return ''.join(sorted(s))"}
{"instruction": "Write a Python function to find the longest palindrome in a list of strings.", "response": "def longest_palindrome(lst): return max((w for w in lst if w==w[::-1]), key=len, default='')"}
{"instruction": "Write a Python script to merge list items into a single string with hyphens.", "response": "def merge_hyphen(lst): return '-'.join(lst)"}
{"instruction": "Write a Python function to check if all elements in a list are unique.", "response": "def all_unique(lst): return len(lst) == len(set(lst))"}
{"instruction": "Write a Python script to generate a list of tuples containing elements and their indexes.", "response": "def enumerate_list(lst): return list(enumerate(lst))"}
{"instruction": "Write a Python function to return a string with all vowels removed.", "response": "def remove_vowels(s): return ''.join(c for c in s if c.lower() not in 'aeiou')"}
{"instruction": "Write a Python script to insert a character after every third character in a string.", "response": "def insert_every_third(s, ch): return ''.join(c+ch if (i+1)%3==0 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python function to calculate the number of spaces in a string.", "response": "def count_spaces(s): return s.count(' ')"}
{"instruction": "Write a Python script to multiply all even numbers in a list.", "response": "def mult_evens(lst): p=1; [p:=p*x for x in lst if x%2==0]; print(p)"}
{"instruction": "Write a Python function to remove all instances of the smallest number in a list.", "response": "def remove_min(lst): m=min(lst); return [x for x in lst if x!=m]"}
{"instruction": "Write a Python script to center-align a string in a fixed width output.", "response": "def center_text(s, width): return s.center(width)"}
{"instruction": "Write a Python function to test whether two strings are one edit away.", "response": "def one_edit_away(a,b): if abs(len(a)-len(b))>1: return False; if len(a)>len(b): a,b=b,a; i=j=diff=0; while i<len(a) and j<len(b): diff+=a[i]!=b[j]; j+=1; i+=a[i]!=b[j-1]; return diff+(len(b)-j)<=1"}
{"instruction": "Write a Python script to reverse the order of a sentence word by word.", "response": "def reverse_sentence(s): return ' '.join(s.split()[::-1])"}
{"instruction": "Write a Python function to return the last digit of a number without using string conversion.", "response": "def last_digit(n): return n % 10"}
{"instruction": "Write a Python script to generate a list of alternating 1s and 0s of a given length.", "response": "def alt_ones_zeros(n): return [i%2 for i in range(n)]"}
{"instruction": "Write a Python function to round every number in a list up to the nearest multiple of 10.", "response": "def round_up_10(lst): return [((x+9)//10)*10 for x in lst]"}
{"instruction": "Write a Python script to convert a string into title case manually.", "response": "def to_title_case(s): return ' '.join(w[0].upper()+w[1:].lower() if w else '' for w in s.split())"}
{"instruction": "Write a Python function to count total vowels in each word of a sentence.", "response": "def vowel_count_words(s): return [sum(1 for c in w if c.lower() in 'aeiou') for w in s.split()]"}
{"instruction": "Write a Python script to replace each character in a string with the character two steps ahead in the alphabet.", "response": "def shift_chars(s): return ''.join(chr((ord(c)-97+2)%26+97) if c.isalpha() else c for c in s.lower())"}
{"instruction": "Write a Python function to return all indexes of a given character in a string.", "response": "def all_indexes(s, ch): return [i for i,c in enumerate(s) if c==ch]"}
{"instruction": "Write a Python script to replace all numbers in a string with their word representation.", "response": "def num_to_words(s): return s.translate(str.maketrans('0123456789','zeroonetwothreefourfivesixseveneightnine'))"}
{"instruction": "Write a Python function to test whether all values in a dictionary are unique.", "response": "def dict_values_unique(d): return len(set(d.values())) == len(d.values())"}
{"instruction": "Write a Python script to split a number into a list of digits in reverse order.", "response": "def reverse_digits(n): return [int(d) for d in str(n)][::-1]"}
{"instruction": "Write a Python function to convert a number to a string without using str().", "response": "def num_to_str(n): return '%d' % n"}
{"instruction": "Write a Python script to return all even-indexed characters in a string.", "response": "def even_index_chars(s): return s[::2]"}
{"instruction": "Write a Python function to capitalize only the last letter of each word in a sentence.", "response": "def cap_last_letters(s): return ' '.join(w[:-1]+w[-1].upper() if w else '' for w in s.split())"}
{"instruction": "Write a Python script to count how many unique digits are in a number.", "response": "def unique_digit_count(n): return len(set(str(n)))"}
{"instruction": "Write a Python function to create a dictionary where keys are list items and values are their lengths.", "response": "def list_to_len_dict(lst): return {x:len(x) for x in lst}"}
{"instruction": "Write a Python script to remove all empty dictionaries from a list.", "response": "def remove_empty_dicts(lst): return [x for x in lst if not (isinstance(x,dict) and not x)]"}
{"instruction": "Write a Python function to count the total number of lowercase and uppercase letters in a string.", "response": "def count_cases(s): return sum(c.islower() for c in s), sum(c.isupper() for c in s)"}
{"instruction": "Write a Python script to remove all strings from a list that are shorter than 3 characters.", "response": "def remove_short(lst): return [s for s in lst if len(s) >= 3]"}
{"instruction": "Write a Python function to create a string from every second character in a given string.", "response": "def every_second_char(s): return s[1::2]"}
{"instruction": "Write a Python script to check if two strings are reverses of each other.", "response": "def are_reverses(a,b): return a == b[::-1]"}
{"instruction": "Write a Python function to reverse a tuple.", "response": "def reverse_tuple(t): return t[::-1]"}
{"instruction": "Write a Python script to calculate the number of days between two given dates.", "response": "from datetime import datetime; def days_between(d1,d2): return abs((datetime.strptime(d1,'%Y-%m-%d') - datetime.strptime(d2,'%Y-%m-%d')).days)"}
{"instruction": "Write a Python function to convert a string into a list of ASCII values and back.", "response": "def ascii_convert(s): a=[ord(c) for c in s]; return ''.join(chr(i) for i in a)"}
{"instruction": "Write a Python script to get the common elements from two sets.", "response": "def common_set(a,b): return a & b"}
{"instruction": "Write a Python function to compute the square of each odd number in a list.", "response": "def square_odds(lst): return [x**2 for x in lst if x%2]"}
{"instruction": "Write a Python script to count the frequency of words in a paragraph.", "response": "from collections import Counter; def word_freq(p): return Counter(p.split())"}
{"instruction": "Write a Python function to test if a number is a perfect cube.", "response": "def is_perfect_cube(n): return round(n**(1/3))**3 == n"}
{"instruction": "Write a Python script to create a list of multiples of 9 up to 100.", "response": "def mult_9(): return [i for i in range(9,101,9)]"}
{"instruction": "Write a Python function to calculate the sum of all digits across all numbers in a list.", "response": "def sum_all_digits(lst): return sum(int(d) for x in lst for d in str(x))"}
{"instruction": "Write a Python script to remove all punctuation from a sentence.", "response": "import string; def no_punct(s): return s.translate(str.maketrans('', '', string.punctuation))"}
{"instruction": "Write a Python function to return a sorted version of a string's characters.", "response": "def sort_string(s): return ''.join(sorted(s))"}
{"instruction": "Write a Python script to check if two lists are disjoint.", "response": "def disjoint_lists(a,b): return set(a).isdisjoint(b)"}
{"instruction": "Write a Python function to replace every vowel in a string with its position index.", "response": "def vowel_index_replace(s): return ''.join(str(i) if c in 'aeiouAEIOU' else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to double the characters in a string using a loop.", "response": "def double_chars(s): out=''; [out:=out+c+c for c in s]; print(out)"}
{"instruction": "Write a Python function to count the number of lowercase vowels in each word of a sentence.", "response": "def vowel_counts(s): return [sum(1 for c in w if c in 'aeiou') for w in s.split()]"}
{"instruction": "Write a Python script to create a dictionary from a string where letters are keys and values are their counts.", "response": "from collections import Counter; def str_to_dict(s): return dict(Counter(s))"}
{"instruction": "Write a Python function to filter out non-integer elements from a mixed list.", "response": "def filter_ints(lst): return [x for x in lst if isinstance(x,int)]"}
{"instruction": "Write a Python script to print characters of a string in alternating order starting from both ends.", "response": "def alt_ends(s): print(''.join(s[i//2] if i%2==0 else s[-(i//2+1)] for i in range(len(s))))"}
{"instruction": "Write a Python function to split a list into even and odd indexed elements.", "response": "def split_even_odd(lst): return lst[::2], lst[1::2]"}
{"instruction": "Write a Python script to flatten a dictionary with nested dictionaries.", "response": "def flatten_dict(d,prefix=''): out={}; [out.update(flatten_dict(v,f'{prefix}{k}.')) if isinstance(v,dict) else out.update({f'{prefix}{k}':v}) for k,v in d.items()]; return out"}
{"instruction": "Write a Python function to remove the first and last element from a list.", "response": "def remove_ends(lst): return lst[1:-1]"}
{"instruction": "Write a Python script to create a mirrored version of a string (e.g. 'abc' → 'abccba').", "response": "def mirror(s): return s + s[::-1]"}
{"instruction": "Write a Python function to compute the average word length in a sentence.", "response": "def avg_word_len(s): w=s.split(); return sum(len(x) for x in w)/len(w)"}
{"instruction": "Write a Python script to return the top 3 highest numbers in a list without sorting.", "response": "def top_3(lst): top=[]; [top.append(x) or top.sort(reverse=True) or top.pop() if len(top)>3 else None for x in lst]; return top"}
{"instruction": "Write a Python function to find all substrings of a given string.", "response": "def substrings(s): return [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1)]"}
{"instruction": "Write a Python script to rotate digits of a number to the left.", "response": "def rotate_left(n): s=str(n); return int(s[1:] + s[0])"}
{"instruction": "Write a Python function to extract all alphabetic substrings from a string.", "response": "import re; def alpha_subs(s): return re.findall(r'[a-zA-Z]+', s)"}
{"instruction": "Write a Python script to replace each vowel in a string with the next vowel.", "response": "def next_vowel(c): v='aeiou'; return v[(v.index(c)+1)%5] if c in v else c"}
{"instruction": "Write a Python function to get the most frequent word in a sentence.", "response": "from collections import Counter; def most_common_word(s): return Counter(s.split()).most_common(1)[0][0]"}
{"instruction": "Write a Python script to check if a number is the sum of two squares.", "response": "def is_sum_of_squares(n): return any((n - i*i)**0.5 % 1 == 0 for i in range(1,int(n**0.5)+1))"}
{"instruction": "Write a Python function to count all numeric substrings in a string.", "response": "import re; def count_numeric_subs(s): return len(re.findall(r'\\\\d+',s))"}
{"instruction": "Write a Python script to convert a flat list into a list of tuples of two elements each.", "response": "def to_tuples(lst): return [(lst[i],lst[i+1]) for i in range(0,len(lst)-1,2)]"}
{"instruction": "Write a Python function to find all elements in a list that appear more than once.", "response": "from collections import Counter; def dupes(lst): return [x for x,c in Counter(lst).items() if c > 1]"}
{"instruction": "Write a Python script to remove all dictionary entries with empty values.", "response": "def drop_empty(d): return {k:v for k,v in d.items() if v}"}
{"instruction": "Write a Python function to alternate characters between upper and lower case.", "response": "def alt_case(s): return ''.join(c.upper() if i%2==0 else c.lower() for i,c in enumerate(s))"}
{"instruction": "Write a Python script to test if a string contains at least one digit and one letter.", "response": "def has_digit_and_letter(s): return any(c.isdigit() for c in s) and any(c.isalpha() for c in s)"}
{"instruction": "Write a Python function to find the product of all positive numbers in a list.", "response": "from functools import reduce; def prod_positives(lst): return reduce(lambda x,y:x*y,[n for n in lst if n>0],1)"}
{"instruction": "Write a Python script to check whether a given number is a strong number.", "response": "def is_strong(n): return n == sum(math.factorial(int(d)) for d in str(n))"}
{"instruction": "Write a Python function to truncate every string in a list to its first 3 characters.", "response": "def truncate_3(lst): return [x[:3] for x in lst]"}
{"instruction": "Write a Python script to pad a number with leading zeros until it's 5 digits long.", "response": "def pad_zeros(n): return str(n).zfill(5)"}
{"instruction": "Write a Python function to get the longest string in a list.", "response": "def longest_string(lst): return max(lst, key=len)"}
{"instruction": "Write a Python script to test if a list has strictly decreasing values.", "response": "def strictly_decreasing(lst): return all(lst[i] > lst[i+1] for i in range(len(lst)-1))"}
{"instruction": "Write a Python function to count the number of trailing zeros in a number.", "response": "def trailing_zeros(n): return len(str(n)) - len(str(n).rstrip('0'))"}
{"instruction": "Write a Python script to calculate the sum of diagonal elements in a square matrix.", "response": "def diag_sum(matrix): return sum(matrix[i][i] for i in range(len(matrix)))"}
{"instruction": "Write a Python function to determine if a list contains any palindromic strings.", "response": "def has_palindromes(lst): return any(s == s[::-1] for s in lst)"}
{"instruction": "Write a Python script to check if a string contains duplicate words.", "response": "def has_duplicate_words(s): w=s.lower().split(); return len(w)!=len(set(w))"}
{"instruction": "Write a Python function to remove every nth item from a list.", "response": "def remove_every_nth(lst,n): return [x for i,x in enumerate(lst) if (i+1)%n != 0]"}
{"instruction": "Write a Python script to filter out falsy values from a list.", "response": "def remove_falsy(lst): return list(filter(bool, lst))"}
{"instruction": "Write a Python function to convert a string into a zig-zag pattern and return the flattened version.", "response": "def zigzag_flat(s,rows=3): z=[[] for _ in range(rows)]; i,dir=0,1; [z[i].append(c) or (i:=i+dir) or (dir*=-1) if i in [0,rows-1] else None for c in s]; return ''.join(c for row in z for c in row)"}
{"instruction": "Write a Python script to check if a string contains equal numbers of vowels and consonants.", "response": "def equal_vowel_consonant(s): v=sum(1 for c in s.lower() if c in 'aeiou'); c=sum(1 for c in s.lower() if c.isalpha() and c not in 'aeiou'); return v==c"}
{"instruction": "Write a Python function to check if the characters in a string form a valid ASCII sequence.", "response": "def is_valid_ascii(s): return all(0<=ord(c)<=127 for c in s)"}
{"instruction": "Write a Python script to find all indices of a character in a string.", "response": "def all_indices(s,c): return [i for i,a in enumerate(s) if a==c]"}
{"instruction": "Write a Python function to return the number of digits in an integer using math only.", "response": "import math; def digit_count(n): return math.floor(math.log10(n))+1 if n else 1"}
{"instruction": "Write a Python script to extract the longest contiguous sequence of letters in a string.", "response": "import re; def longest_letters(s): return max(re.findall(r'[a-zA-Z]+', s), key=len)"}
{"instruction": "Write a Python function to rotate elements in a list based on their index.", "response": "def rotate_by_index(lst): return [lst[i:] + lst[:i] for i in range(len(lst))]"}
{"instruction": "Write a Python script to insert a delimiter between every two characters in a string.", "response": "def insert_delim(s,d): return d.join(s)"}
{"instruction": "Write a Python function to test if all strings in a list are the same length.", "response": "def all_same_length(lst): return len(set(len(s) for s in lst))==1"}
{"instruction": "Write a Python script to count the number of substrings of length 3 in a string.", "response": "def substr_count_3(s): return len(s)-2 if len(s)>=3 else 0"}
{"instruction": "Write a Python function to repeat the contents of a list n times using recursion.", "response": "def repeat_list(lst,n): return lst if n<=1 else lst + repeat_list(lst,n-1)"}
{"instruction": "Write a Python script to remove every vowel from a list of strings.", "response": "def remove_vowels(lst): return [''.join(c for c in s if c.lower() not in 'aeiou') for s in lst]"}
{"instruction": "Write a Python function to split a sentence into words and return only those with even length.", "response": "def even_words(s): return [w for w in s.split() if len(w)%2==0]"}
{"instruction": "Write a Python script to return the intersection of three lists.", "response": "def intersect3(a,b,c): return list(set(a)&set(b)&set(c))"}
{"instruction": "Write a Python function to determine if a string has alternating vowels and consonants.", "response": "def alt_vc(s): s=s.lower(); return all((c in 'aeiou')!=(s[i+1] in 'aeiou') for i,c in enumerate(s[:-1]) if c.isalpha() and s[i+1].isalpha())"}
{"instruction": "Write a Python script to sum all numbers found between commas in a string.", "response": "def sum_between_commas(s): return sum(map(int,s.split(',')))"}
{"instruction": "Write a Python function to check if a number is equal to the sum of the factorials of its digits.", "response": "import math; def is_fact_sum(n): return n == sum(math.factorial(int(d)) for d in str(n))"}
{"instruction": "Write a Python script to return the last non-space character in a string.", "response": "def last_non_space(s): return next((c for c in reversed(s) if c!=' '), '')"}
{"instruction": "Write a Python function to group all identical elements in a list together.", "response": "from collections import defaultdict; def group_same(lst): d=defaultdict(list); [d[x].append(x) for x in lst]; return list(d.values())"}
{"instruction": "Write a Python script to check if all characters in a string are unique using no data structures.", "response": "def unique_chars(s): return all(s.count(c)==1 for c in s)"}
{"instruction": "Write a Python function to compress a string using run-length encoding.", "response": "def rle(s): return ''.join(f'{c}{len(list(g))}' for c,g in groupby(s))"}
{"instruction": "Write a Python script to replace spaces in a string with the next character alphabetically.", "response": "def space_to_next(s): return ''.join(chr(ord(c)+1) if c==' ' else c for c in s)"}
{"instruction": "Write a Python function to generate all two-letter combinations from a list of characters.", "response": "import itertools; def two_letter_combos(lst): return [''.join(p) for p in itertools.permutations(lst,2)]"}
{"instruction": "Write a Python script to reverse every other word in a sentence.", "response": "def rev_alt_words(s): w=s.split(); return ' '.join(w[i][::-1] if i%2 else w[i] for i in range(len(w)))"}
{"instruction": "Write a Python function to determine if two strings are one swap away from each other.", "response": "def one_swap(s1,s2): if len(s1)!=len(s2): return False; diff=[(a,b) for a,b in zip(s1,s2) if a!=b]; return len(diff)==2 and diff[0]==diff[1][::-1]"}
{"instruction": "Write a Python script to find the number of times a substring appears in a string using only slicing.", "response": "def substr_count(s,sub): return sum(1 for i in range(len(s)-len(sub)+1) if s[i:i+len(sub)]==sub)"}
{"instruction": "Write a Python function to determine if a string is a rotated palindrome.", "response": "def is_rotated_palindrome(s): return any((s[i:]+s[:i])== (s[i:]+s[:i])[::-1] for i in range(len(s)))"}
{"instruction": "Write a Python script to return the list of tuples for each character and its index in a string.", "response": "def char_index_tuples(s): return list(enumerate(s))"}
{"instruction": "Write a Python function to reverse the vowels in a string.", "response": "def reverse_vowels(s): v=[c for c in s if c in 'aeiouAEIOU']; return ''.join(v.pop() if c in 'aeiouAEIOU' else c for c in s)"}
{"instruction": "Write a Python script to remove all vowels from a list of strings.", "response": "def strip_vowels(lst): return [''.join(c for c in s if c.lower() not in 'aeiou') for s in lst]"}
{"instruction": "Write a Python function to split a number into chunks of two digits.", "response": "def split_2_digits(n): s=str(n); return [int(s[i:i+2]) for i in range(0,len(s),2)]"}
{"instruction": "Write a Python script to pad a string with '*' until its length is a multiple of 4.", "response": "def pad_star(s): return s + '*'*((4-len(s)%4)%4)"}
{"instruction": "Write a Python function to test whether the sum of a number’s digits is divisible by 9.", "response": "def digit_sum_9(n): return sum(int(d) for d in str(n)) % 9 == 0"}
{"instruction": "Write a Python script to count total punctuation marks in a list of strings.", "response": "import string; def count_punct(lst): return sum(c in string.punctuation for s in lst for c in s)"}
{"instruction": "Write a Python function to remove all whitespace from a list of strings.", "response": "def strip_ws(lst): return [s.replace(' ','') for s in lst]"}
{"instruction": "Write a Python script to check whether all characters in a string are lowercase.", "response": "def all_lower(s): return s.islower()"}
{"instruction": "Write a Python function to sort a list of strings by their last letter.", "response": "def sort_by_last(lst): return sorted(lst, key=lambda x: x[-1])"}
{"instruction": "Write a Python script to return a list of strings sorted by length and then alphabetically.", "response": "def sort_by_len_alpha(lst): return sorted(lst, key=lambda x: (len(x), x))"}
{"instruction": "Write a Python function to return all substrings of a string that are palindromes.", "response": "def all_palindromes(s): return [s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if s[i:j]==s[i:j][::-1]]"}
{"instruction": "Write a Python script to compare the frequency of letters in two strings.", "response": "from collections import Counter; def freq_compare(a,b): return Counter(a)==Counter(b)"}
{"instruction": "Write a Python function to convert a list of integers to their English word form.", "response": "num_map={0:'zero',1:'one',2:'two',3:'three',4:'four',5:'five',6:'six',7:'seven',8:'eight',9:'nine'}; def int_to_words(lst): return [' '.join(num_map[int(d)] for d in str(n)) for n in lst]"}
{"instruction": "Write a Python script to return the character that occurs the fewest times in a string.", "response": "from collections import Counter; def rare_char(s): return min((c for c in s if c.isalpha()), key=s.count)"}
{"instruction": "Write a Python function to reverse each number in a list of integers.", "response": "def reverse_each(lst): return [int(str(n)[::-1]) for n in lst]"}
{"instruction": "Write a Python script to determine if two strings are isomorphic.", "response": "def isomorphic(s1,s2): return len(set(zip(s1,s2)))==len(set(s1))==len(set(s2))"}
{"instruction": "Write a Python function to check if a string contains only ASCII characters.", "response": "def is_ascii(s): return all(ord(c) < 128 for c in s)"}
{"instruction": "Write a Python script to convert a string of digits into a list of individual numbers.", "response": "def str_to_digits(s): return [int(c) for c in s if c.isdigit()]"}
{"instruction": "Write a Python function to remove punctuation from a list of strings.", "response": "import string; def strip_punct(lst): return [''.join(c for c in s if c not in string.punctuation) for s in lst]"}
{"instruction": "Write a Python script to replace every second word in a sentence with 'Python'.", "response": "def replace_every_second(s): w=s.split(); w[1::2]=['Python']*(len(w)//2); return ' '.join(w)"}
{"instruction": "Write a Python function to count how many times a character appears before another in a string.", "response": "def count_before(s,a,b): return sum(1 for i in range(len(s)) if s[i]==a and b in s[i+1:])"}
{"instruction": "Write a Python script to calculate the length of the longest word in a given list.", "response": "def max_word_len(lst): return max(len(w) for w in lst)"}
{"instruction": "Write a Python function to return the index of the second occurrence of a character in a string.", "response": "def second_index(s,c): return s.find(c, s.find(c)+1)"}
{"instruction": "Write a Python script to remove digits from a string and count how many were removed.", "response": "def strip_digits(s): new=''.join(c for c in s if not c.isdigit()); return new, len(s)-len(new)"}
{"instruction": "Write a Python function to test if a word is an isogram (no repeating letters).", "response": "def is_isogram(w): return len(set(w.lower())) == len(w)"}
{"instruction": "Write a Python script to return a list of all strings that contain a specific substring.", "response": "def contains_sub(lst,sub): return [s for s in lst if sub in s]"}
{"instruction": "Write a Python function to convert a list of integers to a space-separated string.", "response": "def ints_to_str(lst): return ' '.join(map(str,lst))"}
{"instruction": "Write a Python script to check whether all strings in a list start with the same letter.", "response": "def same_start(lst): return len(set(s[0].lower() for s in lst))==1"}
{"instruction": "Write a Python function to determine if a number is an automorphic number.", "response": "def is_automorphic(n): return str(n*n).endswith(str(n))"}
{"instruction": "Write a Python script to return all words longer than 7 characters in a sentence.", "response": "def words_gt_7(s): return [w for w in s.split() if len(w)>7]"}
{"instruction": "Write a Python function to alternate between lowercase and uppercase letters in a string.", "response": "def alt_case(s): return ''.join(c.lower() if i%2==0 else c.upper() for i,c in enumerate(s))"}
{"instruction": "Write a Python script to count all words in a list that end with a specific character.", "response": "def count_end_char(lst,c): return sum(1 for w in lst if w.endswith(c))"}
{"instruction": "Write a Python function to shift characters in a string forward by 5 positions.", "response": "def shift_by_5(s): return ''.join(chr((ord(c)-97+5)%26+97) if c.isalpha() else c for c in s.lower())"}
{"instruction": "Write a Python script to test if a list is circularly identical to another list.", "response": "def is_circular(a,b): return any(a==b[i:]+b[:i] for i in range(len(b)))"}
{"instruction": "Write a Python function to remove words with repeated characters from a list.", "response": "def no_repeats(lst): return [w for w in lst if len(set(w))==len(w)]"}
{"instruction": "Write a Python script to print a triangle of numbers increasing left to right.", "response": "def num_triangle(n): [print(' '.join(str(j) for j in range(1,i+1))) for i in range(1,n+1)]"}
{"instruction": "Write a Python function to check if a number is equal to the product of its digits.", "response": "def prod_eq_n(n): from math import prod; return n==prod(map(int,str(n)))"}
{"instruction": "Write a Python script to convert a string into a dictionary with counts of vowels and consonants.", "response": "def count_vc(s): v=sum(c.lower() in 'aeiou' for c in s); c=sum(c.isalpha() and c.lower() not in 'aeiou' for c in s); return {'vowels':v,'consonants':c}"}
{"instruction": "Write a Python function to count how many characters in a string are not repeated.", "response": "def nonrepeats(s): return sum(1 for c in s if s.count(c)==1)"}
{"instruction": "Write a Python script to remove every 3rd element from a list starting at index 2.", "response": "def remove_3rd(lst): return [x for i,x in enumerate(lst) if (i-2)%3!=0 or i<2]"}
{"instruction": "Write a Python function to find all characters that appear in both of two strings.", "response": "def common_chars(a,b): return list(set(a)&set(b))"}
{"instruction": "Write a Python script to repeat each element in a list according to its value.", "response": "def repeat_by_val(lst): return [x for x in lst for _ in range(x)]"}
{"instruction": "Write a Python function to generate all substrings of a string of length 2 or more.", "response": "def substrings(s): return [s[i:j] for i in range(len(s)) for j in range(i+2,len(s)+1)]"}
{"instruction": "Write a Python script to replace repeated characters in a string with their count.", "response": "def replace_dupes(s): from collections import Counter; c=Counter(s); return ''.join(str(c[ch]) if c[ch]>1 else ch for ch in s)"}
{"instruction": "Write a Python function to reverse the words in a sentence using a stack approach.", "response": "def rev_words_stack(s): return ' '.join(reversed(s.split()))"}
{"instruction": "Write a Python script to replace every even-indexed character in a string with '#'.", "response": "def hash_even_idx(s): return ''.join('#' if i%2==0 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python function to return the minimum positive integer not in a given list.", "response": "def min_missing(lst): i=1; while i in lst: i+=1; return i"}
{"instruction": "Write a Python script to shift the letters of a word cyclically by a given number.", "response": "def shift_cyclic(w,n): return ''.join(chr((ord(c)-97+n)%26+97) if c.isalpha() else c for c in w.lower())"}
{"instruction": "Write a Python function to test whether a number is a palindrome using a for loop.", "response": "def is_palindrome(n): s=str(n); return all(s[i]==s[-1-i] for i in range(len(s)//2))"}
{"instruction": "Write a Python script to count how many uppercase letters are immediately followed by lowercase ones.", "response": "def uc_followed_by_lc(s): return sum(1 for i in range(len(s)-1) if s[i].isupper() and s[i+1].islower())"}
{"instruction": "Write a Python function to check if all characters in a string are the same case.", "response": "def same_case(s): return s.islower() or s.isupper()"}
{"instruction": "Write a Python script to double every digit in a number and return the new number.", "response": "def double_digits(n): return int(''.join(str(int(d)*2) for d in str(n)))"}
{"instruction": "Write a Python function to return the length of the shortest word in a string.", "response": "def shortest_word_len(s): return min(len(w) for w in s.split())"}
{"instruction": "Write a Python script to create a mirrored numeric pattern.", "response": "def mirror_pattern(n): [print(''.join(str(i) for i in range(1,r+1))+''.join(str(i) for i in range(r-1,0,-1))) for r in range(1,n+1)]"}
{"instruction": "Write a Python function to check if two numbers are co-prime.", "response": "from math import gcd; def is_coprime(a,b): return gcd(a,b)==1"}
{"instruction": "Write a Python script to remove all duplicate digits from a number.", "response": "def remove_dup_digits(n): return int(''.join(sorted(set(str(n)), key=str(n).index)))"}
{"instruction": "Write a Python function to generate a list of every possible pair from a list.", "response": "def all_pairs(lst): return [(a,b) for i,a in enumerate(lst) for b in lst[i+1:]]"}
{"instruction": "Write a Python script to convert each word in a sentence to its reverse.", "response": "def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"}
{"instruction": "Write a Python function to find the smallest even number in a tuple.", "response": "def min_even(t): return min((x for x in t if x%2==0), default=None)"}
{"instruction": "Write a Python script to return all elements that appear exactly twice in a list.", "response": "from collections import Counter; def exact_twice(lst): return [x for x,c in Counter(lst).items() if c==2]"}
{"instruction": "Write a Python function to sort a string without changing the case of each character.", "response": "def sort_preserve_case(s): return ''.join(sorted(s,key=lambda x: (x.lower(), not x.islower())))"}
{"instruction": "Write a Python script to repeat the first character of a string n times.", "response": "def repeat_first(s,n): return s[0]*n + s[1:]"}
{"instruction": "Write a Python function to convert a string to a binary representation of its ASCII codes.", "response": "def to_bin_ascii(s): return ' '.join(format(ord(c),'08b') for c in s)"}
{"instruction": "Write a Python script to multiply each digit of a number by 3 and join them as a string.", "response": "def triple_digits(n): return ''.join(str(int(d)*3) for d in str(n))"}
{"instruction": "Write a Python function to filter out words that contain only vowels.", "response": "def no_vowel_words(lst): return [w for w in lst if all(c.lower() not in 'aeiou' for c in w)]"}
{"instruction": "Write a Python script to test if one string is a subsequence of another.", "response": "def is_subsequence(s1,s2): it=iter(s2); return all(c in it for c in s1)"}
{"instruction": "Write a Python function to return the sum of digits of the product of two numbers.", "response": "def sum_digits_product(a,b): return sum(int(d) for d in str(a*b))"}
{"instruction": "Write a Python script to convert alternating characters in a string to uppercase starting from index 1.", "response": "def alt_upper(s): return ''.join(c.upper() if i%2==1 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python function to split a string into chunks of equal size.", "response": "def split_chunks(s,n): return [s[i:i+n] for i in range(0,len(s),n)]"}
{"instruction": "Write a Python script to filter numbers in a list that are divisible by the sum of their digits.", "response": "def div_by_digit_sum(lst): return [n for n in lst if sum(int(d) for d in str(n)) and n%sum(int(d) for d in str(n))==0]"}
{"instruction": "Write a Python function to return all lowercase letters that appear in a string.", "response": "def get_lowercase(s): return [c for c in s if c.islower()]"}
{"instruction": "Write a Python script to build a string from characters at even positions from a given list of strings.", "response": "def even_pos_chars(lst): return ''.join(''.join(s[i] for i in range(len(s)) if i%2==0) for s in lst)"}
{"instruction": "Write a Python function to remove the character with the lowest ASCII value from a string.", "response": "def remove_min_ascii(s): return s.replace(min(s), '', 1)"}
{"instruction": "Write a Python script to return the product of all odd numbers in a list.", "response": "from math import prod; def prod_odds(lst): return prod(x for x in lst if x%2==1)"}
{"instruction": "Write a Python function to detect if a string is a circular rotation of another.", "response": "def is_circular_rotation(a,b): return len(a)==len(b) and b in a+a"}
{"instruction": "Write a Python script to count the number of words in a list that contain at least one digit.", "response": "def words_with_digit(lst): return sum(any(c.isdigit() for c in w) for w in lst)"}
{"instruction": "Write a Python function to check if the number of vowels equals the number of consonants in a word.", "response": "def vowel_consonant_equal(w): v=sum(c.lower() in 'aeiou' for c in w); c=sum(c.lower() in 'bcdfghjklmnpqrstvwxyz' for c in w); return v==c"}
{"instruction": "Write a Python script to swap every pair of characters in a string.", "response": "def swap_pairs(s): return ''.join(s[i+1]+s[i] if i+1<len(s) else s[i] for i in range(0,len(s),2))"}
{"instruction": "Write a Python function to return a new list where each element is the count of digits in that number.", "response": "def digit_counts(lst): return [len(str(abs(n))) for n in lst]"}
{"instruction": "Write a Python script to check if any character in a string appears consecutively.", "response": "def has_consecutive_chars(s): return any(s[i]==s[i+1] for i in range(len(s)-1))"}
{"instruction": "Write a Python function to find all numbers between 100 and 999 with all unique digits.", "response": "def unique_3digits(): return [n for n in range(100,1000) if len(set(str(n)))==3]"}
{"instruction": "Write a Python script to extract all letters from a string in reverse order.", "response": "def reverse_letters(s): return ''.join(c for c in reversed(s) if c.isalpha())"}
{"instruction": "Write a Python function to sort a list of numbers by the number of digits they contain.", "response": "def sort_by_digit_count(lst): return sorted(lst,key=lambda x: len(str(abs(x))))"}
{"instruction": "Write a Python script to find the longest sequence of identical characters in a string.", "response": "def longest_identical(s): from itertools import groupby; return max((len(list(g)) for _,g in groupby(s)), default=0)"}
{"instruction": "Write a Python function to convert every vowel in a string to its position in the alphabet.", "response": "def vowel_to_pos(s): return ''.join(str(ord(c)-96) if c in 'aeiou' else c for c in s.lower())"}
{"instruction": "Write a Python script to print the middle row of a square matrix.", "response": "def middle_row(m): return m[len(m)//2]"}
{"instruction": "Write a Python function to return the first non-repeating digit in a number.", "response": "def first_nonrepeat_digit(n): from collections import Counter; c=Counter(str(n)); return next((int(d) for d in str(n) if c[d]==1), None)"}
{"instruction": "Write a Python script to test whether a string is symmetric around its center.", "response": "def is_symmetric(s): return s == s[::-1]"}
{"instruction": "Write a Python function to convert a decimal to binary manually.", "response": "def dec_to_bin(n): b=''; while n: b=str(n%2)+b; n//=2; return b or '0'"}
{"instruction": "Write a Python script to round numbers in a list to the nearest 5.", "response": "def round_to_5(lst): return [round(x/5)*5 for x in lst]"}
{"instruction": "Write a Python function to swap the halves of a string.", "response": "def swap_halves(s): mid=len(s)//2; return s[mid:]+s[:mid] if len(s)%2==0 else s[mid+1:]+s[mid]+s[:mid]"}
{"instruction": "Write a Python script to return only elements of a list that are powers of 2.", "response": "def powers_of_two(lst): return [x for x in lst if x>0 and (x&(x-1))==0]"}
{"instruction": "Write a Python function to convert each word in a list to its first letter.", "response": "def to_initials(lst): return [w[0] for w in lst if w]"}
{"instruction": "Write a Python script to extract words from a string that have alternating vowels and consonants.", "response": "def alt_vc_words(s): return [w for w in s.split() if all((i%2==0 and w[i].lower() in 'aeiou') or (i%2==1 and w[i].lower() not in 'aeiou') for i in range(len(w)))]"}
{"instruction": "Write a Python function to check if all elements in a list are palindromes.", "response": "def all_palindromes(lst): return all(w==w[::-1] for w in lst)"}
{"instruction": "Write a Python script to create a dictionary from a string using letters as keys and their positions as values.", "response": "def str_to_dict(s): return {c:i for i,c in enumerate(s)}"}
{"instruction": "Write a Python function to calculate the sum of all characters in a string based on their ASCII value.", "response": "def ascii_sum(s): return sum(ord(c) for c in s)"}
{"instruction": "Write a Python script to test whether the length of each word in a sentence is even.", "response": "def even_len_words(s): return all(len(w)%2==0 for w in s.split())"}
{"instruction": "Write a Python function to add the corresponding digits of two equal-length numbers.", "response": "def add_digits(n1,n2): return [int(a)+int(b) for a,b in zip(str(n1),str(n2))]"}
{"instruction": "Write a Python script to print each character of a string between square brackets.", "response": "def brackets_chars(s): return ''.join(f'[{c}]' for c in s)"}
{"instruction": "Write a Python function to split a string into alternating vowels and consonants.", "response": "def split_alt_vc(s): import re; return re.findall(r'([aeiou][^aeiou]|[^aeiou][aeiou])',s,re.IGNORECASE)"}
{"instruction": "Write a Python script to return the list of all digits that appear more than once in a number.", "response": "def repeat_digits(n): return [int(d) for d in set(str(n)) if str(n).count(d)>1]"}
{"instruction": "Write a Python function to return the difference between the sum of digits at even and odd indices.", "response": "def sum_even_odd_indices(n): digits=[int(d) for d in str(n)]; return sum(digits[::2])-sum(digits[1::2])"}
{"instruction": "Write a Python script to convert a number into words without using external libraries.", "response": "def number_to_words(n): units=['zero','one','two','three','four','five','six','seven','eight','nine']; return ' '.join(units[int(d)] for d in str(n))"}
{"instruction": "Write a Python function to rotate characters in a string by a variable number of positions.", "response": "def rotate_string(s,n): return s[n%len(s):]+s[:n%len(s)]"}
{"instruction": "Write a Python script to convert a list of numbers into their string length representations.", "response": "def num_to_str_len(lst): return [str(len(str(n))) for n in lst]"}
{"instruction": "Write a Python function to replace every character in a string with '*', except digits.", "response": "def star_mask(s): return ''.join(c if c.isdigit() else '*' for c in s)"}
{"instruction": "Write a Python script to group characters in a string by their type (letter, digit, other).", "response": "def group_chars(s): return {'letters':[c for c in s if c.isalpha()], 'digits':[c for c in s if c.isdigit()], 'other':[c for c in s if not c.isalnum()]}"}
{"instruction": "Write a Python function to find the maximum number formed by the digits of a given number.", "response": "def max_number_digits(n): return int(''.join(sorted(str(n),reverse=True)))"}
{"instruction": "Write a Python script to replace characters in a string that are not letters with '-'.", "response": "def replace_nonletters(s): return ''.join(c if c.isalpha() else '-' for c in s)"}
{"instruction": "Write a Python function to return the average word length in a paragraph.", "response": "def avg_word_len(p): words=p.split(); return sum(len(w) for w in words)/len(words) if words else 0"}
{"instruction": "Write a Python script to generate a pattern where each row is a reversed string of numbers.", "response": "def reversed_pattern(n): [print(''.join(str(i) for i in range(n,0,-1))) for _ in range(n)]"}
{"instruction": "Write a Python function to find the longest common suffix among a list of strings.", "response": "def common_suffix(lst): from os.path import commonprefix; return commonprefix([w[::-1] for w in lst])[::-1]"}
{"instruction": "Write a Python script to count all one-digit numbers in a list of integers.", "response": "def count_1digit(lst): return sum(1 for x in lst if 0<=x<10)"}
{"instruction": "Write a Python function to return a list of numbers where each is the factorial of the index.", "response": "from math import factorial; def factorial_by_index(n): return [factorial(i) for i in range(n)]"}
{"instruction": "Write a Python script to return a string made from characters at prime index positions.", "response": "def primestr_indices(s): def isprime(n): return n>1 and all(n%i for i in range(2,int(n**0.5)+1)); return ''.join(s[i] for i in range(len(s)) if isprime(i))"}
{"instruction": "Write a Python function to split a list into sublists of alternating odd and even numbers.", "response": "def split_odd_even(lst): res, curr = [], [lst[0]]; for i in lst[1:]: res.append(curr) if (i%2==0)^(curr[-1]%2==0) else curr.append(i); curr = [i]; res.append(curr); return res"}
{"instruction": "Write a Python script to find the number with the highest sum of digits in a list.", "response": "def max_digit_sum(lst): return max(lst, key=lambda x: sum(int(d) for d in str(x)))"}
{"instruction": "Write a Python function to replace each letter in a string with the one that follows it in the alphabet.", "response": "def next_letters(s): return ''.join(chr((ord(c)-96)%26+97) if c.isalpha() else c for c in s.lower())"}
{"instruction": "Write a Python script to remove every character from a string that appears more than once.", "response": "def remove_duplicates(s): return ''.join(c for c in s if s.count(c)==1)"}
{"instruction": "Write a Python function to find the first missing positive number in a list.", "response": "def first_missing_positive(lst): s=set(lst); i=1; while i in s: i+=1; return i"}
{"instruction": "Write a Python script to extract all strings of length 3 from a list of strings.", "response": "def length_3_strings(lst): return [s for s in lst if len(s)==3]"}
{"instruction": "Write a Python function to reverse only the vowels in a string.", "response": "def reverse_vowels(s): v=[c for c in s if c in 'aeiouAEIOU']; return ''.join(v.pop() if c in 'aeiouAEIOU' else c for c in s)"}
{"instruction": "Write a Python script to build a string by concatenating the last character of each word in a sentence.", "response": "def last_chars(sentence): return ''.join(w[-1] for w in sentence.split() if w)"}
{"instruction": "Write a Python function to determine if a string contains a given number of unique characters.", "response": "def has_n_unique(s,n): return len(set(s))==n"}
{"instruction": "Write a Python script to multiply all digits of a number until a single digit remains.", "response": "def reduce_product(n): import math; p=n; while p>9: p=math.prod(int(d) for d in str(p)); return p"}
{"instruction": "Write a Python function to rotate a string to the right by k steps.", "response": "def rotate_right(s,k): k=k%len(s); return s[-k:]+s[:-k]"}
{"instruction": "Write a Python script to generate a list of all 3-digit numbers with non-repeating digits.", "response": "def unique_3digit(): return [n for n in range(100,1000) if len(set(str(n)))==3]"}
{"instruction": "Write a Python function to count the number of consonants in a string.", "response": "def count_consonants(s): return sum(c.lower() in 'bcdfghjklmnpqrstvwxyz' for c in s)"}
{"instruction": "Write a Python script to remove all list items that are not integers.", "response": "def remove_nonints(lst): return [x for x in lst if isinstance(x,int)]"}
{"instruction": "Write a Python function to count how many substrings of length 2 exist in a string.", "response": "def count_len2_subs(s): return len(s)-1 if len(s)>1 else 0"}
{"instruction": "Write a Python script to remove all words from a sentence that contain numbers.", "response": "def remove_num_words(s): return ' '.join(w for w in s.split() if not any(c.isdigit() for c in w))"}
{"instruction": "Write a Python function to return the length of the longest palindromic substring.", "response": "def longest_palindrome(s): return max([s[i:j] for i in range(len(s)) for j in range(i+1,len(s)+1) if s[i:j]==s[i:j][::-1]], key=len, default='')"}
{"instruction": "Write a Python script to replace each number in a list with its position in the sorted version.", "response": "def rank_positions(lst): sorted_lst=sorted(lst); return [sorted_lst.index(x) for x in lst]"}
{"instruction": "Write a Python function to check if all elements in a list are divisible by the same number.", "response": "def same_divisor(lst): from math import gcd; from functools import reduce; g=reduce(gcd,lst); return all(x%g==0 for x in lst)"}
{"instruction": "Write a Python script to find all strings in a list that are anagrams of each other.", "response": "def find_anagrams(lst): from collections import defaultdict; d=defaultdict(list); [d[''.join(sorted(w))].append(w) for w in lst]; return [v for v in d.values() if len(v)>1]"}
{"instruction": "Write a Python function to return the most common element in a list without using collections.", "response": "def most_common(lst): return max(set(lst), key=lst.count)"}
{"instruction": "Write a Python script to flatten a 2D list into a 1D list using a loop.", "response": "def flatten_2d(lst): res=[]; [res.extend(row) for row in lst]; return res"}
{"instruction": "Write a Python function to remove every vowel from a string except the first one.", "response": "def remove_vowels_except_first(s): seen=False; return ''.join(c if not seen and c.lower() in 'aeiou' else (c if c.lower() not in 'aeiou' else '') for c in s)"}
{"instruction": "Write a Python script to add a character between each character in a string.", "response": "def insert_between(s,char): return char.join(s)"}
{"instruction": "Write a Python function to test if a number is the reverse of its binary form.", "response": "def is_reverse_binary(n): return n==int(bin(n)[2:][::-1],2)"}
{"instruction": "Write a Python script to check if a word is the same forwards and backwards, ignoring case.", "response": "def is_palindrome_ignore_case(s): return s.lower()==s[::-1].lower()"}
{"instruction": "Write a Python function to remove the last n characters from a string.", "response": "def remove_last_n(s,n): return s[:-n]"}
{"instruction": "Write a Python script to generate a list of tuples from a string and its indices.", "response": "def tuple_indices(s): return list(enumerate(s))"}
{"instruction": "Write a Python function to convert a mixed string to lowercase and remove digits.", "response": "def lower_nodigits(s): return ''.join(c.lower() for c in s if not c.isdigit())"}
{"instruction": "Write a Python script to return every second word in a sentence.", "response": "def every_second_word(s): return s.split()[1::2]"}
{"instruction": "Write a Python function to sort the digits of a number in descending order.", "response": "def sort_digits_desc(n): return int(''.join(sorted(str(n),reverse=True)))"}
{"instruction": "Write a Python script to test whether a list contains only prime numbers.", "response": "def all_primes(lst): from math import isqrt; return all(x>1 and all(x%i for i in range(2,isqrt(x)+1)) for x in lst)"}
{"instruction": "Write a Python function to alternate numbers in a list from the start and end toward the middle.", "response": "def alternate_start_end(lst): return [lst.pop(0) if i%2==0 else lst.pop() for i in range(len(lst))]"}
{"instruction": "Write a Python script to count the number of times a digit appears in all numbers from 1 to n.", "response": "def count_digit_occurrences(n,d): return sum(str(i).count(str(d)) for i in range(1,n+1))"}
{"instruction": "Write a Python function to replace repeated letters in a string with the number of their repetitions.", "response": "def replace_repeats(s): return ''.join(str(s[:i].count(c)+1) if s.count(c)>1 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to find the longest increasing subsequence of digits in a number.", "response": "def longest_inc_seq(n): s=str(n); res, temp = '', ''; for i in range(len(s)): temp+=s[i]; if i==len(s)-1 or s[i]>=s[i+1]: res=max(res,temp,key=len); temp=''; return res"}
{"instruction": "Write a Python function to reverse a string but preserve the positions of special characters.", "response": "def reverse_preserve_special(s): l,r=list(s),len(s)-1; i=0; while i<r: if not l[i].isalpha(): i+=1; continue; if not l[r].isalpha(): r-=1; continue; l[i],l[r]=l[r],l[i]; i+=1; r-=1; return ''.join(l)"}
{"instruction": "Write a Python script to create a dictionary of character counts using a loop.", "response": "def char_counts(s): d={}; [d.update({c:d.get(c,0)+1}) for c in s]; return d"}
{"instruction": "Write a Python function to return a list of numbers whose digits sum to an even number.", "response": "def digit_sum_even(lst): return [n for n in lst if sum(int(d) for d in str(n))%2==0]"}
{"instruction": "Write a Python script to replace all even digits in a number with zero.", "response": "def zero_even_digits(n): return int(''.join('0' if int(d)%2==0 else d for d in str(n)))"}
{"instruction": "Write a Python function to return True if two lists contain the same elements, regardless of order.", "response": "def same_elements(lst1,lst2): return sorted(lst1)==sorted(lst2)"}
{"instruction": "Write a Python script to count how many words in a string start and end with the same letter.", "response": "def same_start_end(s): return sum(w[0].lower()==w[-1].lower() for w in s.split() if len(w)>1)"}
{"instruction": "Write a Python function to compute the factorial of each digit in a number and sum the results.", "response": "def sum_factorial_digits(n): from math import factorial; return sum(factorial(int(d)) for d in str(n))"}
{"instruction": "Write a Python script to remove characters from a string that are not in a given set.", "response": "def keep_only(s,allowed): return ''.join(c for c in s if c in allowed)"}
{"instruction": "Write a Python function to format a number with commas as thousand separators.", "response": "def format_commas(n): return '{:,}'.format(n)"}
{"instruction": "Write a Python script to reverse all words of even length in a sentence.", "response": "def reverse_even_words(s): return ' '.join(w[::-1] if len(w)%2==0 else w for w in s.split())"}
{"instruction": "Write a Python function to calculate the mean of only positive numbers in a list.", "response": "def mean_positives(lst): pos=[x for x in lst if x>0]; return sum(pos)/len(pos) if pos else 0"}
{"instruction": "Write a Python script to count how many items in a list are multiples of 3 or 5.", "response": "def count_3_5(lst): return sum(1 for x in lst if x%3==0 or x%5==0)"}
{"instruction": "Write a Python function to create a list of digits from a string and sum them.", "response": "def sum_digits_from_str(s): return sum(int(c) for c in s if c.isdigit())"}
{"instruction": "Write a Python script to test whether a string contains only letters and whitespace.", "response": "def only_letters_spaces(s): return all(c.isalpha() or c.isspace() for c in s)"}
{"instruction": "Write a Python function to return the longest string in a list that starts with a vowel.", "response": "def longest_vowel_start(lst): return max((s for s in lst if s[0].lower() in 'aeiou'), key=len, default='')"}
{"instruction": "Write a Python script to return the reverse of a list without using slicing.", "response": "def reverse_list(lst): res=[]; [res.insert(0,x) for x in lst]; return res"}
{"instruction": "Write a Python function to convert a list of integers to a binary string representation.", "response": "def list_to_binary(lst): return ''.join(bin(x)[2:] for x in lst)"}
{"instruction": "Write a Python script to build a dictionary from a list where keys are items and values are counts.", "response": "def count_dict(lst): d={}; [d.update({x:d.get(x,0)+1}) for x in lst]; return d"}
{"instruction": "Write a Python function to return the maximum difference between adjacent elements in a list.", "response": "def max_adj_diff(lst): return max(abs(a-b) for a,b in zip(lst,lst[1:]))"}
{"instruction": "Write a Python script to find all digits that appear more than once in a number.", "response": "def repeated_digits(n): return [d for d in set(str(n)) if str(n).count(d)>1]"}
{"instruction": "Write a Python function to extract all lowercase substrings from a string.", "response": "def lowercase_subs(s): import re; return re.findall(r'[a-z]+',s)"}
{"instruction": "Write a Python script to identify all indexes where a list’s value increases.", "response": "def increasing_indexes(lst): return [i for i in range(1,len(lst)) if lst[i]>lst[i-1]]"}
{"instruction": "Write a Python function to convert a string to lowercase without using lower().", "response": "def to_lower(s): return ''.join(chr(ord(c)+32) if 'A'<=c<='Z' else c for c in s)"}
{"instruction": "Write a Python script to return a string made from characters at Fibonacci index positions.", "response": "def fib_chars(s): fib, res, i = [0,1], ''; while fib[-1]<len(s): fib.append(fib[-1]+fib[-2]); return ''.join(s[i] for i in fib if i<len(s))"}
{"instruction": "Write a Python function to round float numbers in a list to the nearest even number.", "response": "def round_even(lst): return [int(round(x/2)*2) for x in lst]"}
{"instruction": "Write a Python script to count the number of transitions between characters in a string.", "response": "def count_transitions(s): return sum(s[i]!=s[i+1] for i in range(len(s)-1))"}
{"instruction": "Write a Python function to reverse every third word in a sentence.", "response": "def reverse_third(sentence): w=sentence.split(); return ' '.join(w[i][::-1] if i%3==2 else w[i] for i in range(len(w)))"}
{"instruction": "Write a Python script to split a number into groups of equal digit count.", "response": "def split_equal_digits(n): s=str(n); l=len(s); return [s[i:i+(l//2)] for i in range(0,l,l//2)]"}
{"instruction": "Write a Python function to replace all punctuation in a string with underscores.", "response": "def punct_to_underscore(s): import string; return ''.join('_' if c in string.punctuation else c for c in s)"}
{"instruction": "Write a Python script to remove all items from a list that are strings.", "response": "def remove_strings(lst): return [x for x in lst if not isinstance(x,str)]"}
{"instruction": "Write a Python function to print the character that appears most often consecutively in a string.", "response": "def max_consec_char(s): from itertools import groupby; return max(((k,len(list(g))) for k,g in groupby(s)), key=lambda x:x[1])[0]"}
{"instruction": "Write a Python script to determine if a string contains characters in alphabetical order.", "response": "def is_alpha_order(s): s=''.join(filter(str.isalpha,s.lower())); return s==''.join(sorted(s))"}
{"instruction": "Write a Python function to count the number of characters that appear in both a string and its reverse.", "response": "def count_shared_with_reverse(s): return sum(c in s[::-1] for c in set(s))"}
{"instruction": "Write a Python script to create a mirrored version of each word in a sentence.", "response": "def mirror_words(s): return ' '.join(w+w[::-1] for w in s.split())"}
{"instruction": "Write a Python function to calculate how many steps are needed to reduce a number to zero by subtracting its digits.", "response": "def reduce_to_zero(n): steps=0; while n>0: n-=sum(int(d) for d in str(n)); steps+=1; return steps"}
{"instruction": "Write a Python script to return all elements of a list that are below the list's average.", "response": "def below_avg(lst): avg=sum(lst)/len(lst); return [x for x in lst if x<avg]"}
{"instruction": "Write a Python function to replace every third character in a string with a space.", "response": "def space_every_third(s): return ''.join(' ' if (i+1)%3==0 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to get the sum of all digits of a number until the sum becomes a single digit.", "response": "def digit_root(n): return n if n<10 else digit_root(sum(int(d) for d in str(n)))"}
{"instruction": "Write a Python function to find the maximum length of consecutive characters in a string.", "response": "def max_consec_len(s): from itertools import groupby; return max(len(list(g)) for _,g in groupby(s))"}
{"instruction": "Write a Python script to check if a string is the same after removing all non-alphabetic characters.", "response": "def clean_alpha_palindrome(s): f=''.join(filter(str.isalpha,s)).lower(); return f==f[::-1]"}
{"instruction": "Write a Python function to remove every item from a list that has more than 4 digits.", "response": "def remove_big(lst): return [x for x in lst if not (isinstance(x,int) and x>9999)]"}
{"instruction": "Write a Python script to capitalize every third word in a sentence.", "response": "def cap_third(sentence): w=sentence.split(); return ' '.join(w[i].capitalize() if i%3==2 else w[i] for i in range(len(w)))"}
{"instruction": "Write a Python function to split a string into chunks using a given delimiter.", "response": "def split_on_delim(s,d): return s.split(d)"}
{"instruction": "Write a Python script to return a new list containing the length of each word in a sentence.", "response": "def word_lengths(s): return [len(w) for w in s.split()]"}
{"instruction": "Write a Python function to return the longest substring without repeating characters.", "response": "def longest_unique_substring(s): res, curr = '', ''; for c in s: curr = curr[curr.index(c)+1:] + c if c in curr else curr + c; res = max(res, curr, key=len); return res"}
{"instruction": "Write a Python script to check if a word contains all unique vowels.", "response": "def has_all_vowels(w): return all(v in w.lower() for v in 'aeiou')"}
{"instruction": "Write a Python function to return a dictionary where keys are vowels and values are their counts in a string.", "response": "def vowel_count(s): return {v:s.lower().count(v) for v in 'aeiou'}"}
{"instruction": "Write a Python script to return all the digits that appear in the same position in two strings.", "response": "def same_pos_digits(s1,s2): return [i for i in range(min(len(s1),len(s2))) if s1[i]==s2[i] and s1[i].isdigit()]"}
{"instruction": "Write a Python function to replace all capital letters in a string with their lowercase counterparts surrounded by asterisks.", "response": "def caps_to_stars(s): return ''.join(f'*{c.lower()}*' if c.isupper() else c for c in s)"}
{"instruction": "Write a Python script to print a staircase of numbers based on input height.", "response": "def staircase(h): [print(''.join(str(i+1) for _ in range(i+1))) for i in range(h)]"}
{"instruction": "Write a Python function to extract the initials from a sentence.", "response": "def get_initials(s): return ''.join(w[0].upper() for w in s.split())"}
{"instruction": "Write a Python script to add one to every digit in a number, wrapping 9 to 0.", "response": "def add_one_wrap(n): return int(''.join(str((int(d)+1)%10) for d in str(n)))"}
{"instruction": "Write a Python function to check if all digits of a number are the same.", "response": "def all_same_digits(n): s=str(n); return all(c==s[0] for c in s)"}
{"instruction": "Write a Python script to return a new list with every string reversed and capitalized.", "response": "def reverse_caps(lst): return [s[::-1].upper() for s in lst]"}
{"instruction": "Write a Python function to return a list of tuples with element and its square.", "response": "def square_tuples(lst): return [(x,x**2) for x in lst]"}
{"instruction": "Write a Python script to remove all repeated substrings of length 2 in a string.", "response": "def remove_repeat_2(s): return ''.join(s[i] for i in range(len(s)-1) if s[i:i+2]!=s[i-2:i]) + s[-1]"}
{"instruction": "Write a Python function to check if a string contains any characters repeated exactly twice.", "response": "def has_exactly_two(s): return any(s.count(c)==2 for c in set(s))"}
{"instruction": "Write a Python script to generate a list of characters that occur more than once in a string.", "response": "def repeated_chars(s): return [c for c in set(s) if s.count(c)>1]"}
{"instruction": "Write a Python function to split a string on spaces and reverse the order of words.", "response": "def reverse_words(s): return ' '.join(s.split()[::-1])"}
{"instruction": "Write a Python script to test whether a list contains a specified subsequence.", "response": "def has_subseq(lst,sub): return any(lst[i:i+len(sub)]==sub for i in range(len(lst)-len(sub)+1))"}
{"instruction": "Write a Python function to compute the sum of all odd digits in a number.", "response": "def sum_odd_digits(n): return sum(int(d) for d in str(n) if int(d)%2==1)"}
{"instruction": "Write a Python script to replace the second character of each word in a sentence with '*'.", "response": "def star_second(s): return ' '.join(w[0]+'*'+w[2:] if len(w)>1 else w for w in s.split())"}
{"instruction": "Write a Python function to return the sum of differences between consecutive elements in a list.", "response": "def sum_diffs(lst): return sum(abs(a-b) for a,b in zip(lst,lst[1:]))"}
{"instruction": "Write a Python script to replace each digit in a string with the square of that digit.", "response": "def square_digits(s): return ''.join(str(int(c)**2) if c.isdigit() else c for c in s)"}
{"instruction": "Write a Python function to reverse each word in a sentence without changing their order.", "response": "def reverse_words(s): return ' '.join(w[::-1] for w in s.split())"}
{"instruction": "Write a Python script to check if a number is divisible by the sum of its digits using a while loop.", "response": "def is_div_by_sum(n): s=n; while s>9: s=sum(int(d) for d in str(n)); return n%s==0"}
{"instruction": "Write a Python function to replace each digit in a string with its corresponding English word.", "response": "def digits_to_words(s): d='zero one two three four five six seven eight nine'.split(); return ''.join(d[int(c)] if c.isdigit() else c for c in s)"}
{"instruction": "Write a Python script to convert each character in a string to its Unicode value.", "response": "def to_unicode(s): return [ord(c) for c in s]"}
{"instruction": "Write a Python function to find the index of the second largest number in a list.", "response": "def second_largest_idx(lst): return lst.index(sorted(set(lst))[-2]) if len(set(lst))>1 else -1"}
{"instruction": "Write a Python script to return a list of unique elements that appear in both lists.", "response": "def common_unique(l1,l2): return list(set(l1)&set(l2))"}
{"instruction": "Write a Python function to remove all characters from a string except letters and numbers.", "response": "def clean_string(s): return ''.join(c for c in s if c.isalnum())"}
{"instruction": "Write a Python script to test whether a number is equal to the reverse of the sum of its digits.", "response": "def rev_sum_digits(n): return n == int(str(sum(int(d) for d in str(n)))[::-1])"}
{"instruction": "Write a Python function to count the number of even-length words in a sentence.", "response": "def count_even_words(s): return sum(len(w)%2==0 for w in s.split())"}
{"instruction": "Write a Python script to generate a sequence of letters from A to Z without using a loop.", "response": "def az(): return [chr(i) for i in range(65,91)]"}
{"instruction": "Write a Python function to check if a list of strings is sorted by length.", "response": "def is_sorted_by_len(lst): return lst == sorted(lst, key=len)"}
{"instruction": "Write a Python script to print all pairs in a list whose product is even.", "response": "def even_pairs(lst): print([(a,b) for i,a in enumerate(lst) for b in lst[i+1:] if a*b%2==0])"}
{"instruction": "Write a Python function to extract all palindromes from a list of words.", "response": "def palindromes(lst): return [w for w in lst if w==w[::-1]]"}
{"instruction": "Write a Python script to convert all elements in a list to lowercase strings.", "response": "def to_lowercase(lst): return [str(x).lower() for x in lst]"}
{"instruction": "Write a Python function to return the string with the highest number of vowels from a list.", "response": "def most_vowels(lst): return max(lst, key=lambda w: sum(1 for c in w.lower() if c in 'aeiou'))"}
{"instruction": "Write a Python script to remove every character from a string that is a vowel or a digit.", "response": "def strip_vowels_digits(s): return ''.join(c for c in s if not c.isdigit() and c.lower() not in 'aeiou')"}
{"instruction": "Write a Python function to find the common suffix among a list of strings.", "response": "def common_suffix(lst): return ''.join(x[0] for x in zip(*map(reversed,lst)) if len(set(x))==1)[::-1]"}
{"instruction": "Write a Python script to test whether a list has at least one even number.", "response": "def has_even(lst): return any(x%2==0 for x in lst)"}
{"instruction": "Write a Python function to calculate the average of digits of a number.", "response": "def avg_digits(n): d=[int(c) for c in str(n)]; return sum(d)/len(d)"}
{"instruction": "Write a Python script to test if all characters in a string appear the same number of times.", "response": "def same_freq(s): return len(set(s.count(c) for c in set(s)))==1"}
{"instruction": "Write a Python function to return True if any number in a list is the square of another number.", "response": "def any_square(lst): return any(x==y**2 for x in lst for y in lst)"}
{"instruction": "Write a Python script to remove special characters and digits from a list of strings.", "response": "def clean_list(lst): import re; return [re.sub(r'[^A-Za-z ]','',x) for x in lst]"}
{"instruction": "Write a Python function to count the number of repeated digits in a number.", "response": "def repeated_digits(n): return sum(str(n).count(d)>1 for d in set(str(n)))"}
{"instruction": "Write a Python script to convert a string into a list where each letter is repeated twice.", "response": "def repeat_letters(s): return [c*2 for c in s]"}
{"instruction": "Write a Python function to return all elements in a list that appear only once.", "response": "def uniques(lst): return [x for x in lst if lst.count(x)==1]"}
{"instruction": "Write a Python script to round all numbers in a list to the nearest multiple of 3.", "response": "def round_to_3(lst): return [round(x/3)*3 for x in lst]"}
{"instruction": "Write a Python function to return the word with the most consonants in a sentence.", "response": "def most_consonants(s): return max(s.split(), key=lambda w: sum(c.lower() not in 'aeiou' and c.isalpha() for c in w))"}
{"instruction": "Write a Python script to add all digits in a string until a single-digit result is obtained.", "response": "def sum_digits_single(s): total = sum(int(c) for c in s if c.isdigit()); return total if total<10 else sum_digits_single(str(total))"}
{"instruction": "Write a Python function to return a dictionary with character counts for only vowels in a string.", "response": "def vowel_counts(s): return {v:s.lower().count(v) for v in 'aeiou'}"}
{"instruction": "Write a Python script to swap the positions of the first and last digits in a number.", "response": "def swap_first_last(n): s=str(n); return int(s[-1]+s[1:-1]+s[0]) if len(s)>1 else n"}
{"instruction": "Write a Python function to reverse the digits of a number and check if the result is a prime number.", "response": "def reverse_prime(n): from sympy import isprime; return isprime(int(str(n)[::-1]))"}
{"instruction": "Write a Python script to filter a list to only values that are 3-digit integers.", "response": "def filter_3digit(lst): return [x for x in lst if isinstance(x,int) and 100<=x<=999]"}
{"instruction": "Write a Python function to calculate the product of all digits in a number until a single-digit result.", "response": "def prod_digits_single(n): p=1; [p:=p*int(d) for d in str(n) if d!='0']; return p if p<10 else prod_digits_single(p)"}
{"instruction": "Write a Python script to count how many elements in a list are divisible by both 2 and 5.", "response": "def count_div2_5(lst): return sum(1 for x in lst if x%10==0)"}
{"instruction": "Write a Python function to check if a sentence contains all 5 vowels at least once.", "response": "def all_vowels(s): return all(v in s.lower() for v in 'aeiou')"}
{"instruction": "Write a Python script to return a list of booleans where each element is True if its index is even.", "response": "def even_index_bools(lst): return [i%2==0 for i in range(len(lst))]"}
{"instruction": "Write a Python function to return the string formed by the last letters of each word in a sentence.", "response": "def last_letters(s): return ''.join(w[-1] for w in s.split())"}
{"instruction": "Write a Python script to remove all characters from a string that appear more than twice.", "response": "def remove_above_two(s): return ''.join(c for c in s if s.count(c)<=2)"}
{"instruction": "Write a Python function to replace each letter in a string with its mirror in the alphabet.", "response": "def mirror_alpha(s): return ''.join(chr(219-ord(c)) if c.isalpha() else c for c in s.lower())"}
{"instruction": "Write a Python script to filter a list of strings to only those that contain no repeating characters.", "response": "def no_repeat_strings(lst): return [s for s in lst if len(set(s))==len(s)]"}
{"instruction": "Write a Python function to return True if a list contains elements in strictly alternating order.", "response": "def strict_alt(lst): return all((lst[i]>lst[i-1])!=(lst[i]>lst[i+1]) for i in range(1,len(lst)-1))"}
{"instruction": "Write a Python script to count how many elements in a list are equal to their index.", "response": "def index_equals_val(lst): return sum(1 for i,x in enumerate(lst) if i==x)"}
{"instruction": "Write a Python function to reverse the order of words in a sentence if the sentence contains more than 5 words.", "response": "def reverse_if_long(s): w=s.split(); return ' '.join(w[::-1]) if len(w)>5 else s"}
{"instruction": "Write a Python script to replace every vowel in a string with the letter 'z'.", "response": "def z_vowels(s): return ''.join('z' if c.lower() in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python function to convert each digit of a number to the corresponding Roman numeral.", "response": "def to_roman_digits(n): roman = ['','I','II','III','IV','V','VI','VII','VIII','IX']; return ''.join(roman[int(d)] for d in str(n))"}
{"instruction": "Write a Python script to test whether a list contains elements only of the same type.", "response": "def same_type(lst): return all(type(x)==type(lst[0]) for x in lst)"}
{"instruction": "Write a Python function to check if two numbers share the same set of digits.", "response": "def same_digits(x,y): return set(str(x))==set(str(y))"}
{"instruction": "Write a Python script to create a dictionary of word lengths from a sentence.", "response": "def word_len_dict(s): return {w:len(w) for w in s.split()}"}
{"instruction": "Write a Python function to rotate the digits of a number until it becomes divisible by 3.", "response": "def rotate_div3(n): s=str(n); return any(int(s[i:]+s[:i])%3==0 for i in range(len(s)))"}
{"instruction": "Write a Python script to calculate the difference between the sum of even and odd digits in a number.", "response": "def even_odd_diff(n): d=[int(x) for x in str(n)]; return sum(x for x in d if x%2==0) - sum(x for x in d if x%2==1)"}
{"instruction": "Write a Python function to sort words in a sentence by their vowel count.", "response": "def sort_by_vowel_count(s): return ' '.join(sorted(s.split(), key=lambda w: sum(c in 'aeiouAEIOU' for c in w)))"}
{"instruction": "Write a Python script to check if a string contains only one type of vowel.", "response": "def one_vowel_type(s): return len(set(c for c in s.lower() if c in 'aeiou'))==1"}
{"instruction": "Write a Python function to convert a list of characters to alternating case, starting with lowercase.", "response": "def alt_case(lst): return [c.lower() if i%2==0 else c.upper() for i,c in enumerate(lst)]"}
{"instruction": "Write a Python script to print all characters in a string that have ASCII values divisible by 3.", "response": "def ascii_div3(s): print([c for c in s if ord(c)%3==0])"}
{"instruction": "Write a Python function to check if the total number of characters in a list of strings is a prime number.", "response": "def total_prime(lst): from sympy import isprime; return isprime(sum(len(x) for x in lst))"}
{"instruction": "Write a Python script to return the maximum sum of any 3 consecutive numbers in a list.", "response": "def max_sum_3(lst): return max(sum(lst[i:i+3]) for i in range(len(lst)-2))"}
{"instruction": "Write a Python function to count how many substrings in a string start and end with the same character.", "response": "def substr_same_ends(s): return sum(s[i]==s[j] for i in range(len(s)) for j in range(i,len(s)))"}
{"instruction": "Write a Python script to capitalize the last letter of each word in a sentence.", "response": "def cap_last(s): return ' '.join(w[:-1]+w[-1].upper() if w else '' for w in s.split())"}
{"instruction": "Write a Python function to return a list of characters that appear an odd number of times in a string.", "response": "def odd_chars(s): return [c for c in set(s) if s.count(c)%2==1]"}
{"instruction": "Write a Python script to create a reversed version of a string with characters spaced out by a dash.", "response": "def spaced_reverse(s): return '-'.join(reversed(s))"}
{"instruction": "Write a Python function to return True if a string has the same characters as its reverse but in different order.", "response": "def same_chars_diff_order(s): return sorted(s)==sorted(s[::-1]) and s!=s[::-1]"}
{"instruction": "Write a Python script to remove the first occurrence of each character in a string.", "response": "def remove_firsts(s): return ''.join(s.replace(c,'',1) for c in set(s))"}
{"instruction": "Write a Python function to find the digit that appears most frequently across a list of numbers.", "response": "def most_freq_digit(lst): from collections import Counter; return Counter(''.join(map(str,lst))).most_common(1)[0][0]"}
{"instruction": "Write a Python script to return the second smallest value in a list without sorting.", "response": "def second_smallest(lst): m=float('inf'); sm=float('inf'); [m,sm:=(x, m) if x<m else (m, x) if x<sm and x!=m else (m,sm) for x in lst]; return sm"}
{"instruction": "Write a Python function to return all words in a sentence that contain exactly 4 letters.", "response": "def words_len4(s): return [w for w in s.split() if len(w)==4]"}
{"instruction": "Write a Python script to count how many strings in a list contain the same first and last letter.", "response": "def same_first_last(lst): return sum(1 for w in lst if w[0]==w[-1])"}
{"instruction": "Write a Python function to split a number into two numbers alternating its digits.", "response": "def alt_digits(n): s=str(n); return int(s[::2]), int(s[1::2])"}
{"instruction": "Write a Python script to determine if a string can be rearranged into a palindrome.", "response": "def can_form_palindrome(s): from collections import Counter; return sum(v%2 for v in Counter(s).values())<=1"}
{"instruction": "Write a Python function to sum the digits of a number raised to the power of its length.", "response": "def sum_digits_pow(n): return sum(int(d) for d in str(n**len(str(n))))"}
{"instruction": "Write a Python script to convert a string of digits into a number without using int().", "response": "def str_to_int(s): return sum((ord(c)-48)*10**i for i,c in enumerate(reversed(s)))"}
{"instruction": "Write a Python function to return the largest difference between any two digits in a number.", "response": "def max_digit_diff(n): d=[int(x) for x in str(n)]; return max(d)-min(d)"}
{"instruction": "Write a Python script to check if a string contains three consecutive vowels.", "response": "def has_3vowels(s): return any(all(s[i+k] in 'aeiou' for k in range(3)) for i in range(len(s)-2))"}
{"instruction": "Write a Python function to alternate between returning the smallest and largest remaining element in a list.", "response": "def alt_min_max(lst): res=[]; lst=sorted(lst); while lst: res.append(lst.pop(0) if len(res)%2==0 else lst.pop()); return res"}
{"instruction": "Write a Python script to return a list of the squares of digits in a number in reverse order.", "response": "def square_digits_rev(n): return [int(d)**2 for d in reversed(str(n))]"}
{"instruction": "Write a Python function to count how many numbers in a list have exactly 2 digits.", "response": "def count_2digit(lst): return sum(10<=abs(x)<100 for x in lst)"}
{"instruction": "Write a Python script to test whether a string has alternating uppercase and lowercase characters.", "response": "def alt_case_check(s): return all(s[i].isupper()!=s[i+1].isupper() for i in range(len(s)-1))"}
{"instruction": "Write a Python function to calculate the number of distinct characters in the middle of a string.", "response": "def distinct_middle(s): m=s[1:-1]; return len(set(m))"}
{"instruction": "Write a Python script to find all numbers less than 100 that are palindromes in both base 10 and base 2.", "response": "def pal_base10_2(): return [x for x in range(1,100) if str(x)==str(x)[::-1] and bin(x)[2:]==bin(x)[2:][::-1]]"}
{"instruction": "Write a Python function to check whether a string is a semi-palindrome (first half == reversed second half).", "response": "def semi_palindrome(s): l=len(s)//2; return s[:l]==s[-1:-l-1:-1]"}
{"instruction": "Write a Python script to return the number of odd characters in a string.", "response": "def count_odd_chars(s): return sum(ord(c)%2==1 for c in s)"}
{"instruction": "Write a Python function to find all characters that appear in both halves of a string.", "response": "def shared_halves(s): h=len(s)//2; return [c for c in set(s[:h]) if c in s[-h:]]"}
{"instruction": "Write a Python script to remove every digit that appears more than once in a number.", "response": "def remove_dup_digits(n): return int(''.join(d for d in str(n) if str(n).count(d)==1))"}
{"instruction": "Write a Python function to check if a string alternates between digits and letters.", "response": "def alt_digit_letter(s): return all(s[i].isdigit() != s[i+1].isdigit() for i in range(len(s)-1))"}
{"instruction": "Write a Python script to count the total number of matching characters in the same position between two strings.", "response": "def match_positions(s1,s2): return sum(a==b for a,b in zip(s1,s2))"}
{"instruction": "Write a Python function to return the index of the first vowel in a string.", "response": "def first_vowel_idx(s): for i,c in enumerate(s): return i if c.lower() in 'aeiou' else -1"}
{"instruction": "Write a Python script to determine if the length of a word is a prime number.", "response": "def len_is_prime(w): from sympy import isprime; return isprime(len(w))"}
{"instruction": "Write a Python function to remove every vowel that appears after the first vowel in a string.", "response": "def remove_vowels_after_first(s): f=False; return ''.join(c if c.lower() not in 'aeiou' or not f else '' if f else (f:=True,c)[1] for c in s)"}
{"instruction": "Write a Python script to return True if all strings in a list are palindromes.", "response": "def all_palindromes(lst): return all(w==w[::-1] for w in lst)"}
{"instruction": "Write a Python function to find the most common last character in a list of strings.", "response": "def common_last(lst): from collections import Counter; return Counter(w[-1] for w in lst).most_common(1)[0][0]"}
{"instruction": "Write a Python script to reverse every word that starts with a vowel.", "response": "def reverse_vowel_words(s): return ' '.join(w[::-1] if w[0].lower() in 'aeiou' else w for w in s.split())"}
{"instruction": "Write a Python function to return a list of even-length palindromes from a list of strings.", "response": "def even_palindromes(lst): return [w for w in lst if len(w)%2==0 and w==w[::-1]]"}
{"instruction": "Write a Python script to create a dictionary from a string where keys are letters and values are positions.", "response": "def str_to_dict(s): return {c:i for i,c in enumerate(s)}"}
{"instruction": "Write a Python function to test whether a list of numbers forms a geometric sequence.", "response": "def is_geo_seq(lst): return all(lst[i]/lst[i-1]==lst[1]/lst[0] for i in range(2,len(lst)))"}
{"instruction": "Write a Python script to extract digits from a string and sort them in ascending order.", "response": "def extract_sort_digits(s): return sorted(int(c) for c in s if c.isdigit())"}
{"instruction": "Write a Python function to replace repeated vowels in a string with incrementing numbers.", "response": "def replace_repeated_vowels(s): seen={}; out=''; for c in s: out+=str(seen[c])+1 if c in 'aeiou' and c in seen else c; seen[c]=seen.get(c,0)+1; return out"}
{"instruction": "Write a Python script to group words by their starting letter in a dictionary.", "response": "def group_by_letter(lst): from collections import defaultdict; d=defaultdict(list); [d[w[0]].append(w) for w in lst]; return dict(d)"}
{"instruction": "Write a Python function to return a sorted list of all unique digits in a string.", "response": "def sorted_unique_digits(s): return sorted(set(int(c) for c in s if c.isdigit()))"}
{"instruction": "Write a Python script to convert each word in a sentence to Title Case manually.", "response": "def to_title(s): return ' '.join(w[0].upper()+w[1:].lower() if w else '' for w in s.split())"}
{"instruction": "Write a Python function to determine if a list can be split into two equal sum parts.", "response": "def can_split_equal(lst): return any(sum(lst[:i])==sum(lst[i:]) for i in range(1,len(lst)))"}
{"instruction": "Write a Python script to shift all digits in a number one position to the right.", "response": "def shift_digits_right(n): s=str(n); return int(s[-1]+s[:-1])"}
{"instruction": "Write a Python function to return True if all words in a sentence have unique lengths.", "response": "def unique_word_lengths(s): l=[len(w) for w in s.split()]; return len(set(l))==len(l)"}
{"instruction": "Write a Python script to find the longest substring with alternating vowels and consonants.", "response": "def longest_alt_vowel_consonant(s): import re; return max(re.findall(r'(?i)(?:(?:[aeiou][^aeiou])|(?:[^aeiou][aeiou]))+', s), key=len, default='')"}
{"instruction": "Write a Python function to return the average of ASCII values in a string.", "response": "def avg_ascii(s): return sum(map(ord,s))/len(s) if s else 0"}
{"instruction": "Write a Python script to filter out all words in a list that contain repeated characters.", "response": "def no_repeats(lst): return [w for w in lst if len(set(w))==len(w)]"}
{"instruction": "Write a Python function to remove the first and last vowel in a string.", "response": "def remove_first_last_vowel(s): v=[i for i,c in enumerate(s) if c.lower() in 'aeiou']; return s[:v[0]]+s[v[0]+1:v[-1]]+s[v[-1]+1:] if len(v)>=2 else s"}
{"instruction": "Write a Python script to reverse every word in a sentence that contains a digit.", "response": "def reverse_words_with_digit(s): return ' '.join(w[::-1] if any(c.isdigit() for c in w) else w for w in s.split())"}
{"instruction": "Write a Python function to count how many times each vowel appears in alphabetical order.", "response": "def vowel_order_count(s): return [s.lower().count(v) for v in 'aeiou']"}
{"instruction": "Write a Python script to convert every third letter in a sentence to uppercase.", "response": "def every_third_upper(s): return ''.join(c.upper() if i%3==2 else c for i,c in enumerate(s))"}
{"instruction": "Write a Python function to return a list of integers that are palindromes when doubled.", "response": "def palindromes_when_doubled(lst): return [x for x in lst if str(x*2)==str(x*2)[::-1]]"}
{"instruction": "Write a Python script to identify all positions in a list where an item is greater than its neighbors.", "response": "def local_maxima(lst): return [i for i in range(1,len(lst)-1) if lst[i]>lst[i-1] and lst[i]>lst[i+1]]"}
{"instruction": "Write a Python function to replace each digit in a number with its cube.", "response": "def cube_digits(n): return int(''.join(str(int(d)**3) for d in str(n)))"}
{"instruction": "Write a Python script to extract all characters in a string that are not letters or numbers.", "response": "def non_alnum(s): return [c for c in s if not c.isalnum()]"}
{"instruction": "Write a Python function to return True if a word contains at least two different vowels.", "response": "def two_vowels(w): return len(set(c for c in w.lower() if c in 'aeiou'))>=2"}
{"instruction": "Write a Python script to remove every consonant that appears more than once in a string.", "response": "def remove_repeated_consonants(s): return ''.join(c for c in s if c.lower() in 'aeiou' or s.lower().count(c)==1)"}
{"instruction": "Write a Python function to sort a list of words by the number of distinct characters.", "response": "def sort_by_unique_chars(lst): return sorted(lst, key=lambda w: len(set(w)))"}
{"instruction": "Write a Python script to convert each word in a sentence to lowercase and reverse it.", "response": "def reverse_lower_words(s): return ' '.join(w.lower()[::-1] for w in s.split())"}
{"instruction": "Write a Python function to calculate the difference between the sum of vowels and consonants in a word.", "response": "def vowel_consonant_diff(w): v=sum(1 for c in w if c.lower() in 'aeiou'); c=sum(1 for c in w if c.isalpha() and c.lower() not in 'aeiou'); return v-c"}
{"instruction": "Write a Python script to replace every letter in a string with the previous letter in the alphabet.", "response": "def prev_letter(s): return ''.join(chr(ord(c)-1) if c.isalpha() else c for c in s)"}
{"instruction": "Write a Python function to return all strings in a list that are made entirely of vowels.", "response": "def only_vowel_words(lst): return [w for w in lst if all(c.lower() in 'aeiou' for c in w)]"}
{"instruction": "Write a Python script to split a number into two halves and reverse both.", "response": "def reverse_halves(n): s=str(n); h=len(s)//2; return s[:h][::-1]+s[h:][::-1]"}
{"instruction": "Write a Python function to return a string of only the characters at positions that are multiples of 3.", "response": "def chars_multiple_of_3(s): return ''.join(c for i,c in enumerate(s) if i%3==0)"}
{"instruction": "Write a Python script to check whether the first letter of every word in a sentence is a vowel.", "response": "def all_words_start_vowel(s): return all(w[0].lower() in 'aeiou' for w in s.split())"}
{"instruction": "Write a Python function to double every letter in a string except vowels.", "response": "def double_except_vowels(s): return ''.join(c*2 if c.lower() not in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python script to print all numbers from 1 to 100 that are divisible by 7 or 11.", "response": "def div_7_or_11(): print([x for x in range(1,101) if x%7==0 or x%11==0])"}
{"instruction": "Write a Python function to reverse a string but keep all numbers in the same positions.", "response": "def reverse_string_static_digits(s): digits=[(i,c) for i,c in enumerate(s) if c.isdigit()]; letters=[c for c in s if not c.isdigit()][::-1]; for i,c in digits: letters.insert(i,c); return ''.join(letters)"}
{"instruction": "Write a Python script to find the shortest word in a sentence containing at least two vowels.", "response": "def shortest_with_2vowels(s): return min((w for w in s.split() if sum(c in 'aeiou' for c in w)>=2), key=len, default='')"}
{"instruction": "Write a Python function to return the count of each digit in a number using a dictionary.", "response": "def digit_count_dict(n): from collections import Counter; return dict(Counter(str(n)))"}
{"instruction": "Write a Python script to test whether a sentence contains any repeated words.", "response": "def has_repeated_words(s): w=s.lower().split(); return len(w)!=len(set(w))"}
{"instruction": "Write a Python function to capitalize the second and fourth character of each word in a string.", "response": "def cap_2nd_4th(s): return ' '.join(''.join(c.upper() if i in [1,3] else c for i,c in enumerate(w)) for w in s.split())"}
{"instruction": "Write a Python script to extract all prime digits from a number.", "response": "def prime_digits(n): return [int(d) for d in str(n) if int(d) in [2,3,5,7]]"}
{"instruction": "Write a Python function to remove characters from a string that appear in another string.", "response": "def remove_from_other(a,b): return ''.join(c for c in a if c not in b)"}
{"instruction": "Write a Python script to print a staircase where each step is made of a repeated character.", "response": "def print_staircase(c, h): [print(c*(i+1)) for i in range(h)]"}
{"instruction": "Write a Python function to check if the first half of a string is the reverse of the second half.", "response": "def is_mirror_half(s): l=len(s)//2; return s[:l]==s[-1:-l-1:-1]"}
{"instruction": "Write a Python script to replace the last character of each word in a string with '!'.", "response": "def bangify_last_letter(s): return ' '.join(w[:-1]+'!' if w else '' for w in s.split())"}
{"instruction": "Write a Python function to return True if a string contains the word 'Python' regardless of case.", "response": "def contains_python(s): return 'python' in s.lower()"}
{"instruction": "Write a Python script to return the total number of characters between the first and last vowel in a word.", "response": "def chars_between_vowels(w): v=[i for i,c in enumerate(w) if c.lower() in 'aeiou']; return v[-1]-v[0]-1 if len(v)>=2 else 0"}
{"instruction": "Write a Python function to return the shortest string in a list containing all five vowels.", "response": "def shortest_with_all_vowels(lst): return min((w for w in lst if all(v in w for v in 'aeiou')), key=len, default='')"}
{"instruction": "Write a Python script to alternate letters in a string between uppercase and lowercase starting from the end.", "response": "def alt_from_end(s): return ''.join(c.upper() if i%2 else c.lower() for i,c in enumerate(reversed(s)))[::-1]"}
{"instruction": "Write a Python function to return True if a list of numbers alternates between even and odd.", "response": "def alt_even_odd(lst): return all((x%2)!=(lst[i+1]%2) for i,x in enumerate(lst[:-1]))"}
{"instruction": "Write a Python script to capitalize every other word in a sentence starting from the end.", "response": "def cap_every_other_from_end(s): w=s.split(); return ' '.join(w[::-1][::2][::-1] + [w[::-1][1::2][::-1]]).strip()"}
{"instruction": "Write a Python function to create a new string by interleaving two strings character by character.", "response": "def interleave_strings(a,b): return ''.join(x+y for x,y in zip(a,b)) + a[len(b):] + b[len(a):]"}
{"instruction": "Write a Python script to replace every digit in a number with the number of times it appears.", "response": "def replace_digit_count(n): s=str(n); return int(''.join(str(s.count(d)) for d in s))"}
{"instruction": "Write a Python function to return the first letter of each word in a sentence in reverse order.", "response": "def rev_initials(s): return ''.join(w[0] for w in s.split())[::-1]"}
{"instruction": "Write a Python script to remove all vowels that are at odd indices in a string.", "response": "def remove_odd_index_vowels(s): return ''.join(c for i,c in enumerate(s) if not (i%2 and c.lower() in 'aeiou'))"}
{"instruction": "Write a Python function to determine if the sum of ASCII values in a string is divisible by 7.", "response": "def ascii_sum_div7(s): return sum(map(ord,s))%7==0"}
{"instruction": "Write a Python script to replace each letter in a string with the ASCII value of the next character.", "response": "def letter_to_next_ascii(s): return ''.join(str(ord(chr(ord(c)+1))) if c.isalpha() else c for c in s)"}
{"instruction": "Write a Python function to count how many times a substring occurs in overlapping positions.", "response": "def overlapping_count(s, sub): return sum(s[i:].startswith(sub) for i in range(len(s)))"}
{"instruction": "Write a Python script to extract all alphabetic pairs from a string (e.g. 'ab', 'bc').", "response": "def alphabetic_pairs(s): return [s[i:i+2] for i in range(len(s)-1) if s[i:i+2].isalpha()]"}
{"instruction": "Write a Python function to return a list of booleans where each is True if the character is a digit.", "response": "def is_digit_list(s): return [c.isdigit() for c in s]"}
{"instruction": "Write a Python script to find the longest string in a list where all characters are unique.", "response": "def longest_unique_string(lst): return max((w for w in lst if len(w)==len(set(w))), key=len, default='')"}
{"instruction": "Write a Python function to reverse all characters in a string that are not alphanumeric.", "response": "def reverse_non_alnum(s): import re; parts=re.findall(r'\\w+|\\W+', s); return ''.join(p[::-1] if not p.isalnum() else p for p in parts)"}
{"instruction": "Write a Python script to shift each digit in a number forward by its value.", "response": "def shift_digits(n): return int(''.join(str((int(d)+int(d))%10) for d in str(n)))"}
{"instruction": "Write a Python function to find all substrings in a string that are exactly 4 characters long.", "response": "def substr_4(s): return [s[i:i+4] for i in range(len(s)-3)]"}
{"instruction": "Write a Python script to alternate between appending to the start and end of a list.", "response": "def alt_append(lst): res=[]; for i,v in enumerate(lst): res.insert(0,v) if i%2 else res.append(v); return res"}
{"instruction": "Write a Python function to reverse every k characters in a string.", "response": "def reverse_k(s,k): return ''.join(s[i:i+k][::-1] for i in range(0,len(s),k))"}
{"instruction": "Write a Python script to test whether a number is divisible by the count of its digits.", "response": "def div_by_digit_count(n): return n%len(str(n))==0"}
{"instruction": "Write a Python function to capitalize every character in a string that follows a digit.", "response": "def cap_after_digit(s): return ''.join(c.upper() if i>0 and s[i-1].isdigit() else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to return the average of all digit characters in a string.", "response": "def avg_digits_in_str(s): digs=[int(c) for c in s if c.isdigit()]; return sum(digs)/len(digs) if digs else 0"}
{"instruction": "Write a Python function to remove all lowercase vowels and replace them with their index.", "response": "def rmv_vowels_with_index(s): return ''.join(str(i) if c in 'aeiou' else c for i,c in enumerate(s))"}
{"instruction": "Write a Python script to print a centered triangle of stars with a given number of rows.", "response": "def triangle(n): [print(' '*(n-i-1)+'*'*(2*i+1)) for i in range(n)]"}
{"instruction": "Write a Python function to return the sum of all even-positioned digits in a number.", "response": "def sum_even_pos_digits(n): return sum(int(d) for i,d in enumerate(str(n)) if i%2==0)"}
{"instruction": "Write a Python script to group characters in a string into letters, digits, and symbols.", "response": "def group_chars(s): l,d,y=[],[],[]; [l.append(c) if c.isalpha() else d.append(c) if c.isdigit() else y.append(c) for c in s]; return l,d,y"}
{"instruction": "Write a Python function to count how many characters in a string are surrounded by the same character.", "response": "def same_sandwich(s): return sum(1 for i in range(1,len(s)-1) if s[i-1]==s[i+1])"}
{"instruction": "Write a Python script to extract the substring between the first and last occurrence of a character.", "response": "def substr_between(s,c): return s[s.find(c)+1:s.rfind(c)] if s.count(c)>=2 else ''"}
{"instruction": "Write a Python function to insert a space between all letters and digits in a mixed string.", "response": "def space_letters_digits(s): import re; return re.sub(r'(?<=[a-zA-Z])(?=\\d)|(?<=\\d)(?=[a-zA-Z])', ' ', s)"}
{"instruction": "Write a Python script to replace all consonants in a string with the '#' symbol.", "response": "def consonant_to_hash(s): return ''.join('#' if c.isalpha() and c.lower() not in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python function to split a string into two lists: one for vowels, one for consonants.", "response": "def split_vowels_cons(s): v,c=[],[]; [v.append(c) if c in 'aeiouAEIOU' else c.append(c) for c in s if c.isalpha()]; return v,c"}
{"instruction": "Write a Python script to replace every vowel in a list of strings with its uppercase version.", "response": "def upper_vowels(lst): return [''.join(c.upper() if c in 'aeiou' else c for c in w) for w in lst]"}
{"instruction": "Write a Python function to return True if a number is equal to the reverse of its digits squared.", "response": "def rev_digits_squared(n): return n==int(str(int(str(n)[::-1])**2)[::-1])"}
{"instruction": "Write a Python script to alternate the order of letters in two strings of the same length.", "response": "def alt_merge(a,b): return ''.join(x+y for x,y in zip(a,b))"}
{"instruction": "Write a Python function to replace the most frequent character in a string with '*'.", "response": "def star_frequent(s): from collections import Counter; m=Counter(s).most_common(1)[0][0]; return s.replace(m,'*')"}
{"instruction": "Write a Python script to reverse a list of strings and capitalize only the vowels in each.", "response": "def rev_strings_vowel_caps(lst): return [''.join(c.upper() if c in 'aeiouAEIOU' else c for c in w[::-1]) for w in lst[::-1]]"}
{"instruction": "Write a Python function to test if all substrings of length 2 in a string are unique.", "response": "def unique_sub_2(s): return len(set(s[i:i+2] for i in range(len(s)-1)))==len(s)-1"}
{"instruction": "Write a Python script to generate a list of tuples where each tuple contains a digit and its cube.", "response": "def digit_cube_tuples(): return [(i, i**3) for i in range(10)]"}
{"instruction": "Write a Python function to return the longest word in a sentence made of alternating letters.", "response": "def longest_alt_word(s): return max((w for w in s.split() if all((w[i].isalpha() and (w[i].isupper()!=w[i+1].isupper())) for i in range(len(w)-1))), key=len, default='')"}
{"instruction": "Write a Python script to split a string into a list of characters without using list().", "response": "def split_no_list(s): return [*s]"}
{"instruction": "Write a Python function to sort all characters in a string by their ASCII value descending.", "response": "def sort_ascii_desc(s): return ''.join(sorted(s, key=ord, reverse=True))"}
{"instruction": "Write a Python script to count the number of characters in a string that are less than 'm'.", "response": "def char_below_m(s): return sum(1 for c in s if c<'m')"}
{"instruction": "Write a Python function to extract a list of digits that are in increasing order in a number.", "response": "def increasing_digits(n): s=str(n); return [int(s[i]) for i in range(len(s)-1) if s[i]<s[i+1]]"}
{"instruction": "Write a Python script to remove all characters from a string that are not in the English alphabet.", "response": "def rmv_non_alpha(s): return ''.join(c for c in s if c.isalpha())"}
{"instruction": "Write a Python function to determine if the number of vowels in a word is even.", "response": "def even_vowel_count(w): return sum(1 for c in w if c in 'aeiouAEIOU')%2==0"}
{"instruction": "Write a Python script to return a list of all characters that appear in exactly two words of a sentence.", "response": "def chars_in_2_words(s): from collections import Counter; w=s.split(); allchars=''.join(set(w1)&set(w2) for i,w1 in enumerate(w) for w2 in w[i+1:]); return [c for c in set(allchars) if allchars.count(c)==2]"}
{"instruction": "Write a Python function to create a reversed version of a string where every other character is skipped.", "response": "def rev_skip_alt(s): return s[::-2]"}
{"instruction": "Write a Python script to generate a list of integers where each element is the sum of the previous two.", "response": "def fib_sum(n): a,b,res=0,1,[0,1]; [res.append(a+b) or (a,b:=(b,a+b)) for _ in range(n-2)]; return res[:n]"}
{"instruction": "Write a Python function to remove all characters from a string that match the first character.", "response": "def rmv_first_char_occ(s): return ''.join(c for c in s if c!=s[0])"}
{"instruction": "Write a Python script to return a list of strings sorted by the number of uppercase characters.", "response": "def sort_by_upper(lst): return sorted(lst, key=lambda w: sum(1 for c in w if c.isupper()))"}
{"instruction": "Write a Python function to return the index of the highest digit in a number.", "response": "def index_highest_digit(n): s=str(n); return s.index(max(s))"}
{"instruction": "Write a Python script to check if the difference between two strings is exactly one character.", "response": "def diff_one_char(a,b): return len(a)==len(b) and sum(x!=y for x,y in zip(a,b))==1"}
{"instruction": "Write a Python function to replace all consonants in a string with their position in the alphabet.", "response": "def consonant_to_pos(s): return ''.join(str(ord(c.lower())-96) if c.isalpha() and c.lower() not in 'aeiou' else c for c in s)"}
{"instruction": "Write a Python script to return the product of every second digit in a number.", "response": "def prod_2nd_digits(n): d=str(n); return eval('*'.join(d[i] for i in range(1,len(d),2)))"}
{"instruction": "Write a Python function to return all palindromes in a list that start with a vowel.", "response": "def vowel_palindromes(lst): return [w for w in lst if w==w[::-1] and w[0].lower() in 'aeiou']"}
{"instruction": "Write a Python script to alternate between adding and subtracting digits in a number.", "response": "def alt_add_sub(n): return sum(int(d) if i%2==0 else -int(d) for i,d in enumerate(str(n)))"}
{"instruction": "Write a Python function to return a new string made of every third character in a string.", "response": "def every_third_char(s): return s[2::3]"}
{"instruction": "Write a Python script to replace all digits in a string with the symbol '$'.", "response": "def digits_to_dollar(s): return ''.join('$' if c.isdigit() else c for c in s)"}
{"instruction": "Write a Python function to count how many characters in a string are surrounded by vowels.", "response": "def chars_surrounded_by_vowels(s): return sum(1 for i in range(1,len(s)-1) if s[i-1].lower() in 'aeiou' and s[i+1].lower() in 'aeiou')"}
{"instruction": "Write a Python script to return all substrings of a string that start and end with a vowel.", "response": "def vowel_subs(s): return [s[i:j+1] for i in range(len(s)) for j in range(i,len(s)) if s[i] in 'aeiou' and s[j] in 'aeiou']"}
{"instruction": "Write a Python function to return the difference in length between the shortest and longest words in a sentence.", "response": "def word_len_diff(s): w=[len(x) for x in s.split()]; return max(w)-min(w) if w else 0"}
{"instruction": "Write a Python script to check if a word can be rearranged to start and end with the same character.", "response": "def rearrange_start_end_same(w): from collections import Counter; return any(w.count(c)>=2 for c in set(w))"}
{"instruction": "Write a Python function to return the total number of unique consonants in a string.", "response": "def unique_consonants(s): return len(set(c.lower() for c in s if c.isalpha() and c.lower() not in 'aeiou'))"}
{"instruction": "Write a Python script to reverse a list using a while loop instead of built-in functions.", "response": "def reverse_list_while(lst): i,j=0,len(lst)-1; while i<j: lst[i],lst[j]=lst[j],lst[i]; i+=1;j-=1; return lst"}
{"instruction": "Explain why Python is case sensitive and how it affects variable naming.", "response": "Python is case sensitive, meaning 'Variable' and 'variable' are different. It's like treating your ex and your best friend the same — bad idea. Variable naming must respect this or you'll trigger errors and possibly existential dread."}
{"instruction": "Explain what a function is in Python and how to define one.", "response": "A function in Python is a reusable block of code defined using the `def` keyword. Example: `def greet(): print('Hi')`. It lets you avoid writing the same code 700 times like a caveman."}
{"instruction": "Explain the difference between a list and a tuple in Python.", "response": "Lists are mutable — you can change them. Tuples are immutable — they’re the locked vault of Python. Use tuples when you don’t want your data altered, and lists when you enjoy chaos."}
{"instruction": "Explain how the `if`, `elif`, and `else` statements work in Python.", "response": "`if` checks a condition. `elif` (else if) checks more if the first fails. `else` catches everything else. It's like triage in code: check symptoms, more symptoms, then panic if none match."}
{"instruction": "Explain how to create a loop that repeats a block of code a specific number of times.", "response": "Use a `for` loop with `range()`. Example: `for i in range(5): print(i)` repeats 5 times. It’s basically your digital alarm clock for making stuff repeat — without snooze."}
{"instruction": "Explain the use of indentation in Python and why it matters.", "response": "Indentation in Python replaces braces. It's not aesthetic — it literally controls the code blocks. Get it wrong and Python sulks with an IndentationError."}
{"instruction": "Explain how to check if a number is even or odd in Python.", "response": "Use `if number % 2 == 0:` to check if it's even, else it's odd. If that `%` confuses you, it’s the modulo operator — math’s way of keeping you humble."}
{"instruction": "Explain the purpose of the `def` keyword in Python.", "response": "`def` defines a function. Think of it like signing a contract: 'def' says you’re starting something formal that you better finish properly, or Python revolts."}
{"instruction": "Explain how the `range()` function works and how it's used in loops.", "response": "`range(n)` gives you numbers from 0 to n-1. Perfect for loops. `range(3)` gives 0,1,2. It doesn’t include the end — because Python likes to be mysterious."}
{"instruction": "Explain the difference between `=` and `==` in Python.", "response": "`=` assigns a value. `==` checks if two values are equal. Mixing them up is like texting your boss 'I love you' — unintended and awkward."}
{"instruction": "Explain how to create a list in Python and add elements to it.", "response": "Create with `my_list = []`, add with `my_list.append('item')`. Congratulations, you’ve made a dynamic container that can hoard anything like a digital goblin."}
{"instruction": "Explain what `None` means in Python and when it’s used.", "response": "`None` is Python’s way of saying 'nothing here'. It’s used when a variable exists but doesn’t have a value — kind of like your weekend plans."}
{"instruction": "Explain how to use the `input()` function to get user input in Python.", "response": "`input('Prompt')` lets the user type something. It always returns a string — so don’t expect a number unless you convert it. Otherwise: crash incoming."}
{"instruction": "Explain what a `for` loop does in Python.", "response": "A `for` loop repeats over items in a sequence. Example: `for x in [1,2,3]: print(x)` prints each number. Like a robotic chant, but useful."}
{"instruction": "Explain how to define a string and perform basic string operations in Python.", "response": "Define a string with quotes: `'hello'` or `'world'`. Operations include concatenation (`+`), repetition (`*`), slicing (`[:]`), and escaping from reality."}
{"instruction": "Explain how indexing works in strings and lists in Python.", "response": "Indexing starts at 0. `my_list[0]` is the first item. `[-1]` is the last. Just remember: counting starts from zero or Python throws shade."}
{"instruction": "Explain how to slice a list or string in Python using colon syntax.", "response": "Use `[start:stop:step]`. It's like slicing cake — clean, elegant, and non-destructive (unless you mess up the indices)."}
{"instruction": "Explain the difference between `print()` and `return` in a function.", "response": "`print()` shows output. `return` sends data back from a function. Use `return` when you want to use the result later instead of shouting into the void."}
{"instruction": "Explain how to use the `len()` function to find the length of a string or list.", "response": "Use `len(obj)` to get how many items are in a list or how long a string is. Python counts so you don’t have to (because counting is for loops)."}
{"instruction": "Explain how to convert a string to an integer in Python.", "response": "Use `int('123')` to convert a string to an integer. If it’s not a number (like 'cat'), Python has a meltdown and throws a `ValueError`."}
{"instruction": "Explain what happens when you divide by zero in Python.", "response": "Python will throw a `ZeroDivisionError`. Because dividing by zero is mathematically illegal. Even Python respects that law of the universe."}
{"instruction": "Explain how to write a comment in Python and why comments are important.", "response": "Use `#` to write a comment. It won’t run, but it's great for explaining your mess to future-you (who will definitely forget what your code does)."}
{"instruction": "Explain how to check if an item exists in a list using `in`.", "response": "Use `if item in list:` to check existence. It’s like asking Python: 'Is this in the fridge?' Python replies with True or False, minus the sass."}
{"instruction": "Explain what a syntax error is in Python and how to avoid it.", "response": "A syntax error means your code is written wrong — like a sentence missing a verb. Python just stares blankly until you fix it."}
{"instruction": "Explain how Python handles whitespace differently than other languages.", "response": "Whitespace in Python defines blocks. Other languages ignore it, Python makes it sacred. Misalign your indentation and boom — disaster."}
{"instruction": "Explain how to create and call a simple Python function.", "response": "Use `def my_func():` to create, then `my_func()` to call. It’s basically setting a trap and then stepping into it — intentionally."}
{"instruction": "Explain what a variable is in Python and how to assign one.", "response": "A variable is a name for storing data: `x = 5`. It's your way of telling Python: 'Remember this thing for later, OK?'"}
{"instruction": "Explain the difference between mutable and immutable types in Python.", "response": "Mutable = changeable (lists). Immutable = untouchable (tuples, strings). Choose wisely or face unintended consequences."}
{"instruction": "Explain the `break` and `continue` statements in loops.", "response": "`break` exits the loop early. `continue` skips to the next iteration. Use when your loop needs to rage quit or skip awkward moments."}
{"instruction": "Explain how to use the `while` loop and what it’s good for.", "response": "A `while` loop repeats as long as a condition is True. Great for unknown loop counts or infinite regret. Example: `while x < 10:`"}
{"instruction": "Explain how to compare two values in Python.", "response": "Use `==`, `<`, `>`, `!=`, etc. for comparisons. Python evaluates them to True/False — the language of judgment and logic."}
{"instruction": "Explain what a Boolean value is and how it's used in Python.", "response": "Booleans are `True` and `False`. They're used in conditions and control flow — like on/off switches for your code's decisions."}
{"instruction": "Explain how to check if a string contains another string in Python.", "response": "Use `'sub' in 'string'` to check if one string is in another. If you’re searching for love or typos, this operator has your back."}
{"instruction": "Explain how to use the `not` operator in Python.", "response": "`not` reverses a Boolean. `not True` is False. It's like Python’s way of saying: 'Plot twist!'"}
{"instruction": "Explain how logical operators `and`, `or`, and `not` work in Python.", "response": "`and` requires both conditions to be True. `or` needs at least one. `not` flips the result. They’re Python’s logic gatekeepers."}
{"instruction": "Explain what a `TypeError` is and when you might encounter one.", "response": "A `TypeError` happens when you use a wrong type. Example: `3 + 'a'` is like adding a banana to a math problem — Python freaks out."}
{"instruction": "Explain how to use the `int()`, `str()`, and `float()` functions for type conversion.", "response": "Use `int()`, `str()`, and `float()` to convert types. Because Python won’t just assume what you mean — it's not your psychic assistant."}
{"instruction": "Explain the difference between single quotes and double quotes for strings in Python.", "response": "Both quotes work for strings. Use single quotes unless the string has apostrophes. Or double quotes if you're feeling fancy."}
{"instruction": "Explain how escape characters like `\\\\n` and `\\\\t` work in Python.", "response": "Escape characters like `\\\\n` (newline) and `\\\\t` (tab) let you format strings. Without them, you'd be stuck printing in a straight line like it's 1995."}
{"instruction": "Explain how to concatenate strings using the `+` operator.", "response": "Use `+` to concatenate: `'hello' + 'world'` = `'helloworld'`. For actual space between them, don’t forget to add it manually like `'hello ' + 'world'`."}
{"instruction": "Explain how to repeat a string multiple times using the `*` operator.", "response": "Use `*` with strings: `'ha'*3` gives `'hahaha'`. Useful for evil laughter or creating long strings when you’re too lazy to type."}
{"instruction": "Explain what a list comprehension is and give a simple example.", "response": "List comprehension is a compact way to build lists. Example: `[x*2 for x in range(5)]` gives `[0,2,4,6,8]`. Fancy, fast, and confusing to beginners."}
{"instruction": "Explain how to loop through a list and print each item.", "response": "Use `for item in list:` and `print(item)`. Python will loop over each item like a butler reading off a grocery list."}
{"instruction": "Explain what the `enumerate()` function does in Python.", "response": "`enumerate()` gives both index and value. Example: `for i, v in enumerate(my_list):` — now you know what you're yelling at."}
{"instruction": "Explain how to find the maximum and minimum values in a list.", "response": "Use `max(list)` and `min(list)` to find the extremes. Because manual searching is for spreadsheets, not Pythonistas."}
{"instruction": "Explain how to sort a list in ascending and descending order.", "response": "Use `list.sort()` or `sorted(list)` for ascending. For descending, pass `reverse=True`. Yes, Python can sort your life — just not emotionally."}
{"instruction": "Explain what the `append()` and `remove()` methods do in a list.", "response": "`append()` adds to the end. `remove()` deletes the first match. It’s a push/pull friendship dynamic — in code form."}
{"instruction": "Explain how to use the `pop()` method and what it returns.", "response": "`pop()` removes and returns the last item (or given index). It’s like a toaster: it ejects your data back at you."}
{"instruction": "Explain how to copy a list in Python and the difference between shallow and deep copy.", "response": "Use `copy()` or slicing for shallow copy. Deep copy (with `copy.deepcopy`) copies nested objects too. Shallow is quick but risky, like most shortcuts."}
{"instruction": "Explain how to reverse a string or list in Python.", "response": "Use slicing `[::-1]` to reverse a list or string. Or `reversed()` for lists. It’s Python’s built-in time machine — in reverse."}
{"instruction": "Explain what a dictionary is and how it differs from a list.", "response": "A dictionary is a collection of key-value pairs. Unlike lists that use numeric indices, dictionaries use custom keys. Think of it as a labeled box rather than a numbered shelf."}
{"instruction": "Explain how to create and access values in a dictionary.", "response": "Create with `my_dict = {'a': 1, 'b': 2}`. Access with `my_dict['a']`. If you ask for a key that doesn't exist, Python throws a fit (KeyError)."}
{"instruction": "Explain what a key-value pair is in Python dictionaries.", "response": "A key-value pair links a unique key to a value: `'name': 'Charlie'`. Keys must be immutable. Values can be anything, even your emotional baggage."}
{"instruction": "Explain how to use the `get()` method with dictionaries and why it’s useful.", "response": "`get(key)` fetches the value or returns `None` if the key doesn’t exist — avoiding errors and drama. You can also use a default: `get('age', 99)`."}
{"instruction": "Explain how to check if a key exists in a dictionary.", "response": "Use `if key in my_dict:`. If it returns True, the key exists and is plotting something. Otherwise, it’s a ghost key."}
{"instruction": "Explain how to loop through a dictionary using a `for` loop.", "response": "Use `for key, value in my_dict.items():` to loop like a civilized coder. Bonus: no need to access by key manually."}
{"instruction": "Explain the difference between `is` and `==` in Python.", "response": "`==` checks if values are equal. `is` checks if they're literally the same object in memory. Like comparing twins vs. clones — subtle but crucial."}
{"instruction": "Explain how to use multiple conditions in an `if` statement.", "response": "Combine conditions using `and`, `or`, and `not`. Example: `if x > 0 and y < 10:`. Because sometimes one condition just isn’t enough chaos."}
{"instruction": "Explain what a nested `if` statement is and when to use it.", "response": "A nested `if` is an `if` inside another `if`. Use it when you want layered decision-making, or just want to confuse future-you reading the code."}
{"instruction": "Explain the purpose of the `pass` statement in Python.", "response": "`pass` is a placeholder. It does nothing — like your New Year’s resolution. Use it when Python demands a block but you’re not ready to commit."}
{"instruction": "Explain what a module is and how to import one.", "response": "A module is a file with Python code you can import. Use `import math` or `import os`. It’s like ordering pre-cooked functions instead of making your own."}
{"instruction": "Explain how to create your own Python module.", "response": "Create a `.py` file with your functions. Save it, then import it in another script using `import mymodule`. Boom — you’ve made your own toolkit."}
{"instruction": "Explain what the `math` module is and give an example of using it.", "response": "The `math` module provides advanced math functions like `math.sqrt()` and `math.pi`. Basically, it’s Python’s math degree in a box."}
{"instruction": "Explain how to use `import as` to give a module a nickname.", "response": "Use `import math as m` to nickname it. `m.sqrt(9)` is shorter and lazier — and we love that."}
{"instruction": "Explain how to use the `from ... import ...` syntax.", "response": "Use `from math import pi` to import specific items. Now you can use `pi` directly, no prefix. Ideal for people who hate typing."}
{"instruction": "Explain the difference between global and local variables in Python.", "response": "Local variables live inside functions. Globals are everywhere. If you modify a global from inside a function, Python side-eyes you unless you say `global`."}
{"instruction": "Explain how default arguments work in Python functions.", "response": "Default arguments provide fallback values. `def greet(name='friend'):` lets you call `greet()` without panic. Think of them as polite defaults."}
{"instruction": "Explain what happens if you call a function with the wrong number of arguments.", "response": "Too few = `TypeError`. Too many = also `TypeError`. Python is strict about function arguments — like a bouncer at Club Function()."}
{"instruction": "Explain what a return value is in Python functions.", "response": "A return value is the result a function gives back. Use `return` to hand it off. Otherwise, your function just runs off into the void."}
{"instruction": "Explain the difference between arguments and parameters in functions.", "response": "Parameters are the variables in the function definition. Arguments are the actual values you pass in. It’s like a recipe vs. the ingredients."}
{"instruction": "Explain how to define a function with optional parameters.", "response": "Use `def foo(a, b=0):`. You can now call `foo(5)` or `foo(5, 2)`. Optional parameters make your function chill and flexible."}
{"instruction": "Explain how to handle errors in Python using `try` and `except`.", "response": "Use `try:` to attempt something risky, and `except:` to catch the error if it explodes. Like wearing padding before a Python faceplant."}
{"instruction": "Explain what a `ValueError` is and how to catch it.", "response": "A `ValueError` occurs when a value is of the right type but wrong content. Catch it with `except ValueError:`. It’s the 'wrong mood' of errors."}
{"instruction": "Explain how to open and read a text file in Python.", "response": "Use `open('file.txt', 'r') as f:` and then `f.read()` or `f.readline()`. Reading files — Python’s way of digging through your digital drawers."}
{"instruction": "Explain how to write text to a file using Python.", "response": "Open the file with `'w'` mode and use `f.write('text')`. Don’t forget to close it — or better, use `with` to auto-close like a responsible adult."}
{"instruction": "Explain what the `with` statement does when working with files.", "response": "`with open(...) as f:` ensures the file is automatically closed. Like hiring a babysitter who leaves when the parents come back."}
{"instruction": "Explain how to iterate over each line in a file.", "response": "Loop with `for line in f:`. Each loop gives you the next line. It’s like reading a diary, line by line — but with permission."}
{"instruction": "Explain how to check if a file exists using Python.", "response": "Use `os.path.exists('file.txt')` or try to open it with `try/except`. That way you avoid errors and look smarter than you are."}
{"instruction": "Explain how to handle division of integers and floats in Python.", "response": "Integer division uses `//`. Float division uses `/`. Mixing them is legal — but know what you want, or Python will guess (and probably be wrong)."}
{"instruction": "Explain how to round a number to a certain number of decimal places.", "response": "Use `round(3.14159, 2)` for 2 decimals. Or don’t round at all and pretend precision matters that much in your life."}
{"instruction": "Explain how to use `f-strings` to format output in Python.", "response": "Use `f\\'Hello, {name}\\'` to insert variables into strings. It’s readable, modern, and lets you feel cool while formatting."}
{"instruction": "Explain how to format strings using the `format()` method.", "response": "Use `'{} {}'.format('Hello', 'world')`. It’s older but still classy — like writing with a fountain pen instead of a Sharpie."}
{"instruction": "Explain the difference between `print()` and `return` in terms of output.", "response": "`print()` displays output to the screen. `return` sends output from a function to be used later. Print shouts. Return hands you a note."}
{"instruction": "Explain how to store multiple values in a single variable using a list.", "response": "Use a list: `my_list = [1, 2, 3]`. It’s a box that can store multiple values — or secrets you want Python to remember."}
{"instruction": "Explain what happens when you use an index that is out of range in a list.", "response": "Python throws `IndexError`. Because trying to grab a non-existent item is like reaching into an empty cookie jar — disappointing and dangerous."}
{"instruction": "Explain how Python evaluates conditions in an `if` statement.", "response": "Python checks the first condition. If it’s true, it runs the block. Else it moves on. It doesn’t care about your intentions — just your booleans."}
{"instruction": "Explain how to count how many times a value appears in a list.", "response": "Use `list.count(value)`. It tells you how many times something shows up. Like a popularity contest, but for integers."}
{"instruction": "Explain the difference between a for loop over a string and over a list.", "response": "Looping over a string gives characters. Over a list gives items. So `'cat'` gives `'c', 'a', 't'`, and `[1,2,3]` gives numbers. Easy peasy."}
{"instruction": "Explain what the `zip()` function does and how it’s used.", "response": "`zip()` combines multiple iterables into tuples. It’s Python’s way of pairing socks (or lists). Example: `zip([1,2], ['a','b'])` → `[(1,'a'), (2,'b')]`."}
{"instruction": "Explain how to get both the index and value when looping through a list.", "response": "Use `for i, v in enumerate(list):`. It’s Python’s way of saying: 'Here’s the item AND where it lives. Use it wisely.'"}
{"instruction": "Explain the concept of truthy and falsy values in Python.", "response": "Truthy values behave like True. Falsy values behave like False. `0`, `''`, `[]`, `None` are falsy. Everything else is like 'yup'."}
{"instruction": "Explain how to test if a string is empty in Python.", "response": "Use `if string:` to check if it's not empty. Or `if not string:` for the opposite. Simple, elegant, and highly judgmental."}
{"instruction": "Explain how to use the `join()` method to merge list items into a string.", "response": "Use `' '.join(list)` to merge list items into a string with spaces (or any delimiter). It’s the glue of the string world."}
{"instruction": "Explain the purpose of the `strip()` method for strings.", "response": "`strip()` removes whitespace from both ends. Useful when dealing with user input, messy text, or existential whitespace issues."}
{"instruction": "Explain the difference between `upper()`, `lower()`, and `capitalize()` in Python.", "response": "`upper()` = ALL CAPS. `lower()` = all lowercase. `capitalize()` = Only First Letter. They’re your case-shifting power trio."}
{"instruction": "Explain how to replace part of a string using the `replace()` method.", "response": "Use `string.replace('old', 'new')`. It replaces all occurrences. If it doesn’t, you probably typed it wrong. Again."}
{"instruction": "Explain how to split a sentence into a list of words.", "response": "Use `split()` to break a sentence into words. Default is space. It’s Python’s word blender — efficient and messy."}
{"instruction": "Explain how to remove whitespace from the beginning and end of a string.", "response": "Use `strip()` for both ends, `lstrip()` for left, `rstrip()` for right. They’re like virtual scissors — gentle but effective."}
{"instruction": "Explain what happens when you use a float as a list index.", "response": "You get a `TypeError`. Floats aren’t valid list indices. Python wants integers. Try it and Python will scold you accordingly."}
{"instruction": "Explain what the `in` keyword does when used with strings and lists.", "response": "`in` checks for membership. `'a' in 'cat'` → True. `3 in [1,2,3]` → True. If it’s not there, Python returns False and maybe judges you."}
{"instruction": "Explain how to use the `type()` function to check the data type of a variable.", "response": "Use `type(variable)` to see what data type you're working with. It's Python’s way of saying, 'Know thy variable before you mess it up.'"}
{"instruction": "Explain why using meaningful variable names is important in Python.", "response": "Meaningful variable names make your code readable and less like a cryptic prophecy. `total_price` > `tp`. Future you will thank you."}
{"instruction": "Explain the difference between `while` and `for` loops in Python.", "response": "`for` loops iterate over a sequence. `while` loops keep going until a condition breaks. One’s structured; the other’s chaos in a loop."}
{"instruction": "Explain how infinite loops happen in Python and how to avoid them.", "response": "Infinite loops happen when the exit condition never becomes False. Fix it or Python will loop like it’s Groundhog Day forever."}
{"instruction": "Explain how to use `elif` to create multiple conditions in a program.", "response": "Use `elif` when you’ve got multiple paths. Like: `if`, `elif`, `elif`, then `else` as a safety net for indecisive logic."}
{"instruction": "Explain how the `else` clause works in both `if` statements and loops.", "response": "In `if` statements, `else` runs if nothing above is true. In loops, `else` runs if the loop wasn't broken. It’s the 'bonus round.'"}
{"instruction": "Explain the importance of indentation consistency in Python code.", "response": "Indentation isn’t cosmetic in Python — it defines code blocks. Inconsistent indentation = Python throws a tantrum (IndentationError)."}
{"instruction": "Explain how the `+=` operator works in Python.", "response": "`+=` adds and assigns in one go: `x += 5` is shorthand for `x = x + 5`. Less typing, more progress, fewer carpal tunnel injuries."}
{"instruction": "Explain what `NoneType` means and when it might appear.", "response": "`NoneType` is the type of `None`. It appears when a function returns nothing or when you've ghosted a variable by not assigning it."}
{"instruction": "Explain how to swap values between two variables in Python.", "response": "Use `a, b = b, a`. Python makes value swapping a one-liner. No need for a temp variable. Elegant, unlike your sleep schedule."}
{"instruction": "Explain how to create a string with multiple lines using triple quotes.", "response": "Use triple quotes like `'''` or `\\'\\'\\'` to span strings over multiple lines. Great for poems, long messages, or passive-aggressive notes."}
{"instruction": "Explain how to use comments to document your code in Python.", "response": "Use `#` to write comments. They’re ignored by Python but adored by future humans trying to decode your spaghetti logic."}
{"instruction": "Explain how to convert a float to an integer and vice versa.", "response": "Convert float to int: `int(3.7)` → 3. Convert int to float: `float(3)` → 3.0. Python handles conversions better than some diplomats."}
{"instruction": "Explain what the modulo operator `%` does and when to use it.", "response": "The `%` operator returns the remainder. `7 % 3` → 1. Use it for checking divisibility, wrapping around, or acting fancy in interviews."}
{"instruction": "Explain how `bool()` behaves with different data types in Python.", "response": "`bool()` turns stuff into True or False. `bool(0)` → False. `bool('hello')` → True. It’s Python’s gut-check for truthiness."}
{"instruction": "Explain how to test if a number is divisible by another in Python.", "response": "Use `if a % b == 0:` to check divisibility. If the remainder is 0, congrats — the number is evenly divisible (and probably smug about it)."}
{"instruction": "Explain how to use the `isinstance()` function and why it's useful.", "response": "`isinstance(x, int)` checks type. Better than `type(x) == int` because it works with inheritance too. Like a respectful class check."}
{"instruction": "Explain what happens when you try to add a string and an integer in Python.", "response": "Python says no and raises a `TypeError`. You can’t add a string and an integer — it’s like trying to mix oil and water in code."}
{"instruction": "Explain how to use the `round()` function and what it returns.", "response": "`round(3.14159, 2)` → 3.14. It trims decimals politely. Without the second argument, it rounds to the nearest whole number."}
{"instruction": "Explain what happens when you multiply a string by a number.", "response": "You get repetition. `'ha' * 3` → `'hahaha'`. Python obeys your chaos request and multiplies string enthusiasm."}
{"instruction": "Explain how to reverse a string using slicing.", "response": "Use slicing: `s[::-1]` reverses a string. It’s Python's quietest magic trick — no loops, no drama."}
{"instruction": "Explain the difference between a shallow copy and a deep copy of a list.", "response": "Shallow copy: `copy()` — copies outer list, not nested ones. Deep copy: `copy.deepcopy()` — clones everything like it’s in a sci-fi lab."}
{"instruction": "Explain why it's better to use `in` instead of `==` when checking if a value is in a list.", "response": "`in` checks if an item exists. `==` checks equality. Use `in` when looking for membership, not identity. Don’t force commitment."}
{"instruction": "Explain how to merge two lists using the `+` operator.", "response": "Use `list1 + list2` to merge. It creates a new list. Great for combining forces, like a superhero crossover — but with data."}
{"instruction": "Explain how to remove duplicates from a list using `set()`.", "response": "Use `list(set(my_list))` to remove duplicates. Be warned: it may scramble your order — like memory after a wild weekend."}
{"instruction": "Explain how to find the index of an item in a list using `index()`.", "response": "Use `list.index(value)` to find where something lives. If it’s not there, Python throws a tantrum — ValueError style."}
{"instruction": "Explain what happens if you try to remove a value that isn't in a list.", "response": "You get a `ValueError`. Python doesn’t remove what doesn’t exist — it prefers you check first or be ready to catch the drama."}
{"instruction": "Explain how to insert an element at a specific position in a list.", "response": "Use `list.insert(index, value)` to surgically place an element. Like: `colors.insert(1, 'blue')` shoves 'blue' into slot 1."}
{"instruction": "Explain how to slice a list to get every second element.", "response": "Use slicing: `list[::2]` gives every second element. Python skips with style — like hopscotch but with data."}
{"instruction": "Explain how list slicing behaves with negative indices.", "response": "Negative indices count from the end. `list[-1]` = last item. `list[-2]` = second to last. Python is cool like that."}
{"instruction": "Explain what a nested list is and how to access its elements.", "response": "A nested list is a list inside a list. Access it like `list[0][1]`. It's list-ception. Dive deep but don’t get lost."}
{"instruction": "Explain how to flatten a nested list using a loop.", "response": "Use nested loops or list comprehension. Example: `flat = [item for sublist in nested for item in sublist]`. Python flattens with flair."}
{"instruction": "Explain how to use a loop to count vowels in a string.", "response": "Loop through each character and check `if c.lower() in 'aeiou':`. Count your vowels like they owe you money."}
{"instruction": "Explain how to convert a list of strings to uppercase.", "response": "Use a loop or list comprehension: `[s.upper() for s in list_of_strings]`. Instant uppercase makeover — no caps lock needed."}
{"instruction": "Explain how to join a list of strings into one string separated by spaces.", "response": "Use `' '.join(list_of_words)`. This merges them with spaces, like polite conversation between list items."}
{"instruction": "Explain the role of escape sequences like \\\\n and \\\\\\ in strings.", "response": "Escape sequences like `\\\\n` (newline) and `\\\\t` (tab) help format text. They start with `\\\\` because Python needs a warning first."}
{"instruction": "Explain how to count how many times a word appears in a sentence.", "response": "Use `.count('word')` after splitting the sentence. Example: `sentence.split().count('apple')` counts apple propaganda."}
{"instruction": "Explain how to check if a string is a palindrome.", "response": "Check if `s == s[::-1]`. If True, it’s a palindrome. If not, it’s just pretending to be symmetrical."}
{"instruction": "Explain how to check if a string contains only digits using `isdigit()`.", "response": "Use `s.isdigit()` to see if it’s all numbers. Works like a bouncer — strict but fair."}
{"instruction": "Explain how the `isalnum()` and `isalpha()` methods differ.", "response": "`isalnum()` checks for letters and numbers. `isalpha()` checks for only letters. Numbers not allowed in the alphabet club."}
{"instruction": "Explain how to remove all punctuation from a string.", "response": "Use `re.sub(r'[^\\w\\s]', '', text)` from the `re` module. Or go full DIY and filter out characters manually. Your call, gladiator."}
{"instruction": "Explain how to count how many characters in a string are uppercase.", "response": "Use `sum(1 for c in s if c.isupper())`. Python counts capital letters like it's running a secret grammar check."}
{"instruction": "Explain how to test whether a string starts or ends with a specific substring.", "response": "Use `s.startswith('sub')` or `s.endswith('sub')`. Like checking if a story begins or ends with drama."}
{"instruction": "Explain how to create an empty list, string, and dictionary in Python.", "response": "Empty list: `[]`. Empty string: `''`. Empty dictionary: `{}`. All ready to be filled with your hopes, dreams, or runtime errors."}
{"instruction": "Explain the role of the `not` keyword in logical expressions.", "response": "`not` flips a condition. `not True` → False. It’s the grammatical equivalent of a passive-aggressive no."}
{"instruction": "Explain what happens if you divide an integer by another and use `//` instead of `/`.", "response": "Using `//` gives integer division. So `7 // 2` → 3. `7 / 2` → 3.5. One truncates, the other respects decimals. Choose wisely."}
{"instruction": "Explain how to handle unexpected input errors using `try` and `except`.", "response": "Wrap risky code in `try: ... except:`. If Python panics, you catch the error and stop your program from combusting."}
{"instruction": "Explain how to raise a custom error in Python using `raise`.", "response": "Use `raise ValueError('your message')` to throw your own error. It's like yelling at your code with structure."}
{"instruction": "Explain how to use `finally` in a `try-except` block.", "response": "`finally:` always runs — whether there’s an error or not. Great for cleanup, emotional closure, or sarcastic logging."}
{"instruction": "Explain the difference between `try-except` and `if` checks.", "response": "`try-except` handles actual errors. `if` checks conditions. `if` is preventive; `try-except` is reactive — like therapy vs. aspirin."}
{"instruction": "Explain how to create a dictionary using dictionary comprehension.", "response": "Use `{k: v for k, v in iterable}` to create a dictionary from a loop or condition."}
{"instruction": "Explain how to sort a dictionary by its values.", "response": "Use `sorted(dict.items(), key=lambda x: x[1])` to sort by values."}
{"instruction": "Explain how to get all the keys and values from a dictionary.", "response": "Use `dict.keys()` and `dict.values()` to get keys and values."}
{"instruction": "Explain how to update a dictionary with new key-value pairs.", "response": "Use `dict.update({'new_key': 'value'})` to add or update entries."}
{"instruction": "Explain how to delete a key from a dictionary safely.", "response": "Use `dict.pop('key', None)` to delete a key without error if it doesn’t exist."}
{"instruction": "Explain how to loop through a dictionary and print each key and value.", "response": "Use `for k, v in dict.items(): print(k, v)` to loop through a dictionary."}
{"instruction": "Explain how to nest dictionaries inside each other and access their values.", "response": "Access like `data['outer']['inner']` — each level uses another `[]`."}
{"instruction": "Explain how to check if a list is empty using a conditional.", "response": "Use `if not my_list:` — it checks if the list is empty."}
{"instruction": "Explain what `elif` allows you to do that `else` does not.", "response": "`elif` lets you chain multiple conditions. `else` is just the final fallback."}
{"instruction": "Explain why `True == 1` and `False == 0` in Python.", "response": "Because `True` is 1 and `False` is 0 under the hood. Boolean = integer in disguise."}
{"instruction": "Explain how to use the `all()` and `any()` functions with lists.", "response": "`all()` checks if all are True, `any()` checks if at least one is True."}
{"instruction": "Explain how to reverse a list using the `reverse()` method.", "response": "Use `my_list.reverse()` — it changes the list in place."}
{"instruction": "Explain how to filter even numbers from a list using a loop.", "response": "Loop and use `if x % 2 == 0:` to collect even numbers."}
{"instruction": "Explain how to write a loop that skips certain items using `continue`.", "response": "Use `continue` to skip items: `if x == bad: continue`."}
{"instruction": "Explain how the `id()` function shows object identity in memory.", "response": "`id(obj)` returns the memory address — proves two names point to the same object."}
{"instruction": "Explain how the `del` keyword can be used to delete variables or list items.", "response": "Use `del var` to delete variables or `del list[i]` to remove items."}
{"instruction": "Explain what a `for else` structure does in Python.", "response": "`for-else` runs the `else` if the loop wasn't exited with `break`."}
{"instruction": "Explain how to generate a list of numbers from 1 to 100 using `range()`.", "response": "Use `range(1, 101)` to get numbers from 1 to 100."}
{"instruction": "Explain how to check whether a number is a prime using a loop.", "response": "Check divisibility from 2 to √n; if none divide, it's prime."}
{"instruction": "Explain how to use the `sorted()` function without changing the original list.", "response": "Use `sorted(my_list)` to get a sorted copy. Original list stays intact."}
{"instruction": "Explain how to find the average of numbers in a list.", "response": "Use `sum(nums) / len(nums)` — classic average formula."}
{"instruction": "Explain how to determine if all items in a list are the same.", "response": "Check `all(x == nums[0] for x in nums)` to see if all are the same."}
{"instruction": "Explain how to merge two dictionaries in Python 3.9+.", "response": "Use `merged = dict1 | dict2` in Python 3.9+."}
{"instruction": "Explain how to loop through characters in a string.", "response": "Use `for char in string:` to loop through each character."}
{"instruction": "Explain how to compare two strings alphabetically.", "response": "Compare with `<` or `>` like `if s1 < s2:` — works alphabetically."}
{"instruction": "Explain how to format a float number to show only two decimal places.", "response": "Use `f'{value:.2f}'` to format float to two decimal places."}
{"instruction": "Explain how to replace every vowel in a string with an asterisk.", "response": "Use `.replace()` with a loop or regex to swap vowels for '*'."}
{"instruction": "Explain how to create a string that repeats a specific character n times.", "response": "Use `char * n` to repeat it. Example: `'x' * 5` → `'xxxxx'`."}
{"instruction": "Explain how to check whether one list is a subset of another.", "response": "Use `all(x in big_list for x in small_list)` to check for a subset."}
{"instruction": "Explain how to find the common elements in two lists.", "response": "Use list comprehension: `[x for x in list1 if x in list2]`."}
{"instruction": "Explain how to find the longest word in a list of words.", "response": "Use `max(words, key=len)` to find the longest word."}
{"instruction": "Explain how to check if a string is in title case.", "response": "Use `.istitle()` — returns True if each word starts with uppercase."}
{"instruction": "Explain how to test whether all characters in a string are lowercase.", "response": "Use `.islower()` — returns True if all letters are lowercase."}
{"instruction": "Explain how to check for duplicate characters in a string.", "response": "Use `len(set(s)) != len(s)` — duplicates exist if lengths differ."}
{"instruction": "Explain how to remove spaces from a string.", "response": "Use `.replace(' ', '')` or `.split()` + `join()` to remove spaces."}
{"instruction": "Explain how to check if a string is a valid identifier in Python.", "response": "Use `.isidentifier()` — returns True if string is a valid variable name."}
{"instruction": "Explain what happens if you call a function before it is defined.", "response": "Python raises `NameError`. Functions must be defined before they’re called."}
{"instruction": "Explain how to use a function as an argument to another function.", "response": "Pass it like `func(callback)` — functions are first-class objects."}
{"instruction": "Explain how Python uses indentation to define code blocks.", "response": "Python uses indentation to group code blocks. No braces, just whitespace."}
{"instruction": "Explain how to break a long line of code into multiple lines.", "response": "Use `\\\\` or parentheses to break long lines. Python appreciates the courtesy."}
{"instruction": "Explain how to escape quotes inside a string.", "response": "Escape quotes with backslashes: `'It\\\\'s fine'` or use double quotes around single."}
{"instruction": "Explain how to create a multi-line string using backslashes.", "response": "Use `\\\\` at the end of a line to continue it. Rare, but possible."}
{"instruction": "Explain the difference between `exit()` and `quit()` in Python.", "response": "Both exit Python, but they're meant for interactive use — not scripts."}
{"instruction": "Explain how to print multiple values in a single `print()` statement.", "response": "Use commas: `print(a, b, c)` — prints all with spaces in one go."}
{"instruction": "Explain how to suppress the newline at the end of a `print()` statement.", "response": "Use `print('hi', end='')` to suppress the newline."}
{"instruction": "Explain what happens when you compare two lists using `==`.", "response": "`==` compares contents. Two lists with same items return True, even if different objects."}
{"instruction": "Explain how to find the intersection of two lists without using `set()`.", "response": "Use `[x for x in list1 if x in list2 and x not in result]` to find intersection manually."}
{"instruction": "Explain what `None` evaluates to in a Boolean context.", "response": "`None` evaluates to `False` in Boolean context — it's a void, after all."}
{"instruction": "Explain the difference between `+=` and `=+` in Python.", "response": "`+=` adds and reassigns. `=+` just sets the variable to a positive value."}
{"instruction": "Explain how to test whether two variables point to the same object.", "response": "Use `is` to test identity: `a is b` is True only if they point to the same object."}
{"instruction": "Explain the difference between using `input()` and hardcoded values in Python.", "response": "`input()` gets user input at runtime; hardcoded values are fixed in the code."}
{"instruction": "Explain how to use the `max()` function with a custom key.", "response": "Use `max(iterable, key=lambda x: ...)` to customize the comparison logic."}
{"instruction": "Explain how to check if all characters in a string are alphabetic using `isalpha()`.", "response": "Use `string.isalpha()` — returns True if all characters are alphabetic."}
{"instruction": "Explain how Python handles integer division versus float division.", "response": "`/` always returns a float, `//` returns an integer by truncating the decimal."}
{"instruction": "Explain how to test whether a character is a vowel or consonant.", "response": "Check if char in `'aeiouAEIOU'` → vowel; else consonant if it’s a letter."}
{"instruction": "Explain how to reverse a number using math operations.", "response": "Use a loop to extract digits and rebuild the number in reverse."}
{"instruction": "Explain what the `abs()` function does in Python.", "response": "Returns the absolute (non-negative) value of a number."}
{"instruction": "Explain how to find the largest digit in an integer.", "response": "Convert to string, use `max()` to get the largest digit."}
{"instruction": "Explain how to calculate the sum of digits of a number using a loop.", "response": "Use a while loop to extract digits with `% 10` and add them."}
{"instruction": "Explain what happens if you slice a string beyond its length.", "response": "Python just returns as much as it can — no error if end is out of bounds."}
{"instruction": "Explain how to test if a string is a valid number before converting it.", "response": "Use `string.isdigit()` or try `int()` inside a try-except block."}
{"instruction": "Explain how to create a multiplication table using nested loops.", "response": "Nested loops: outer for rows, inner for columns. Multiply indices."}
{"instruction": "Explain how to convert a number to binary without using `bin()`.", "response": "Divide by 2 repeatedly, store remainders, and reverse them."}
{"instruction": "Explain how to test whether a number is a perfect square.", "response": "Check if `sqrt(n).is_integer()` or if `i*i == n` in a loop."}
{"instruction": "Explain how to find the common characters between two strings.", "response": "Use `set(s1) & set(s2)` to get shared characters."}
{"instruction": "Explain how to count how many words in a sentence start with a specific letter.", "response": "Split sentence, loop through words, check `word.startswith(letter)`."}
{"instruction": "Explain how to center text using string formatting in Python.", "response": "Use `'{:^width}'.format(text)` or `f'{text:^width}'`."}
{"instruction": "Explain how to create a pattern using nested loops and `print()`.", "response": "Two nested loops: outer for rows, inner for symbols — print shapes."}
{"instruction": "Explain how to check if two strings are anagrams.", "response": "Sort and compare character counts using `collections.Counter()`."}
{"instruction": "Explain how to find the factorial of a number using a `for` loop.", "response": "Use a loop: multiply all integers from 1 to n."}
{"instruction": "Explain how to find the LCM of two numbers using a loop.", "response": "Start from max(a, b); check multiples until divisible by both."}
{"instruction": "Explain how to convert hours and minutes into total seconds in Python.", "response": "Multiply hours by 3600 and minutes by 60, then add."}
{"instruction": "Explain how to test whether a string contains only whitespace characters.", "response": "Use `string.isspace()` — returns True if only whitespace."}
{"instruction": "Explain the difference between `isupper()` and `islower()`.", "response": "`isupper()` checks for all uppercase, `islower()` checks for all lowercase."}
{"instruction": "Explain how to extract only numbers from a mixed string using a loop.", "response": "Loop and use `char.isdigit()` to collect digits."}
{"instruction": "Explain how to manually count occurrences of a character in a string.", "response": "Loop and increment a counter when the target char is found."}
{"instruction": "Explain how to build a new string by removing specific characters.", "response": "Build a new string skipping the unwanted characters."}
{"instruction": "Explain how to detect a repeated pattern in a string.", "response": "Check if string can be built by repeating a substring."}
{"instruction": "Explain how to capitalize the first letter of each word without using `title()`.", "response": "Capitalize first letter manually: `word[0].upper() + word[1:]`."}
{"instruction": "Explain how to determine the second largest number in a list.", "response": "Remove max, then find max again — that’s the second largest."}
{"instruction": "Explain how to remove all `None` values from a list.", "response": "Use list comprehension: `[x for x in lst if x is not None]`."}
{"instruction": "Explain how to use `sorted()` with a lambda to sort by the last letter.", "response": "Use `sorted(words, key=lambda w: w[-1])` to sort by last letter."}
{"instruction": "Explain how to get the middle character of a string.", "response": "Return `s[len(s)//2]` — use slicing if even-length."}
{"instruction": "Explain how to use slicing to reverse a list.", "response": "Use slicing: `lst[::-1]`."}
{"instruction": "Explain how to find the number of digits in an integer without converting it to a string.", "response": "Use a loop and divide by 10 until the number becomes 0."}
{"instruction": "Explain the difference between `list()` and using square brackets to create a list.", "response": "`list()` converts from iterable; `[]` is for defining manually."}
{"instruction": "Explain how to zip three lists into a list of tuples.", "response": "Use `zip(list1, list2, list3)` — creates tuples with 3 items."}
{"instruction": "Explain what happens if you modify a list while iterating over it.", "response": "Can lead to skipped items or unexpected behavior — use copy or loop over slice."}
{"instruction": "Explain how to sort a list of strings by length.", "response": "Use `sorted(words, key=len)`."}
{"instruction": "Explain how to check whether a list is sorted.", "response": "Use `lst == sorted(lst)` or compare each element with the next."}
{"instruction": "Explain how to replace all instances of a value in a list with another value.", "response": "Loop and replace target with new value using indexing or comprehension."}
{"instruction": "Explain how to flatten a list of tuples into a single list.", "response": "Use a loop or `sum(list_of_tuples, [])` to flatten."}
{"instruction": "Explain how to count how many strings in a list contain only vowels.", "response": "Check each string: all letters in `'aeiouAEIOU'` and not empty."}
{"instruction": "Explain how to create a list of even numbers using list comprehension.", "response": "Use `[x for x in range(n) if x % 2 == 0]`."}
{"instruction": "Explain how to remove all falsy values from a list.", "response": "Use `[x for x in lst if x]` — removes False, 0, '', None, etc."}
{"instruction": "Explain how to use a list of keys to build a dictionary with default values.", "response": "Use `{k: default for k in keys}` with a list of keys."}
{"instruction": "Explain how to generate a random number using the `random` module.", "response": "Use `random.randint(a, b)` or `random.random()` for floats."}
{"instruction": "Explain how to shuffle the elements of a list.", "response": "Use `random.shuffle(my_list)` to shuffle in place."}
{"instruction": "Explain how to seed the random number generator in Python.", "response": "Use `random.seed(value)` to make results reproducible."}
{"instruction": "Explain how to create a delay in your program using the `time` module.", "response": "Use `time.sleep(seconds)` to pause the program."}
{"instruction": "Explain how to measure the execution time of a block of code.", "response": "Use `time.time()` before and after the block, subtract to get duration."}
{"instruction": "Explain how to format a float with commas as thousand separators.", "response": "Use `f'{number:,.2f}'` to format with commas."}
{"instruction": "Explain how to create a right-aligned column of numbers using string formatting.", "response": "Use `f'{num:>width}'` to align right with a specific width."}
{"instruction": "Explain how to convert a list of strings to integers using a loop.", "response": "Loop through list and use `int(x)` for each string."}
{"instruction": "Explain how to extract the domain name from an email address using slicing.", "response": "Use slicing: `email[email.index('@')+1:]`."}
{"instruction": "Explain how to test whether two lists have the same elements regardless of order.", "response": "Use `set(list1) == set(list2)` if duplicates don't matter."}
{"instruction": "Explain how to remove punctuation from all strings in a list.", "response": "Loop and use `str.translate()` or regex to strip punctuation."}
{"instruction": "Explain how to group words by their first letter using a dictionary.", "response": "Use a dictionary with first letter as key, append words to list values."}
{"instruction": "Explain how to sort a list of dictionaries by a specific key.", "response": "Use `sorted(dicts, key=lambda x: x['key'])`."}
{"instruction": "Explain how to use `setdefault()` to group values in a dictionary.", "response": "Use `d.setdefault(key, []).append(value)` to group by key."}
{"instruction": "Explain how to reverse the keys and values in a dictionary.", "response": "Use `{v: k for k, v in dict.items()}` — may lose values if duplicates."}
{"instruction": "Explain how to merge two dictionaries using dictionary unpacking.", "response": "Use `{**dict1, **dict2}` in Python 3.5+."}
{"instruction": "Explain how to remove a key from a dictionary only if it exists.", "response": "Use `dict.pop(key, None)`."}
{"instruction": "Explain how to initialize a dictionary with default values using `fromkeys()`.", "response": "Use `dict.fromkeys(keys, default_value)`."}
{"instruction": "Explain how to count characters in a string using a dictionary.", "response": "Loop and use a dictionary to increment character counts."}
{"instruction": "Explain how to create a dictionary from a list of key-value tuples.", "response": "Use `dict(list_of_tuples)`."}
{"instruction": "Explain how to sort dictionary items by key or value.", "response": "Use `sorted(dict.items())` for keys, `sorted(dict.items(), key=lambda x: x[1])` for values."}
{"instruction": "Explain how to remove all whitespace characters from a string.", "response": "Use `''.join(s.split())` or regex to remove all whitespace."}
{"instruction": "Explain how to count the number of words in a string.", "response": "Use `len(s.split())`."}
{"instruction": "Explain how to split a string into a list of sentences.", "response": "Use `s.split('.')` or `re.split(r'[.!?]', s)`."}
{"instruction": "Explain how to convert a sentence into a list of ASCII values.", "response": "Use `[ord(c) for c in sentence]`."}
{"instruction": "Explain how to return the most frequent word in a sentence.", "response": "Split, count with `collections.Counter`, return `most_common(1)`."}
{"instruction": "Explain how to find all capital letters in a string using a loop.", "response": "Loop and check `char.isupper()`."}
{"instruction": "Explain how to compare two strings and return their common prefix.", "response": "Loop and compare chars until mismatch, return matched prefix."}
{"instruction": "Explain how to alternate case in a string starting with uppercase.", "response": "Toggle case every other character using index modulo 2."}
{"instruction": "Explain how to swap the case of each character in a string.", "response": "Use `s.swapcase()`."}
{"instruction": "Explain how to test whether a string has balanced parentheses.", "response": "Use a counter: `+1` for `(`, `-1` for `)` — must end at zero."}
{"instruction": "Explain how to convert a list of words into a hyphen-separated string.", "response": "Use `'-'.join(words)`."}
{"instruction": "Explain how to detect duplicate words in a sentence.", "response": "Split, then check if `len(set(words)) != len(words)`."}
{"instruction": "Explain how to find the longest palindromic substring in a string.", "response": "Expand around each center to find longest matching palindrome."}
{"instruction": "Explain how to convert a comma-separated string to a list of integers.", "response": "Split by `','`, then convert each to `int`."}
{"instruction": "Explain how to check if all items in a list are strings.", "response": "Use `all(isinstance(x, str) for x in lst)`."}
{"instruction": "Explain how to capitalize only the last letter of each word.", "response": "Use `word[:-1] + word[-1].upper()` in a loop."}
{"instruction": "Explain how to filter a list of strings by a specific prefix.", "response": "Use `[w for w in words if w.startswith(prefix)]`."}
{"instruction": "Explain how to create a matrix using a list of lists.", "response": "Use `[ [0]*cols for _ in range(rows) ]` or custom data."}
{"instruction": "Explain how to print a matrix row by row using nested loops.", "response": "Loop outer for rows, inner for columns — print row by row."}
{"instruction": "Explain how to transpose a matrix manually using loops.", "response": "Loop and reassign: `transposed[j][i] = matrix[i][j]`."}
{"instruction": "Explain how to reverse each row in a 2D list.", "response": "Loop through each row and use `row.reverse()` or `[::-1]`."}
{"instruction": "Explain how to sum the diagonal of a square matrix.", "response": "Sum values where `i == j` in nested loops."}
{"instruction": "Explain how to flatten a 2D list using list comprehension.", "response": "Use `[item for row in matrix for item in row]`."}
{"instruction": "Explain how to generate a checkerboard pattern using loops.", "response": "Use nested loops: alternate `0` and `1` based on `(i + j) % 2`."}
{"instruction": "Explain how to create a list of digits from a number using math.", "response": "Extract digits with `% 10` and `// 10`, append to list."}
{"instruction": "Explain how to find the sum of even digits in a number.", "response": "Use loop and check `digit % 2 == 0`, then sum."}
{"instruction": "Explain how to detect repeated digits in an integer.", "response": "Use set to track digits; return True if a digit repeats."}
{"instruction": "Explain how to find the maximum digit in a number without converting to string.", "response": "Track max digit using math: `max = 0; while n: max = max(n%10, max); n //= 10`."}
{"instruction": "Explain how to check if a number is an Armstrong number.", "response": "Sum each digit raised to the power of total digits, compare with original."}
{"instruction": "Explain how to convert a binary string to an integer manually.", "response": "Loop from end, multiply digit by powers of 2, sum."}
{"instruction": "Explain how to create a function that checks for prime numbers.", "response": "Check divisibility from 2 to sqrt(n), return False if any divides."}
{"instruction": "Explain how to generate the first `n` prime numbers.", "response": "Loop until you find `n` primes, use is-prime check for each."}
{"instruction": "Explain how to count how many prime digits are in a number.", "response": "Extract digits, count how many are 2, 3, 5, or 7."}
{"instruction": "Explain how to determine if a number is a palindrome using math.", "response": "Reverse the number using math (`while n: rev = rev*10 + n%10`) and compare with original."}
{"instruction": "Explain how to generate a list of square numbers using a loop.", "response": "Use a loop: `[i*i for i in range(n)]` or build manually with `i**2` inside loop."}
{"instruction": "Explain how to print a triangle of stars with increasing length.", "response": "Use a loop to print `i * '*'` for increasing `i` values."}
{"instruction": "Explain how to use the `divmod()` function and what it returns.", "response": "`divmod(a, b)` returns a tuple `(a // b, a % b)` — division and remainder."}
{"instruction": "Explain how to extract digits from an integer using a loop.", "response": "Loop while `n > 0`, use `n % 10` to get digit and `n //= 10` to reduce."}
{"instruction": "Explain how to convert a number to octal manually.", "response": "Keep dividing by 8, store remainders in reverse order."}
{"instruction": "Explain how to count how many times each digit appears in a number.", "response": "Use a dict to count: extract digits with `% 10`, update count, then `// 10`."}
{"instruction": "Explain how to remove all duplicate digits from a number.", "response": "Use a set to track seen digits while extracting with `% 10`, skip if already seen."}
{"instruction": "Explain how to sum only the digits at even positions in a number.", "response": "Extract digits and track position; sum if index is even."}
{"instruction": "Explain how to alternate between two characters in a looped pattern.", "response": "Use modulo: `char = a if i % 2 == 0 else b` inside loop."}
{"instruction": "Explain how to replace all digits in a string with their squares.", "response": "Loop through string, `if c.isdigit(): replace with str(int(c)**2)`."}
{"instruction": "Explain how to count letters, digits, and symbols separately in a string.", "response": "Loop and count with conditions: `isalpha()`, `isdigit()`, else symbol."}
{"instruction": "Explain how to test whether a number is a power of 2.", "response": "Keep dividing by 2; if remainder ever not 0, return False. Final value must be 1."}
{"instruction": "Explain how to calculate the sum of factorials of all digits in a number.", "response": "Loop digits with `% 10`, take factorial of each, sum up."}
{"instruction": "Explain how to print a numeric pyramid using nested loops.", "response": "Nested loops — outer for rows, inner for printing `1..i` on each row."}
{"instruction": "Explain how to create a countdown timer using a loop.", "response": "Loop from `n` to `0`, use `time.sleep(1)` and `print()` each second."}
{"instruction": "Explain how to display a live updating progress bar using `print()` and `time.sleep()`.", "response": "Use `print(f'Progress: {i}%', end='\\r')` in a loop with `time.sleep()`."}
{"instruction": "Explain how to detect palindromes in a list of strings.", "response": "Loop through list, check if each word equals its reverse."}
{"instruction": "Explain how to use `any()` to test if any value in a list is true.", "response": "`any()` returns `True` if at least one item is truthy: `any(lst)`."}
{"instruction": "Explain how to use `all()` to confirm that all items in a list meet a condition.", "response": "`all()` returns `True` only if all elements are truthy: `all(x > 0 for x in lst)`."}
{"instruction": "Explain how to extract every third character from a string.", "response": "Use slicing: `s[::3]`."}
{"instruction": "Explain how to find common elements in three lists without using sets.", "response": "Loop and check membership across all three lists manually with nested conditions."}
{"instruction": "Explain how to zip two strings together character by character.", "response": "Use `zip()` on the strings, join pairs: `[a + b for a, b in zip(s1, s2)]`."}
{"instruction": "Explain how to calculate the average word length in a sentence.", "response": "Split sentence, get average: `sum(len(w) for w in words) / len(words)`."}
{"instruction": "Explain how to build a dictionary that maps letters to their positions in a string.", "response": "Use `enumerate()`, map letters to indices using a dict."}
{"instruction": "Explain how to find all substrings of a string that contain only vowels.", "response": "Use nested loops or sliding window; test substrings with all vowels."}
{"instruction": "Explain how to test if a list contains only unique values.", "response": "Check `len(lst) == len(set(lst))`."}
{"instruction": "Explain how to check if a word is a substring of another word.", "response": "Use `'sub' in 'main'` to check substring presence."}
{"instruction": "Explain how to sort a list of strings ignoring case.", "response": "Use `sorted(lst, key=str.lower)`."}
{"instruction": "Explain how to convert a list of characters into a sentence with proper spacing.", "response": "Use `''.join(list)` and `.replace()` or insert spaces manually."}
{"instruction": "Explain how to print only the boundary characters of a string.", "response": "Print `s[0]` and `s[-1]` — first and last character only."}
{"instruction": "Explain how to count how many times each character appears in a sentence.", "response": "Use `collections.Counter(sentence)` or a dict with loop counting."}
{"instruction": "Explain how to reverse a list without using built-in methods.", "response": "Build reversed list manually by prepending items: `new = [x] + new`."}
{"instruction": "Explain how to remove the shortest word from a sentence.", "response": "Split sentence, use `min(words, key=len)` and remove it."}
{"instruction": "Explain how to convert a number to its digit sum repeatedly until one digit remains.", "response": "Keep summing digits until `n < 10`: digit root logic."}
{"instruction": "Explain how to group strings by their lengths using a dictionary.", "response": "Use a dict with length as key, append words to value lists."}
{"instruction": "Explain how to reverse the words in a sentence without reversing the characters.", "response": "Split sentence, reverse list, join back with spaces."}
{"instruction": "Explain how to capitalize the last letter of each word in a sentence.", "response": "Capitalize last char: `word[:-1] + word[-1].upper()` per word."}
{"instruction": "Explain how to find the most frequent digit in a string of numbers.", "response": "Use a dictionary to count digits, return max by value."}
{"instruction": "Explain how to slice a list in reverse with a step of 2.", "response": "Use slicing: `lst[::-2]`."}
{"instruction": "Explain how to find which character has the highest ASCII value in a string.", "response": "Use `max(string, key=ord)`."}
{"instruction": "Explain how to test if all elements in a list are even.", "response": "Check `all(x % 2 == 0 for x in lst)`."}
{"instruction": "Explain how to replace the vowels in a string with numbers.", "response": "Map vowels to numbers, replace in loop or with `str.translate()`."}
{"instruction": "Explain how to create a string by removing all digits from a given sentence.", "response": "Use regex or loop filtering `not c.isdigit()`."}
{"instruction": "Explain how to check if a list is symmetrical around its center.", "response": "Check `lst == lst[::-1]` to test for symmetry."}
{"instruction": "Explain how to print only alternate characters from the end of a string.", "response": "Use slicing: `s[::-2]`."}
{"instruction": "Explain how to create a dictionary of words grouped by their first letter.", "response": "Use first letter as dictionary key, append word to that list."}
{"instruction": "Explain how to round every float in a list to the nearest integer.", "response": "Use `[round(x) for x in floats]`."}
{"instruction": "Explain how to find the length of the longest word in a list.", "response": "Use `max(words, key=len)` and get its length."}
{"instruction": "Explain how to remove all non-letter characters from a string.", "response": "Use `''.join(c for c in s if c.isalpha())`."}
{"instruction": "Explain how to identify if a number contains all even digits.", "response": "Convert number to string, check if all digits are even using `all(int(d)%2==0 for d in str(n))`."}
{"instruction": "Explain how to check whether a string ends in a digit.", "response": "Use `str[-1].isdigit()` to check if the last character is a digit."}
{"instruction": "Explain how to extract all numeric substrings from a string.", "response": "Use regex: `re.findall(r'\\d+', string)` to extract all numeric parts."}
{"instruction": "Explain how to convert a list of binary strings to integers.", "response": "Loop over list, convert with `int(b, 2)` for each binary string."}
{"instruction": "Explain how to print each digit of a number on a separate line.", "response": "Convert number to string, loop through each digit and print it."}
{"instruction": "Explain how to check whether a number is divisible by the product of its digits.", "response": "Multiply digits, avoid zero, check `n % product == 0`."}
{"instruction": "Explain how to group a string into pairs of two characters each.", "response": "Use slicing with step 2: `[s[i:i+2] for i in range(0, len(s), 2)]`."}
{"instruction": "Explain how to pad a number with leading zeros to make it 5 digits long.", "response": "Use `str.zfill(5)` or `f'{n:05d}'` to pad with zeros."}
{"instruction": "Explain how to print a letter pyramid using a loop.", "response": "Use nested loops to print alphabet pyramid using `chr()` and `ord()`."}
{"instruction": "Explain how to remove trailing punctuation from words in a sentence.", "response": "Use `word.rstrip(string.punctuation)` on each word."}
{"instruction": "Explain how to determine if a character is a letter using ASCII ranges.", "response": "Check ASCII: `'A' <= c <= 'Z' or 'a' <= c <= 'z'`."}
{"instruction": "Explain how to build a new string skipping every second vowel.", "response": "Loop with vowel check, skip every second using a counter."}
{"instruction": "Explain how to center text output with padding characters other than space.", "response": "Use `str.center(width, fillchar)` for non-space padding."}
{"instruction": "Explain how to find the longest sequence of digits in a mixed string.", "response": "Use regex: `max(re.findall(r'\\d+', s), key=len)`."}
{"instruction": "Explain how to test whether a string has more digits than letters.", "response": "Count digits and letters, compare `digits > letters`."}
{"instruction": "Explain how to alternate between two entire lists item by item.", "response": "Use `zip_longest(list1, list2)` and flatten alternating pairs."}
{"instruction": "Explain how to remove punctuation from the end of each word in a list.", "response": "Use `w.rstrip(string.punctuation)` for each word in list."}
{"instruction": "Explain how to generate all pairs of elements from a list.", "response": "Use nested loops or `itertools.combinations(lst, 2)`."}
{"instruction": "Explain how to get the last vowel in a string using reverse iteration.", "response": "Reverse string, return first char that's a vowel."}
{"instruction": "Explain how to create a string from every even-positioned character in a list of strings.", "response": "Join chars at even index in each string: `[s[::2] for s in lst]`."}
{"instruction": "Explain how to find the sum of characters at even indices in a string.", "response": "Sum `ord(char)` for every even-index character: `sum(ord(s[i]) for i in range(0, len(s), 2))`."}
{"instruction": "Explain how to alternate between uppercase and lowercase words in a sentence.", "response": "Split sentence, alternate with `.upper()` and `.lower()` on each word using index."}
{"instruction": "Explain how to extract all words in a sentence that contain at least one digit.", "response": "Split sentence, use `any(c.isdigit() for c in word)` filter."}
{"instruction": "Explain how to check if a number is divisible by the sum of its odd digits.", "response": "Extract odd digits, sum them, check divisibility."}
{"instruction": "Explain how to test whether a sentence uses all 26 letters of the alphabet.", "response": "Check `len(set(sentence.lower()) & set('abcdefghijklmnopqrstuvwxyz')) == 26`."}
{"instruction": "Explain how to compare two strings and count the characters that are different.", "response": "Zip strings, compare each char, count mismatches."}
{"instruction": "Explain how to convert each word in a list to its reversed uppercase form.", "response": "Use `word[::-1].upper()` on each word in list."}
{"instruction": "Explain how to return the number of punctuation marks in a list of sentences.", "response": "Use regex in loop or count characters like `.?!,:;'\\'`."}
{"instruction": "Explain how to find the longest common suffix between two strings.", "response": "Reverse strings, find common prefix, then reverse result."}
{"instruction": "Explain how to build a dictionary that counts how often each word appears in a paragraph.", "response": "Split paragraph, use `collections.Counter(words)`."}
{"instruction": "Explain how to determine whether a number contains the same digits as another number.", "response": "Sort digits of both numbers, compare as strings."}
{"instruction": "Explain how to strip a string of all leading numbers.", "response": "Loop until non-digit found, then slice string from there."}
{"instruction": "Explain how to use slicing to extract the center of a string.", "response": "Use `s[(len(s)-1)//2 : (len(s)+2)//2]` for center char(s)."}
{"instruction": "Explain how to convert a list of tuples into a dictionary.", "response": "Use `dict(list_of_tuples)` to convert."}
{"instruction": "Explain how to determine if one list is the reverse of another.", "response": "Check `list1 == list2[::-1]`."}
{"instruction": "Explain how to convert a number to its Roman numeral representation.", "response": "Use loop with subtraction to convert integer to Roman numeral with rules table."}
{"instruction": "Explain how to capitalize the middle character of each word in a sentence.", "response": "Use string slicing per word: replace middle char with `.upper()`."}
{"instruction": "Explain how to return a dictionary with only the items whose values are even numbers.", "response": "Dict comprehension: `{k: v for k, v in d.items() if v % 2 == 0}`."}
{"instruction": "Explain how to return a string with only the unique characters from a list of strings.", "response": "Flatten all strings, use `set()` to get unique chars, join back."}
{"instruction": "Explain how to generate a checkerboard-style pattern using characters.", "response": "Use nested loops and alternate characters per row and column indexes."}
{"instruction": "Explain how to test if a number is equal to the sum of its proper divisors.", "response": "Find all proper divisors (< number), sum them, compare to original."}
{"instruction": "Explain how to format output so that list items print one per line with a bullet point.", "response": "Loop through list, print each as `• item` or `f'- {item}'`."}
{"instruction": "Explain how to test whether the digits of a number are in ascending order.", "response": "Convert number to string, check if digits are in sorted order."}
{"instruction": "Explain how to sort a string by frequency of its characters.", "response": "Count with `Counter()`, then `''.join(sorted(s, key=lambda c: (-freq[c], c)))`."}
{"instruction": "Explain how to compute the product of all digits in a string.", "response": "Filter digits in string, then use `math.prod(int(d) for d in digits)`."}
{"instruction": "Explain how to test if a list is made only of palindromes.", "response": "Loop and check `s == s[::-1]` for every item."}
{"instruction": "Explain how to replace the last digit of a number with a zero.", "response": "Convert to string, replace last char with `'0'`, convert back to int."}
{"instruction": "Explain how to count how many strings in a list are all uppercase.", "response": "Count with `sum(s.isupper() and s.isalpha() for s in list)`."}
{"instruction": "Explain how to return a list of integers that are palindromes and divisible by 3.", "response": "Filter with `str(n) == str(n)[::-1] and n % 3 == 0`."}
{"instruction": "Explain how to detect repeating character sequences in a string.", "response": "Use regex `r'(.)\\\\1+'` or loop and track streaks."}
{"instruction": "Explain how to create a string made of every third character from a list of strings.", "response": "Loop through each string in the list, extract every third character using slicing (`s[2::3]`), and concatenate them to form the final string."}
{"instruction": "Explain how to check if a number has alternating even and odd digits.", "response": "Convert the number to a string, then iterate over each digit. Check that adjacent digits alternate between even and odd using `int(d) % 2`."}
{"instruction": "Explain how to print a square made of asterisks with a hollow center.", "response": "Use nested loops to print a square. Print `*` on borders, and space in the center using `if i == 0 or i == n-1 or j == 0 or j == n-1`."}
{"instruction": "Explain how to detect if a string contains any repeated character more than twice.", "response": "Use `collections.Counter` to count characters and check if any character has a count greater than 2."}
{"instruction": "Explain how to rotate the characters in a string to the right by 1 position.", "response": "Convert string to list, take the last character, and concatenate it with the rest using slicing: `s[-1] + s[:-1]`."}
{"instruction": "Explain how to count the number of lowercase vowels in a list of words.", "response": "Loop through the list of words, count lowercase vowels using a condition like `c in 'aeiou'`."}
{"instruction": "Explain how to compute the digital root of a number.", "response": "Sum the digits repeatedly until a single digit remains. You can use `while n >= 10: n = sum(map(int, str(n)))`."}
{"instruction": "Explain how to test if a number is a palindrome using string conversion.", "response": "Convert the number to a string and compare it to its reverse: `str(n) == str(n)[::-1]`."}
{"instruction": "Explain how to extract a substring between two delimiters in a string.", "response": "Use string methods or slicing with `find()` or `index()` to get the substring between two delimiters."}
{"instruction": "Explain how to replace all spaces in a string with dashes, except the first one.", "response": "Split the string using `split(' ', 1)` and replace spaces in the second part using `.replace(' ', '-')`."}
{"instruction": "Explain how to reverse the order of words in a sentence using slicing.", "response": "Split the sentence with `split()`, reverse the list with slicing `[::-1]`, and join it back with `' '.join()`."}
{"instruction": "Explain how to repeat each character in a string three times.", "response": "Use a list comprehension or generator: `''.join(c*3 for c in s)` to repeat each character 3 times."}
{"instruction": "Explain how to find the character that appears most frequently in a string.", "response": "Use `collections.Counter` and get the character with the highest count using `max(counter, key=counter.get)`."}
{"instruction": "Explain how to build a string from the diagonal elements of a square matrix.", "response": "Assuming a square matrix, loop through the indices and collect elements where `i == j`."}
{"instruction": "Explain how to remove every second word from a sentence.", "response": "Split the sentence, use slicing with step 2 (`words[::2]`), and join it back with spaces."}
{"instruction": "Explain how to build a list of all two-digit numbers where both digits are the same.", "response": "Use a list comprehension: `[i for i in range(10, 100) if str(i)[0] == str(i)[1]]`."}
{"instruction": "Explain how to capitalize characters in a string at every third position.", "response": "Loop through the string with `enumerate`, capitalize characters where index `i % 3 == 2`."}
{"instruction": "Explain how to identify whether a number is prime without using a helper function.", "response": "Use a loop to check if number `n` is divisible by any integer from 2 to `sqrt(n)`. If so, it's not prime."}
{"instruction": "Explain how to convert a sentence into camelCase format.", "response": "Split sentence, lowercase first word, capitalize the first letter of each subsequent word, and join: `'first' + ''.join(w.capitalize() for w in rest)`."}
{"instruction": "Explain how to check if a list of numbers is strictly increasing.", "response": "Use `all(lst[i] < lst[i+1] for i in range(len(lst)-1))` to check strictly increasing order."}
{"instruction": "Explain how to find the shortest palindrome in a list of words.", "response": "Filter palindromes from the list, then return the one with the shortest length using `min()`."}
{"instruction": "Explain how to swap characters at even and odd indices in a string.", "response": "Convert to list, swap every pair of characters at indices i and i+1 using a loop, then join the list back to a string."}
{"instruction": "Explain how to truncate a string to its first `n` words.", "response": "Split the string and join only the first `n` words using `' '.join(words[:n])`."}
{"instruction": "Explain how to count how many numbers in a list are divisible by both 3 and 5.", "response": "Loop through the list and count numbers divisible by both 3 and 5 using `n % 15 == 0`."}
{"instruction": "Explain how to find which character appears first more than once in a string.", "response": "Use a set to track seen characters, return the first one encountered again."}
{"instruction": "Explain how to construct a list from the last characters of each word in a sentence.", "response": "Split the sentence and collect the last character from each word using list comprehension."}
{"instruction": "Explain how to print a right-aligned triangle of numbers using nested loops.", "response": "Use nested loops. Outer loop for each row, inner loop for spaces and numbers. Right-align by printing decreasing spaces before numbers."}
{"instruction": "Explain how to check if a string has balanced quotes.", "response": "Track opening and closing quotes using a counter or boolean toggle. Balanced if all quotes are paired properly."}
{"instruction": "Explain how to count how many characters are between two specific characters.", "response": "Use `str.index()` to find positions of the two characters, then subtract their indices."}
{"instruction": "Explain how to remove every word from a string that contains a digit.", "response": "Split string into words, filter out any word that contains digits using `any(c.isdigit() for c in word)`."}
{"instruction": "Explain how to check if a string contains only punctuation characters.", "response": "Use `all(c in string.punctuation for c in s)` to verify if all characters are punctuation."}
{"instruction": "Explain how to extract the last three unique characters from a string.", "response": "Use a reversed loop and a set to collect unique characters until you have three, then reverse the result."}
{"instruction": "Explain how to find which character occurs the least in a string.", "response": "Use `collections.Counter` and find the character with the lowest count that appears at least once."}
{"instruction": "Explain how to sum all digits in a string while skipping even numbers.", "response": "Loop through the string, convert to digits, skip even ones, and sum the rest."}
{"instruction": "Explain how to extract every character between the first and last space in a sentence.", "response": "Use `str.find(' ')` and `str.rfind(' ')` to find the space boundaries, then slice the substring between them."}
{"instruction": "Explain how to detect if two strings are reverses of each other.", "response": "Check if one string equals the reverse of the other: `s1 == s2[::-1]`."}
{"instruction": "Explain how to count the number of times each vowel appears in a paragraph.", "response": "Normalize the paragraph, iterate through characters, and count vowels using a dictionary or `collections.Counter`."}
{"instruction": "Explain how to insert a character between each letter in a string.", "response": "Use `join()` with the separator character: `separator.join(s)`."}
{"instruction": "Explain how to test if a number contains more even digits than odd digits.", "response": "Count even and odd digits in number, return True if even count > odd count."}
{"instruction": "Explain how to format a string to display only the initials of each word.", "response": "Split sentence, take the first letter of each word, capitalize it, and join: `' '.join(w[0].upper() for w in s.split())`."}
{"instruction": "Explain how to build a string where vowels are uppercase and consonants are lowercase.", "response": "Loop through characters, capitalize if vowel, lowercase otherwise: `c.upper() if c in 'aeiou' else c.lower()`."}
{"instruction": "Explain how to remove all characters from a string except the first and last.", "response": "Return `s[0] + s[1:-1].replace(s[1:-1], '') + s[-1]` or simply `s[0] + s[-1]` if not empty."}
{"instruction": "Explain how to identify the first word in a sentence with repeating letters.", "response": "Loop through words, use `collections.Counter()` to check for repeated letters, return first match."}
{"instruction": "Explain how to double the digits of a number and reassemble the result.", "response": "Convert number to string, double each digit, and join: `''.join(str(int(d)*2) for d in str(n))`."}
{"instruction": "Explain how to check if every letter in a word appears exactly once.", "response": "Check if `len(set(word)) == len(word)` to ensure all letters are unique."}
{"instruction": "Explain how to convert a number to a string and reverse the digits.", "response": "Use `str(n)[::-1]` to reverse digits after converting to string."}
{"instruction": "Explain how to strip digits and symbols from the beginning and end of a string.", "response": "Use regex or loop from beginning to end, removing digits and symbols with conditionals or `str.strip()`."}
{"instruction": "Explain how to replace all lowercase letters in a string with their position in the alphabet.", "response": "Loop through each lowercase letter, get its alphabet position using `ord(c) - 96`, and replace it."}
{"instruction": "Explain how to wrap text so that no line exceeds 40 characters.", "response": "Use `textwrap.wrap()` with width=40 or manually build lines checking `len(line) < 40` while appending words."}
{"instruction": "Explain how to count how many characters in a string are surrounded by the same character.", "response": "Loop through the string, check if the character before and after a char are the same, and count such occurrences."}
{"instruction": "Explain how to find the character that occurs an odd number of times in a string.", "response": "Use `collections.Counter` to count characters and return one with an odd count using `count % 2 == 1`."}
{"instruction": "Explain how to extract a substring that starts and ends with a vowel.", "response": "Loop through all substrings and return those where `s[0]` and `s[-1]` are vowels."}
{"instruction": "Explain how to alternate the case of each character in a string.", "response": "Iterate over the string and use `c.upper()` if index is even, `c.lower()` if odd, or vice versa."}
{"instruction": "Explain how to return the sum of squares of only the even numbers in a list.", "response": "Use list comprehension with condition `x % 2 == 0`, then return `sum(x**2 for x in list)`."}
{"instruction": "Explain how to replace all punctuation in a string with spaces.", "response": "Use `str.translate` with `string.punctuation` and replace punctuation with spaces."}
{"instruction": "Explain how to reverse only the words in a sentence, not the punctuation.", "response": "Split sentence into words, reverse words list, then reattach punctuation at original positions."}
{"instruction": "Explain how to determine if a number contains the digit 7.", "response": "Convert number to string and check if `'7' in str(n)`."}
{"instruction": "Explain how to check if a list has duplicate elements without using `set()`.", "response": "Use nested loops to compare elements and return True on any duplicate match."}
{"instruction": "Explain how to remove all characters from a string except alphabetic and numeric ones.", "response": "Use regex: `re.sub('[^a-zA-Z0-9]', '', s)` to remove all non-alphanumeric characters."}
{"instruction": "Explain how to detect whether a string contains a repeated pattern.", "response": "Use string slicing and a loop to compare repeated patterns of length > 1."}
{"instruction": "Explain how to sort a list of tuples by the sum of their elements.", "response": "Sort the list using `key=lambda t: sum(t)` to sort by the sum of each tuple."}
{"instruction": "Explain how to test whether all items in a list are single-digit integers.", "response": "Check each item with `isinstance(i, int) and 0 <= i < 10` using `all()`."}
{"instruction": "Explain how to count the number of times a list alternates between even and odd numbers.", "response": "Loop through list and count index `i` where `parity(lst[i]) != parity(lst[i+1])`."}
{"instruction": "Explain how to build a list of integers that contain only the digit 3.", "response": "Use list comprehension: `[i for i in range(1, 1000) if set(str(i)) == {'3'}]`."}
{"instruction": "Explain how to remove every third character from a string.", "response": "Use slicing and list comprehension to skip every 3rd character: `s[i] for i in range(len(s)) if (i+1) % 3 != 0`."}
{"instruction": "Explain how to test if a list is a mirror image of itself.", "response": "Check if `lst == lst[::-1]`."}
{"instruction": "Explain how to compute the number of matching characters at the same position in two strings.", "response": "Compare characters at the same index in two strings using `sum(a == b for a, b in zip(s1, s2))`."}
{"instruction": "Explain how to split a sentence into alternating lists of odd- and even-positioned words.", "response": "Split sentence and use slicing: `words[::2]` and `words[1::2]` for odd and even respectively."}
{"instruction": "Explain how to replace only the first vowel in a string with an asterisk.", "response": "Iterate through string, find first vowel with `in 'aeiouAEIOU'`, replace and break."}
{"instruction": "Explain how to remove the shortest word from a sentence.", "response": "Split sentence, find word with `min(words, key=len)`, then remove and rejoin."}
{"instruction": "Explain how to count how many substrings in a string are palindromes.", "response": "Loop through all substrings and count those equal to their reverse."}
{"instruction": "Explain how to convert a number into a list of digits and back.", "response": "Convert number to digits: `list(map(int, str(n)))`, back with `int(''.join(map(str, digits)))`."}
{"instruction": "Explain how to create a list of words that are palindromes and contain the letter 'a'.", "response": "Filter with `[w for w in words if w == w[::-1] and 'a' in w]`."}
{"instruction": "Explain how to sort a list of numbers without using built-in sort functions.", "response": "Use bubble sort, selection sort, or any manual sort algorithm to reorder the list."}
{"instruction": "Explain how to create a list of prime numbers ending in 3 or 7.", "response": "Check each number with `is_prime(n)` and `str(n)[-1] in {'3','7'}`."}
{"instruction": "Explain how to center-align every line in a paragraph to 80 characters.", "response": "Split lines and use `str.center(80)` for each line."}
{"instruction": "Explain how to group characters in a string into 4-character blocks.", "response": "Use slicing or loop to create blocks: `s[i:i+4]` in steps of 4."}
{"instruction": "Explain how to remove every word that ends with a vowel from a sentence.", "response": "Split sentence, filter out words ending with vowels using `word[-1] not in 'aeiouAEIOU'`."}
{"instruction": "Explain how to sum all odd-positioned digits of a number.", "response": "Convert to string and sum digits at odd indices using slicing or loop."}
{"instruction": "Explain how to capitalize a string based on the number of vowels it contains.", "response": "Count vowels and use it to decide between `s.upper()` or `s.lower()`."}
{"instruction": "Explain how to return only the numbers in a list that are also palindromes.", "response": "Filter list with `str(n) == str(n)[::-1]` for palindrome check."}
{"instruction": "Explain how to strip all characters except the middle third from a string.", "response": "Calculate one-third of string length and return `s[start:end]` for the middle third."}
{"instruction": "Explain how to merge characters from two strings in alternating order.", "response": "Use `zip()` to alternate and concatenate characters from both strings."}
{"instruction": "Explain how to identify the shortest word in a string with at least three vowels.", "response": "Split sentence, filter words with at least 3 vowels, then return one with shortest length."}
{"instruction": "Explain how to reverse the digits of a number while ignoring zeroes.", "response": "Convert number to string, reverse, and remove zeros, then join and convert back to int."}
{"instruction": "Explain how to find the sum of all prime-positioned letters in a word (A=1, B=2, etc.).", "response": "Sum letter positions where the index (1-based) is prime using `ord(c.lower()) - 96`."}
{"instruction": "Explain how to convert a list of booleans into a binary string.", "response": "Use `''.join(['1' if b else '0' for b in list])`."}
{"instruction": "Explain how to count the total number of palindromes in a sentence.", "response": "Split into words, count palindromes with `w == w[::-1]`."}
{"instruction": "Explain how to extract the file extension from a filename string.", "response": "Split by `.` or `os.path.splitext(filename)[1]`."}
{"instruction": "Explain how to replace all digits in a sentence with their corresponding words.", "response": "Map each digit to its word using a dictionary and `re.sub()` or loop."}
{"instruction": "Explain how to test whether the ASCII sum of a string is even.", "response": "Sum ASCII values using `sum(ord(c) for c in s)` and check if even."}
{"instruction": "Explain how to identify the most common starting letter in a list of words.", "response": "Use `Counter(word[0] for word in words)` and return most common."}
{"instruction": "Explain how to check if a sentence is the reverse of another sentence.", "response": "Compare `s1.split()[::-1]` with `s2.split()`."}
{"instruction": "Explain how to extract every word that contains the letter ‘x’ from a sentence.", "response": "Split sentence and filter with `'x' in word.lower()`."}
{"instruction": "Explain how to find the middle word in a sentence with an odd number of words.", "response": "Split sentence and return the middle word using `len(words)//2`."}
{"instruction": "Explain how to check if every word in a list is lowercase.", "response": "Check `all(word.islower() for word in words)`."}
{"instruction": "Explain how to determine if a string contains an equal number of vowels and consonants.", "response": "Count vowels and consonants, compare counts for equality."}
{"instruction": "Explain how to replace every space in a string with the number of the word it separates.", "response": "Split sentence, insert word number between each word as a string."}
{"instruction": "Explain how to extract a list of words that are longer than 7 letters.", "response": "Use list comprehension with `len(w) > 7`."}
{"instruction": "Explain how to build a dictionary where each key is a word and the value is its length.", "response": "Use dictionary comprehension: `{word: len(word) for word in words}`."}
{"instruction": "Explain how to check if a string contains only letters.", "response": "Use `str.isalpha()` to check if the string contains only letters."}
{"instruction": "Explain how to find all the words in a sentence that are palindromes.", "response": "Split sentence and filter words where `word == word[::-1]`."}
{"instruction": "Explain how to replace the last vowel in a word with an asterisk.", "response": "Find the last vowel using reverse loop and replace it with `*`."}
{"instruction": "Explain how to convert a number into words digit by digit.", "response": "Map each digit to its word using a dictionary and join them."}
{"instruction": "Explain how to test if a number is divisible by the sum of its digits.", "response": "Sum digits with `sum(map(int, str(n)))` and check divisibility."}
{"instruction": "Explain how to extract words from a sentence that contain at least three vowels.", "response": "Split sentence and count vowels in each word; keep if `>= 3`."}
{"instruction": "Explain how to check if two lists contain the same elements in any order.", "response": "Sort both lists and compare, or use `collections.Counter`."}
{"instruction": "Explain how to split a string into three equal parts.", "response": "Check `len(s) % 3 == 0`, then slice into 3 equal parts."}
{"instruction": "Explain how to return the second most common word in a sentence.", "response": "Use `collections.Counter`, get most common[1][0]."}
{"instruction": "Explain how to rotate a list left by a given number of steps.", "response": "Use slicing: `lst[n:] + lst[:n]`."}
{"instruction": "Explain how to find the sum of characters that are the same in two strings of equal length.", "response": "Use `sum(a == b for a, b in zip(s1, s2))`."}
{"instruction": "Explain how to check if a string contains a consecutive pair of letters.", "response": "Check pairs using `ord(s[i+1]) == ord(s[i]) + 1` in loop."}
{"instruction": "Explain how to reverse only the digits in a string.", "response": "Extract digits, reverse them, and place back into string."}
{"instruction": "Explain how to check if a sentence contains duplicate words.", "response": "Split and use `len(set(words)) != len(words)`."}
{"instruction": "Explain how to remove the longest word from a sentence.", "response": "Find max with `key=len`, remove it, and rejoin sentence."}
{"instruction": "Explain how to sort a list of strings based on the number of vowels they contain.", "response": "Sort using `key=lambda w: sum(c in 'aeiouAEIOU' for c in w)`."}
{"instruction": "Explain how to get the first non-repeating character in a string.", "response": "Use `collections.OrderedDict` to count and return first with count 1."}
{"instruction": "Explain how to count the number of alphabetic characters in a string.", "response": "Use `sum(c.isalpha() for c in s)`."}
{"instruction": "Explain how to extract all substrings of length 3 from a given string.", "response": "Use list comprehension with `s[i:i+3]` for all valid `i`."}
{"instruction": "Explain how to capitalize only the middle word of a three-word sentence.", "response": "Split sentence and apply `capitalize()` to index 1."}
{"instruction": "Explain how to replace punctuation in a sentence with the word 'dot'.", "response": "Replace punctuation using `re.sub(r'[^\\w\\s]', ' dot ', s)`."}
{"instruction": "Explain how to group a list of numbers by even and odd.", "response": "Group using `{'even': [...], 'odd': [...]}` with mod check."}
{"instruction": "Explain how to count how many words start and end with the same letter.", "response": "Use list comprehension checking `word[0] == word[-1]`."}
{"instruction": "Explain how to detect if a string contains only one unique character.", "response": "Convert to set and check if `len(set(s)) == 1`."}
{"instruction": "Explain how to build a new list by repeating each character of a string twice.", "response": "Use list comprehension: `[c*2 for c in s]` and join."}
{"instruction": "Explain how to remove all characters from a string except uppercase letters.", "response": "Use `re.sub('[^A-Z]', '', s)` to keep only uppercase letters."}
{"instruction": "Explain how to reverse the order of characters in each word of a sentence.", "response": "Split, reverse each word, then join back."}
{"instruction": "Explain how to check if a sentence is a palindrome ignoring case and punctuation.", "response": "Remove non-letters, lowercase, and compare with its reverse."}
{"instruction": "Explain how to find the difference between the highest and lowest digits in a number.", "response": "Use `max()` and `min()` on `map(int, str(n))` and subtract."}
{"instruction": "Explain how to extract only the numeric words from a sentence.", "response": "Split and filter with `word.isdigit()`."}
{"instruction": "Explain how to generate a list of all numbers with exactly three digits.", "response": "Use `range(100, 1000)` to generate the list."}
{"instruction": "Explain how to check if the digits of a number alternate between increasing and decreasing.", "response": "Compare each digit with neighbors for alt increase/decrease."}
{"instruction": "Explain how to replace the first digit in a string with its square.", "response": "Find first digit, square it, replace using slicing or loop."}
{"instruction": "Explain how to remove all duplicate characters from a string while preserving order.", "response": "Track seen characters in set and build new string if not seen."}
{"instruction": "Explain how to return a string made by repeating each vowel in the input twice.", "response": "Double each character if vowel using list comprehension."}
{"instruction": "Explain how to count how many uppercase characters appear at even indices.", "response": "Use loop with index and check if `i % 2 == 0 and s[i].isupper()`."}
{"instruction": "Explain how to print the even-indexed words in a sentence.", "response": "Split and return words at even indices using slicing `words[::2]`."}
{"instruction": "Explain how to convert a list of integers into a single integer.", "response": "Convert all ints to strings and `int(''.join(...))`."}
{"instruction": "Explain how to determine if all words in a list are anagrams of each other.", "response": "Check sorted chars of all words match the first one."}
{"instruction": "Explain how to reverse all numbers in a sentence without affecting words.", "response": "Use regex to find numbers, reverse each, replace in original."}
{"instruction": "Explain how to pad a string with dashes on both sides to a total width of 30.", "response": "Use `s.center(30, '-')`."}
{"instruction": "Explain how to find all pairs of indices where elements are equal in a list.", "response": "Use nested loops or dict to find matching value indices."}
{"instruction": "Explain how to return a dictionary of letter counts only for vowels.", "response": "Count letters and filter keys `in 'aeiouAEIOU'`."}
{"instruction": "Explain how to filter out all numbers in a list that contain the digit '9'.", "response": "Use list comprehension with `'9' not in str(num)`."}
{"instruction": "Explain how to group strings by their first vowel.", "response": "Group using first vowel found in each word as key."}
{"instruction": "Explain how to count the number of distinct letters in a string.", "response": "Use `set()` to get unique alphabetic characters and count."}
{"instruction": "Explain how to find the longest sequence of non-repeating characters in a string.", "response": "Use sliding window and set to track max non-repeating substring."}
{"instruction": "Explain how to replace every third letter in a string with an underscore.", "response": "Replace every 3rd letter using index check in a loop."}
{"instruction": "Explain how to alternate characters from two strings into a new one.", "response": "Use `zip_longest` from `itertools` to alternate characters."}
{"instruction": "Explain how to detect if a list contains three identical items in a row.", "response": "Loop through list and check if `lst[i] == lst[i+1] == lst[i+2]`."}
{"instruction": "Explain how to count how many words have even length in a sentence.", "response": "Split sentence and count words where `len(word) % 2 == 0`."}
{"instruction": "Explain how to split a list of words into separate lists by word length.", "response": "Use a dictionary grouping words by `len(word)`."}
{"instruction": "Explain how to reverse only the even-indexed words in a sentence.", "response": "Split, reverse words at even indices, join back."}
{"instruction": "Explain how to extract all capitalized words from a paragraph.", "response": "Use list comprehension: `word.istitle()`."}
{"instruction": "Explain how to find all the numbers from 100 to 200 that are palindromes.", "response": "Loop from 100 to 200, keep numbers where `str(n) == str(n)[::-1]`."}
{"instruction": "Explain how to shift the ASCII value of each character in a string by 2.", "response": "Use `''.join(chr(ord(c)+2) for c in s)`."}
{"instruction": "Explain how to create a string from all characters in a list that are not vowels.", "response": "Filter out vowels and join remaining characters."}
{"instruction": "Explain how to count how many digits are greater than 5 in a number.", "response": "Count digits in `str(n)` where `int(d) > 5`."}
{"instruction": "Explain how to filter out words from a list that contain repeated letters.", "response": "Keep words where `len(set(word)) == len(word)`."}
{"instruction": "Explain how to detect if a string has at least two consecutive vowels.", "response": "Check if any `v1+v2` in string where both are vowels."}
{"instruction": "Explain how to sum the digits of all even numbers in a list.", "response": "Sum digits of even numbers using nested loops."}
{"instruction": "Explain how to split a paragraph into sentences using punctuation marks.", "response": "Use `re.split(r'[.!?]', paragraph)`."}
{"instruction": "Explain how to determine if two numbers have the same digits in different order.", "response": "Compare `sorted(str(a)) == sorted(str(b))`."}
{"instruction": "Explain how to truncate a number to its first three digits.", "response": "Convert to string and slice first 3 digits."}
{"instruction": "Explain how to group a sentence’s words by their starting letter.", "response": "Use a dictionary with first letter as key and append matching words."}
{"instruction": "Explain how to return a list of all characters that appear exactly twice in a string.", "response": "Use `collections.Counter` and filter for count == 2."}
{"instruction": "Explain how to remove all special characters from a list of strings.", "response": "Use regex to remove `[^A-Za-z0-9 ]` from each string."}
{"instruction": "Explain how to identify the longest word made entirely of vowels.", "response": "Filter words of only vowels and return the longest."}
{"instruction": "Explain how to sort a string by ASCII value of characters.", "response": "Sort string with `sorted(s)` and join."}
{"instruction": "Explain how to count the number of vowels in every word in a sentence.", "response": "Loop through words, count vowels in each."}
{"instruction": "Explain how to check whether the total number of digits in a string is odd.", "response": "Sum digits and check if total count is odd."}
{"instruction": "Explain how to create a dictionary where keys are string lengths and values are lists of words.", "response": "Use a dictionary grouping by `len(word)`."}
{"instruction": "Explain how to capitalize every fourth word in a sentence.", "response": "Split, capitalize every 4th word, rejoin."}
{"instruction": "Explain how to test if a string has at least one uppercase, one lowercase, and one digit.", "response": "Check `any(c.isupper())`, `islower()`, `isdigit()` in string."}
{"instruction": "Explain how to find all substrings of length 2 or more that start and end with the same letter.", "response": "Loop substrings of len >=2, check if first == last letter."}
{"instruction": "Explain how to check if a string contains any of the same character three times in a row.", "response": "Check for any `s[i] == s[i+1] == s[i+2]`."}
{"instruction": "Explain how to format a number with leading asterisks to make it 8 characters long.", "response": "Format number using `str(n).rjust(8, '*')`."}
{"instruction": "Explain how to split a list into a tuple of two halves.", "response": "Split list with slicing at `len(lst)//2` and make tuple."}
{"instruction": "Explain how to return the first vowel that appears twice in a string.", "response": "Track vowels and return the first that appears twice."}
{"instruction": "Explain how to create a string of only the first characters of each word in a sentence.", "response": "Use `''.join(word[0] for word in sentence.split())`."}
{"instruction": "Explain how to count how many three-letter words are in a paragraph.", "response": "Count words where `len(word) == 3`."}
{"instruction": "Explain how to sort a list of strings by the number of consonants in each.", "response": "Sort by `sum(1 for c in word if c not in 'aeiouAEIOU')`."}
{"instruction": "Explain how to remove all single-character words from a sentence.", "response": "Filter out words with `len(word) == 1` and rejoin."}
{"instruction": "Explain how to return a list of only the palindromes from a string of comma-separated words.", "response": "Split, strip, check palindrome for each word."}
{"instruction": "Explain how to check if two numbers are reverses of each other.", "response": "Compare `str(a) == str(b)[::-1]`."}
{"instruction": "Explain how to extract the digits at even positions from a number.", "response": "Convert to string, return chars at even indices."}
{"instruction": "Explain how to find the first digit in a string.", "response": "Loop through string, return first `c.isdigit()`."}
{"instruction": "Explain how to test whether two strings have no characters in common.", "response": "Check if `set(s1).isdisjoint(set(s2))`."}
{"instruction": "Explain how to create a string with alternating digits and asterisks up to 9.", "response": "Use `''.join(str(i)+'*' for i in range(10))[:-1]`."}
{"instruction": "Explain how to detect if a word contains three or more vowels in a row.", "response": "Check for substrings of 3+ consecutive vowels."}
{"instruction": "Explain how to determine if a list contains all numbers from 1 to 10.", "response": "Check if `set(lst) >= set(range(1, 11))`."}
{"instruction": "Explain how to convert each word in a list to its corresponding length.", "response": "Map words to `len(word)`."}
{"instruction": "Explain how to extract the initials from a person's full name.", "response": "Split name and return `''.join(word[0] for word in name.split())`."}
{"instruction": "Explain how to return a list of the lengths of each sentence in a paragraph.", "response": "Split by sentence-ending punctuation and return their lengths."}
{"instruction": "Explain how to count how many numbers in a list are both even and end in 2.", "response": "Count numbers where `n % 2 == 0 and str(n)[-1] == '2'`."}
{"instruction": "Explain how to remove duplicate characters from each word in a sentence.", "response": "Use set to remove duplicates in each word and rejoin."}
{"instruction": "Explain how to test whether all letters in a word appear in alphabetical order.", "response": "Compare list of letters with its sorted version."}
{"instruction": "Explain how to return a string with every letter doubled except vowels.", "response": "Double all non-vowel letters using list comprehension."}
{"instruction": "Explain how to identify the index of the longest string in a list.", "response": "Use `max(enumerate(lst), key=lambda x: len(x[1]))[0]`."}
{"instruction": "Explain how to generate a list of strings from a sentence that are longer than 5 characters.", "response": "Split and return words with `len(word) > 5`."}
{"instruction": "Explain how to replace every letter in a string with the next letter in the alphabet.", "response": "Use `''.join(chr((ord(c)-97+1)%26+97) if c.isalpha() else c for c in s.lower())`."}
{"instruction": "Explain how to find the difference between the sums of even and odd digits in a number.", "response": "Sum even digits, sum odd digits, subtract."}
{"instruction": "Explain how to build a string that consists of the initials of each sentence in a paragraph.", "response": "Split sentences, take first letter of each."}
{"instruction": "Explain how to detect if a sentence has more vowels than consonants.", "response": "Count vowels and consonants, compare totals."}
{"instruction": "Explain how to remove all non-alphabetic characters from a string.", "response": "Use regex: `re.sub('[^A-Za-z]', '', s)`."}
{"instruction": "Explain how to find the longest word in a sentence that starts and ends with the same letter.", "response": "Check first==last for each word, return longest."}
{"instruction": "Explain how to identify if a word uses only letters from the first half of the alphabet.", "response": "Check if all `c` in word are <= 'm'."}
{"instruction": "Explain how to create a new string with characters from odd indices only.", "response": "Use slicing: `s[1::2]`."}
{"instruction": "Explain how to count how many times each digit appears in a number.", "response": "Convert to string and count each digit using `Counter`."}
{"instruction": "Explain how to determine if a list has more positive or negative numbers.", "response": "Count positives and negatives, compare."}
{"instruction": "Explain how to check if a string contains all five vowels.", "response": "Check if all vowels are in `set(s.lower())`."}
{"instruction": "Explain how to create a dictionary mapping each letter in a word to its frequency.", "response": "Use `collections.Counter(word)`."}
{"instruction": "Explain how to count the number of unique digits in a list of numbers.", "response": "Flatten digits, convert to set, count."}
{"instruction": "Explain how to reverse a list of strings while also reversing each individual string.", "response": "Reverse list, then reverse each string."}
{"instruction": "Explain how to print each character in a string on a separate line with its index.", "response": "Loop with `enumerate`, print index and char."}
{"instruction": "Explain how to find the character in a string with the highest Unicode value.", "response": "Use `max(s)`."}
{"instruction": "Explain how to test whether two lists are permutations of each other.", "response": "Compare `sorted(list1) == sorted(list2)`."}
{"instruction": "Explain how to count how many times a specific character appears across multiple strings.", "response": "Sum `s.count(char)` for each string `s`."}
{"instruction": "Explain how to create a pyramid pattern of stars based on a given height.", "response": "Use nested loops to print increasing stars."}
{"instruction": "Explain how to check if the number of uppercase and lowercase letters in a string is equal.", "response": "Count upper and lower letters, compare."}
{"instruction": "Explain how to detect whether a word contains letters in reverse alphabetical order.", "response": "Check if `list(word) == sorted(word, reverse=True)`."}
{"instruction": "Explain how to sum all numbers in a list that are divisible by 7.", "response": "Sum `n for n in list if n % 7 == 0`."}
{"instruction": "Explain how to find all palindromic substrings in a given string.", "response": "Check all substrings `s[i:j] == s[i:j][::-1]`."}
{"instruction": "Explain how to check if a number is a power of 2 without using math libraries.", "response": "Keep dividing by 2, check remainder."}
{"instruction": "Explain how to return the longest sequence of identical characters in a string.", "response": "Track max length of consecutive repeating chars."}
{"instruction": "Explain how to remove the nth character from a string.", "response": "Use slicing: `s[:n] + s[n+1:]`."}
{"instruction": "Explain how to split a string into characters and return them as a dictionary with counts.", "response": "Use `collections.Counter(list(s))`."}
{"instruction": "Explain how to detect whether a list is strictly decreasing.", "response": "Check `all(a > b for a, b in zip(lst, lst[1:]))`."}
{"instruction": "Explain how to capitalize all the words that start with vowels in a sentence.", "response": "Capitalize words starting with vowels."}
{"instruction": "Explain how to round a float to the nearest integer without using `round()`.", "response": "Add 0.5 and convert to int."}
{"instruction": "Explain how to reverse the letters of each word but keep the word order intact.", "response": "Split, reverse each word, join."}
{"instruction": "Explain how to check if a string ends with a digit.", "response": "Check `s[-1].isdigit()`."}
{"instruction": "Explain how to generate a list of squares for only the odd numbers from 1 to 50.", "response": "Use list comprehension: `[x**2 for x in range(1,51,2)]`."}
{"instruction": "Explain how to detect whether a string contains more uppercase or lowercase letters.", "response": "Count upper and lower chars, compare."}
{"instruction": "Explain how to find the sum of the ASCII values of all vowels in a string.", "response": "Sum `ord(c)` for vowels in string."}
{"instruction": "Explain how to sort a list of numbers as strings by the number of digits.", "response": "Sort using `key=len(str(x))`."}
{"instruction": "Explain how to remove all items from a list that occur more than once.", "response": "Use `Counter`, keep items with count == 1."}
{"instruction": "Explain how to replace the middle character in a string with an asterisk.", "response": "Replace middle index with `*` using slicing."}
{"instruction": "Explain how to check if the characters in a string are in ascending order.", "response": "Compare `list(s) == sorted(s)`."}
{"instruction": "Explain how to test if two words are mirror images of each other.", "response": "Check if `w1 == w2[::-1]`."}
{"instruction": "Explain how to create a list of numbers from 1 to 100 that don’t contain the digit 5.", "response": "List numbers 1–100, exclude those with `'5'`."}
{"instruction": "Explain how to count the number of punctuation marks in a paragraph.", "response": "Count `c in string.punctuation` in paragraph."}
{"instruction": "Explain how to print a checkerboard pattern of `#` and `.`.", "response": "Use nested loop, alternate `#` and `.` by index."}
{"instruction": "Explain how to alternate between appending and prepending items to a list.", "response": "Use loop and `append` or `insert(0, x)` alternately."}
{"instruction": "Explain how to build a list of words that contain at least one double letter.", "response": "Filter words with `any(a==b for a,b in zip(w,w[1:]))`."}
{"instruction": "Explain how to split a string into a list of characters excluding vowels.", "response": "Filter out vowels, return list of remaining chars."}
{"instruction": "Explain how to remove all repeated words from a sentence.", "response": "Track seen words, only keep first occurrence."}
{"instruction": "Explain how to generate a string made of every second letter in each word of a sentence.", "response": "For each word, take `word[1::2]`, join all."}
{"instruction": "Explain how to extract numbers from a string and sum only the even ones.", "response": "Extract numbers with regex, sum evens."}
{"instruction": "Explain how to convert a list of booleans into a list of 0s and 1s.", "response": "Use list comprehension: `[int(b) for b in bool_list]`."}
{"instruction": "Explain how to check if a word is made of only alternating vowels and consonants.", "response": "Check alternating pattern of vowels/consonants using `isalpha()` and position rules."}
{"instruction": "Explain how to group numbers in a list based on whether they’re odd or even.", "response": "Use two lists or a dict with key `'even'` and `'odd'`, group by `n % 2`."}
{"instruction": "Explain how to remove the first and last elements of a list.", "response": "Use slicing: `lst[1:-1]`."}
{"instruction": "Explain how to detect the first word in a sentence that starts with a consonant.", "response": "Split sentence, return first word not starting with a vowel."}
{"instruction": "Explain how to reverse a number without converting it to a string.", "response": "Use loop: reverse = 0; while n: reverse = reverse*10 + n%10; n //= 10."}
{"instruction": "Explain how to find the index of the highest value in a list.", "response": "Use `max(lst)` and `lst.index()`."}
{"instruction": "Explain how to return a list of every character that occurs exactly twice in a string.", "response": "Use `Counter`, filter chars with count == 2."}
{"instruction": "Explain how to test if a list contains only palindromic numbers.", "response": "Check `str(n) == str(n)[::-1]` for all numbers."}
{"instruction": "Explain how to generate all two-digit combinations using digits 1 to 5.", "response": "Nested loops: combine digits `1–5` to make two-digit pairs."}
{"instruction": "Explain how to remove duplicate digits from a number while keeping order.", "response": "Track seen digits, append if new."}
{"instruction": "Explain how to find the number of words in a sentence that are all uppercase.", "response": "Split sentence, check `word.isupper()`."}
{"instruction": "Explain how to sort a list of words alphabetically ignoring case.", "response": "Use `sorted(lst, key=str.lower)`."}
{"instruction": "Explain how to count how many times a digit appears across multiple integers.", "response": "Convert all ints to string, count digits with `Counter`."}
{"instruction": "Explain how to split a list into chunks of increasing size.", "response": "Loop increasing slice sizes, use list slicing."}
{"instruction": "Explain how to replace vowels in a string with numbers based on their order (a=1, e=2, etc.).", "response": "Map vowels to 1–5, replace using loop or `str.translate()`."}
{"instruction": "Explain how to find the longest word in a string that doesn’t contain the letter 'e'.", "response": "Split string, exclude words with `'e'`, return longest."}
{"instruction": "Explain how to detect whether a number is the reverse of a previous one in a list.", "response": "Reverse each number, check if previously seen."}
{"instruction": "Explain how to test whether all words in a sentence begin with different letters.", "response": "Check if first letters of all words are unique."}
{"instruction": "Explain how to convert each character in a string to its binary representation.", "response": "Use `bin(ord(c))[2:]` for each character."}
{"instruction": "Explain how to build a dictionary with keys as word lengths and values as lists of words.", "response": "Loop through words, group by `len(word)` in dict."}
{"instruction": "Explain how to remove every vowel from a list of strings.", "response": "Remove vowels from each string with replace or regex."}
{"instruction": "Explain how to count how many words in a sentence have an odd number of letters.", "response": "Count words with `len(word) % 2 == 1`."}
{"instruction": "Explain how to return only those words in a list that contain the letter 'z'.", "response": "Filter words with `'z' in word`."}
{"instruction": "Explain how to check if a list has the same values when reversed.", "response": "Compare list with its reverse."}
{"instruction": "Explain how to find all characters that appear more than twice in a string.", "response": "Use `Counter`, return chars with count > 2."}
{"instruction": "Explain how to sort the digits of a number in descending order.", "response": "Convert to string, sort descending, join back to int."}
{"instruction": "Explain how to check if a sentence contains all lowercase letters.", "response": "Use `s.islower()` and `s.isalpha()`."}
{"instruction": "Explain how to remove all characters that appear more than once from a string.", "response": "Keep chars with count == 1 using `Counter`."}
{"instruction": "Explain how to return every third item from a list starting at index 1.", "response": "Use slicing: `lst[1::3]`."}
{"instruction": "Explain how to determine if two lists are exactly one item different.", "response": "Check if lengths equal, sum of unequal items == 1."}
{"instruction": "Explain how to replace every character in a string with its ASCII value.", "response": "Convert each char to `str(ord(c))`, join."}
{"instruction": "Explain how to find the longest string in a list without using `max()`.", "response": "Loop, track longest with `if len(s) > len(longest)`."}
{"instruction": "Explain how to test whether a number has repeating digits.", "response": "Convert to string, check if length of `set()` < original."}
{"instruction": "Explain how to capitalize only those words that are longer than five letters.", "response": "Capitalize words where `len(word) > 5`."}
{"instruction": "Explain how to generate a list of all even-length strings in a list.", "response": "Filter `len(s) % 2 == 0`."}
{"instruction": "Explain how to reverse the case of every character in a string.", "response": "Use `s.swapcase()`."}
{"instruction": "Explain how to count how many numbers in a list end with the digit 0.", "response": "Count `n % 10 == 0`."}
{"instruction": "Explain how to remove the smallest value from a list of numbers.", "response": "Remove `min(lst)` using `lst.remove()`."}
{"instruction": "Explain how to replace a specific word in a sentence without using `replace()`.", "response": "Split sentence, replace target word manually, join."}
{"instruction": "Explain how to pad a list with zeros to make its length 10.", "response": "Use `lst + [0]*(10 - len(lst))`."}
{"instruction": "Explain how to return a list of all digits that appear in a string.", "response": "Filter characters with `c.isdigit()`."}
{"instruction": "Explain how to test whether a sentence contains at least five words.", "response": "Check if `len(sentence.split()) >= 5`."}
{"instruction": "Explain how to remove all trailing digits from a string.", "response": "Loop from end, remove digits until first non-digit."}
{"instruction": "Explain how to find the average word length in a sentence.", "response": "Sum word lengths, divide by word count."}
{"instruction": "Explain how to detect if a string contains any palindromes.", "response": "Check all substrings: `s[i:j] == s[i:j][::-1]`."}
{"instruction": "Explain how to count how many letters in a string are repeated.", "response": "Use `Counter`, count letters with count > 1."}
{"instruction": "Explain how to build a string by alternating characters from two input strings.", "response": "Zip two strings, combine alternately."}
{"instruction": "Explain how to identify the shortest word that starts and ends with the same letter.", "response": "Check words with `word[0] == word[-1]`, return shortest."}
{"instruction": "Explain how to reverse the order of all letters in a sentence, keeping spaces intact.", "response": "Reverse letters only, keep space positions same."}
{"instruction": "Explain how to split a list into even and odd indexed items and return both.", "response": "Return `[lst[::2], lst[1::2]]`."}
{"instruction": "Explain how to remove spaces from the start and end of a string.", "response": "Use `s.strip()`."}
{"instruction": "Explain how to return True if all elements in a list are unique.", "response": "Compare `len(lst)` with `len(set(lst))`."}
{"instruction": "Explain how to create a list of all uppercase letters from a string.", "response": "List comprehension: `[c for c in s if c.isupper()]`."}
{"instruction": "Explain how to sort a dictionary by keys.", "response": "Use `dict(sorted(d.items()))`."}
{"instruction": "Explain how to capitalize only the first and last words in a sentence.", "response": "Split, capitalize first and last word, join back."}
{"instruction": "Explain how to count how many times each word appears in a list of sentences.", "response": "Use nested loops and `Counter` on words across sentences."}
{"instruction": "Explain how to filter out all `None` values from a list.", "response": "Filter with list comprehension: `[x for x in lst if x is not None]`."}
{"instruction": "Explain how to check if a given string is in title case.", "response": "Use `s.istitle()`."}
{"instruction": "Explain how to generate a list of all odd numbers between 10 and 100.", "response": "Use list comprehension: `[i for i in range(11,100,2)]`."}
{"instruction": "Explain how to reverse a string using slicing.", "response": "Use `s[::-1]`."}
{"instruction": "Explain how to check if a word contains all vowels.", "response": "Check all vowels in `set(word.lower())`."}
{"instruction": "Explain how to extract all characters in a string that appear more than once.", "response": "Use `Counter`, filter `count > 1`."}
{"instruction": "Explain how to remove every second item from a list.", "response": "Use slicing: `lst[::2]` or delete by index."}
{"instruction": "Explain how to replace digits in a string with their word equivalents.", "response": "Use a digit-to-word dict and loop replace."}
{"instruction": "Explain how to convert a string to lowercase without using `lower()`.", "response": "Use `''.join(chr(ord(c)+32) if 'A'<=c<='Z' else c for c in s)`."}
{"instruction": "Explain how to add up the values of a list without using `sum()`.", "response": "Loop through list and add manually."}
{"instruction": "Explain how to return the word in a sentence with the highest number of consonants.", "response": "Loop through words, count consonants, return max."}
{"instruction": "Explain how to generate a list of random letters.", "response": "Use `random.choices(string.ascii_letters, k=n)`."}
{"instruction": "Explain how to split a sentence into a list of words using `split()`.", "response": "Use `sentence.split()`."}
{"instruction": "Explain how to remove punctuation from the beginning and end of words.", "response": "Use `word.strip(string.punctuation)` per word."}
{"instruction": "Explain how to sort a list of strings by the last letter.", "response": "Sort with key `lambda x: x[-1]`."}
{"instruction": "Explain how to convert a character to its ASCII code.", "response": "Use `ord(char)`."}
{"instruction": "Explain how to check if a character is a digit using `isdigit()`.", "response": "Use `char.isdigit()`."}
{"instruction": "Explain how to flatten a list of tuples into a single list.", "response": "Use list comprehension: `[x for t in lst for x in t]`."}
{"instruction": "Explain how to return the last word of a sentence.", "response": "Use `sentence.split()[-1]`."}
{"instruction": "Explain how to group words in a list by their first character.", "response": "Group in dict by first letter key."}
{"instruction": "Explain how to convert a list of strings to a single string with a space separator.", "response": "Use `' '.join(lst)`."}
{"instruction": "Explain how to test if all characters in a string are the same.", "response": "Check `len(set(s)) == 1`."}
{"instruction": "Explain how to extract all uppercase letters from a sentence.", "response": "Filter with `[c for c in s if c.isupper()]`."}
{"instruction": "Explain how to create a dictionary that maps words to their lengths.", "response": "Dict comprehension: `{w: len(w) for w in lst}`."}
{"instruction": "Explain how to find the number of vowels in each word in a list.", "response": "Loop words, count vowels with `sum(1 for c in w if c in 'aeiouAEIOU')`."}
{"instruction": "Explain how to detect duplicate words in a sentence.", "response": "Split sentence, check duplicates with `set()` or `Counter`."}
{"instruction": "Explain how to get the third character of each word in a list.", "response": "Use slicing: `[w[2] for w in lst if len(w) > 2]`."}
{"instruction": "Explain how to identify all characters that appear only once in a string.", "response": "Use `Counter`, filter `count == 1`."}
{"instruction": "Explain how to return the string length without using `len()`.", "response": "Loop through string and count manually."}
{"instruction": "Explain how to reverse a tuple.", "response": "Use slicing: `t[::-1]`."}
{"instruction": "Explain how to join a list of numbers into a single string.", "response": "Use `''.join(str(n) for n in lst)`."}
{"instruction": "Explain how to capitalize every vowel in a string.", "response": "Use `''.join(c.upper() if c in 'aeiouAEIOU' else c for c in s)`."}
{"instruction": "Explain how to return the first repeated letter in a string.", "response": "Track seen letters, return first that repeats."}
{"instruction": "Explain how to count how many times each digit appears in a number.", "response": "Use `Counter(str(n))`."}
{"instruction": "Explain how to filter out all uppercase words from a sentence.", "response": "Split sentence, filter with `word.isupper()`."}
{"instruction": "Explain how to remove items from a list that are shorter than 4 characters.", "response": "Filter: `[w for w in lst if len(w) >= 4]`."}
{"instruction": "Explain how to convert a list of numbers to floats.", "response": "Use list comprehension: `[float(x) for x in lst]`."}
{"instruction": "Explain how to create a string that alternates between uppercase and lowercase.", "response": "Alternate case with index in loop or comprehension."}
{"instruction": "Explain how to replace all instances of the letter 'a' with '@'.", "response": "Use `s.replace('a','@').replace('A','@')`."}
{"instruction": "Explain how to find the longest number in a list of strings.", "response": "Sort by `len(s)` and return last."}
{"instruction": "Explain how to test if a string contains both letters and numbers.", "response": "Check if any `c.isalpha()` and any `c.isdigit()`."}
{"instruction": "Explain how to format a number with commas as thousands separators.", "response": "Use `f'{n:,}'` or `format(n, ',')`."}
{"instruction": "Explain how to find the index of the second occurrence of a character in a string.", "response": "Use `s.find(c, s.find(c)+1)`."}
{"instruction": "Explain how to remove trailing zeros from a number.", "response": "Convert to string, use `rstrip('0')`, back to int/float."}
{"instruction": "Explain how to convert a string of numbers into a list of integers.", "response": "Use `[int(c) for c in s]` if no separator."}
{"instruction": "Explain how to find the total number of lowercase vowels in a paragraph.", "response": "Use `sum(1 for c in text if c in 'aeiou')`."}
{"instruction": "Explain how to extract every third character from a string.", "response": "Use slicing: `s[::3]`."}
{"instruction": "Explain how to replace all consonants in a word with '#'.", "response": "Replace non-vowels with `'#'` using a loop or comprehension."}
{"instruction": "Explain how to reverse the digits in a number using arithmetic.", "response": "Use modulo/divide in a loop to build reversed number."}
{"instruction": "Explain how to check if a string is alphabetic without using `isalpha()`.", "response": "Check `all(c.isalpha() for c in s)` manually."}
{"instruction": "Explain how to return the last digit of each number in a list.", "response": "Use `[n % 10 for n in lst]`."}
{"instruction": "Explain how to remove duplicate digits from a number.", "response": "Convert to string, use `dict.fromkeys`, join and int."}
{"instruction": "Explain how to convert a single string of comma-separated words into a list.", "response": "Use `s.split(',')`."}
{"instruction": "Explain how to test if a number is a palindrome without using strings.", "response": "Reverse using arithmetic and compare to original."}
{"instruction": "Explain how to return the most frequent vowel in a sentence.", "response": "Use `Counter` on vowels, return max."}
{"instruction": "Explain how to return a list of booleans indicating if each number in a list is even.", "response": "Use `[n % 2 == 0 for n in lst]`."}
{"instruction": "Explain how to replace numbers in a list with their square roots.", "response": "Use `[math.sqrt(n) for n in lst]`."}
{"instruction": "Explain how to replace all non-vowel letters in a string with dashes.", "response": "Replace consonants with dash using a loop."}
{"instruction": "Explain how to sort a list of integers as strings by their length.", "response": "Sort with `key=len` on `str(n)`."}
{"instruction": "Explain how to determine if a word has alternating cases.", "response": "Loop and check case alternation at each index."}
{"instruction": "Explain how to reverse a string using a for loop.", "response": "Loop backward, append to new string."}
{"instruction": "Explain how to check if all characters in a list are lowercase.", "response": "Use `all(c.islower() for c in lst)`."}
{"instruction": "Explain how to count the number of capital letters in a string.", "response": "Use `sum(1 for c in s if c.isupper())`."}
{"instruction": "Explain how to extract only the numbers that are multiples of 3 from a list.", "response": "Use `[n for n in lst if n % 3 == 0]`."}
{"instruction": "Explain how to format each word in a sentence to start with a capital and end with a period.", "response": "Capitalize first letter, add period using list comp."}
{"instruction": "Explain how to check if the sum of two digits equals the third in a 3-digit number.", "response": "Extract digits, check `a + b == c`."}
{"instruction": "Explain how to return the sum of digits in a number using recursion.", "response": "Base case `n == 0`; else `n % 10 + recurse(n // 10)`."}
{"instruction": "Explain how to check if a string contains any repeated characters.", "response": "Use `len(set(s)) != len(s)`."}
{"instruction": "Explain how to extract a list of words that start and end with a vowel.", "response": "Filter with condition `w[0] in vowels and w[-1] in vowels`."}
{"instruction": "Explain how to format a date string into DD-MM-YYYY format.", "response": "Use slicing and f-string: `f'{d[0:2]}-{d[2:4]}-{d[4:]}'`."}
{"instruction": "Explain how to count the number of alphabetic characters in a string.", "response": "Count letters with `sum(c.isalpha() for c in s)`."}
{"instruction": "Explain how to detect whether a list contains nested lists.", "response": "Check `any(isinstance(i, list) for i in lst)`."}
{"instruction": "Explain how to check if a character appears at the same index in two strings.", "response": "Loop over zipped strings and check index match."}
{"instruction": "Explain how to return the number of unique characters in a word.", "response": "Use `len(set(word))`."}
{"instruction": "Explain how to extract the first letter of each word in a sentence.", "response": "Use `[w[0] for w in sentence.split()]`."}
{"instruction": "Explain how to check if a list of numbers is sorted.", "response": "Compare list with `sorted(lst)`."}
{"instruction": "Explain how to convert a list of integers into a string of digits.", "response": "Use `''.join(str(i) for i in lst)`."}
{"instruction": "Explain how to group words that share the same ending letter.", "response": "Group in dict by last character."}
{"instruction": "Explain how to determine if a list has duplicate numbers.", "response": "Compare length of list and `set(lst)`."}
{"instruction": "Explain how to reverse a dictionary’s keys and values.", "response": "Use `{v: k for k, v in d.items()}`."}
{"instruction": "Explain how to round all numbers in a list to the nearest 10.", "response": "Use `[round(n, -1) for n in lst]`."}
{"instruction": "Explain how to return all the letters in a string that are in even positions.", "response": "Use slicing: `s[1::2]`."}
{"instruction": "Explain how to create a list of strings of length 5 from a longer list.", "response": "Use `[w for w in lst if len(w) == 5]`."}
{"instruction": "Explain how to count how many words in a list start with 'th'.", "response": "Use `sum(w.startswith('th') for w in lst)`."}
{"instruction": "Explain how to extract all characters from a string that are not letters.", "response": "Filter with `not c.isalpha()`."}
{"instruction": "Explain how to replace all uppercase letters in a word with lowercase except the first.", "response": "Capitalize first letter, lowercase rest: `w[0].upper() + w[1:].lower()`."}
{"instruction": "Explain how to create a function that returns the number of lines in a string.", "response": "Use `s.count('\\\\n') + 1`."}
{"instruction": "Explain how to detect if a sentence contains only unique words.", "response": "Split, check `len(set(words)) == len(words)`."}
{"instruction": "Explain how to format an integer to show as binary with leading zeroes.", "response": "Use `format(n, '08b')`."}
{"instruction": "Explain how to find the second digit from the right in a number.", "response": "Use `(n // 10) % 10`."}
{"instruction": "Explain how to test if a list of strings contains any duplicates.", "response": "Check `len(set(lst)) != len(lst)`."}
{"instruction": "Explain how to extract all two-digit numbers from a string.", "response": "Use regex: `re.findall(r'\\\\b\\\\d{2}\\\\b', s)`."}
{"instruction": "Explain how to build a new list with every other item in reverse.", "response": "Use `lst[::-2]`."}
{"instruction": "Explain how to return a list of string lengths sorted in descending order.", "response": "Use `sorted([len(s) for s in lst], reverse=True)`."}
{"instruction": "Explain how to return the index of the first vowel in a string.", "response": "Use `next(i for i, c in enumerate(s) if c in 'aeiouAEIOU')`."}
{"instruction": "Explain how to sort a list of strings by their second character.", "response": "Sort with `key=lambda x: x[1]`."}
{"instruction": "Explain how to check if two words share any common letters.", "response": "Check `bool(set(word1) & set(word2))`."}
{"instruction": "Explain how to convert a string of binary digits to a list of integers.", "response": "Use `[int(c) for c in binary_string]`."}
{"instruction": "Explain how to find all letters in a string that appear more than twice.", "response": "Use `[c for c in set(s) if s.count(c) > 2]`."}
{"instruction": "Explain how to replace each space in a string with a random letter.", "response": "Use `''.join(random.choice(letters) if c == ' ' else c for c in s)`."}
{"instruction": "Explain how to return the average length of words in a sentence.", "response": "Use `sum(len(w) for w in s.split()) / len(s.split())`."}
{"instruction": "Explain how to count how many times a substring appears in a string.", "response": "Use `s.count(sub)`."}
{"instruction": "Explain how to return all strings in a list that are palindromes.", "response": "Use `[w for w in lst if w == w[::-1]]`."}
{"instruction": "Explain how to remove all capital vowels from a string.", "response": "Remove with `re.sub(r'[AEIOU]', '', s)`."}
{"instruction": "Explain how to check if a number is divisible by all its digits.", "response": "Check `all(d and n % d == 0 for d in map(int, str(n)))`."}
{"instruction": "Explain how to convert a list of booleans to a binary string.", "response": "Use `''.join('1' if b else '0' for b in lst)`."}
{"instruction": "Explain how to return all characters that are digits in a given string.", "response": "Use `[c for c in s if c.isdigit()]`."}
{"instruction": "Explain how to calculate the product of all digits in a number.", "response": "Use `math.prod(map(int, str(n)))`."}
{"instruction": "Explain how to rotate a list to the left by one position.", "response": "Use `lst[1:] + lst[:1]`."}
{"instruction": "Explain how to test if all letters in a word are vowels.", "response": "Check `all(c in 'aeiouAEIOU' for c in word)`."}
{"instruction": "Explain how to replace each vowel in a string with the number of times it appears.", "response": "Use `s.replace(v, str(s.count(v)))` per vowel."}
{"instruction": "Explain how to create a string of the alphabet using a loop.", "response": "Use `''.join(chr(97 + i) for i in range(26))`."}
{"instruction": "Explain how to extract all the words in a sentence that end in 'ing'.", "response": "Use `[w for w in s.split() if w.endswith('ing')]`."}
{"instruction": "Explain how to determine if a list of integers is a palindrome.", "response": "Check `lst == lst[::-1]`."}
{"instruction": "Explain how to return the middle character of a word.", "response": "Use `word[len(word)//2]`."}
{"instruction": "Explain how to sort a list of numbers but move all 0s to the end.", "response": "Sort non-zero, add zeros: `[n for n in lst if n!=0] + [0]*lst.count(0)`."}
{"instruction": "Explain how to count how many lowercase letters appear after an uppercase letter in a string.", "response": "Loop through string checking for lowercase after uppercase."}
{"instruction": "Explain how to remove all non-ASCII characters from a string.", "response": "Use `s.encode('ascii', 'ignore').decode()`."}
{"instruction": "Explain how to reverse the digits of an integer using math only.", "response": "Reverse with modulo/division math loop."}
{"instruction": "Explain how to test if a list contains only one unique value.", "response": "Check `len(set(lst)) == 1`."}
{"instruction": "Explain how to check if every letter in a string is alphabetically consecutive.", "response": "Compare ord values are consecutive."}
{"instruction": "Explain how to identify which number occurs most frequently in a list.", "response": "Use `max(set(lst), key=lst.count)`."}
{"instruction": "Explain how to convert each number in a list to its square if it's odd.", "response": "Use `[n**2 if n%2 else n for n in lst]`."}
{"instruction": "Explain how to extract words from a sentence that contain both letters and numbers.", "response": "Filter with `any(c.isdigit() for c in w) and any(c.isalpha() for c in w)`."}
{"instruction": "Explain how to format a string to center-align its contents within 20 characters.", "response": "Use `s.center(20)`."}
{"instruction": "Explain how to detect if a string contains three or more identical letters in a row.", "response": "Use `re.search(r'(.)\\\\1\\\\1', s)`."}
{"instruction": "Explain how to create a list of characters that are not repeated in a string.", "response": "Use `[c for c in s if s.count(c) == 1]`."}
{"instruction": "Explain how to return only the last two digits of a number.", "response": "Use `n % 100`."}
{"instruction": "Explain how to count how many strings in a list start with a vowel.", "response": "Use `sum(1 for w in lst if w[0].lower() in 'aeiou')`."}
{"instruction": "Explain how to generate all two-letter combinations of vowels.", "response": "Use `[''.join(p) for p in itertools.product(vowels, repeat=2)]`."}
{"instruction": "Explain how to find the sum of numbers that are not divisible by 2 or 3.", "response": "Use `sum(n for n in lst if n%2 and n%3)`."}
{"instruction": "Explain how to replace all characters in a string with a dash except the first and last.", "response": "Use `s[0] + '-'*(len(s)-2) + s[-1]`."}
{"instruction": "Explain how to return the smallest number that appears more than once in a list.", "response": "Find duplicates, return `min(d)`."}
{"instruction": "Explain how to check if all strings in a list have the same length.", "response": "Check `len(set(map(len, lst))) == 1`."}
{"instruction": "Explain how to count how many digits appear an odd number of times in a number.", "response": "Count digits, check odd counts."}
{"instruction": "Explain how to generate a list of 100 random lowercase letters.", "response": "Use `[random.choice(string.ascii_lowercase) for _ in range(100)]`."}
{"instruction": "Explain how to return a list of indices where a specific value appears.", "response": "Use `[i for i, x in enumerate(lst) if x == target]`."}
{"instruction": "Explain how to test if a string alternates between vowels and consonants.", "response": "Loop checking alternation vowel/consonant."}
{"instruction": "Explain how to convert a list of characters into an alternating upper-lower string.", "response": "Use join with index-based `.upper()`/`.lower()` alternation."}
{"instruction": "Explain how to find the character with the lowest ASCII value in a string.", "response": "Use `min(s)`."}
{"instruction": "Explain how to check if a string is a valid hexadecimal number.", "response": "Check all chars in '0123456789abcdefABCDEF'."}
{"instruction": "Explain how to remove all numbers that appear more than twice in a list.", "response": "Remove with count filter: `[n for n in lst if lst.count(n) <= 2]`."}
{"instruction": "Explain how to return the first number in a list that is divisible by 7.", "response": "Use `next(n for n in lst if n % 7 == 0)`."}
{"instruction": "Explain how to find the smallest odd number in a list.", "response": "Use `min(n for n in lst if n % 2)`."}
{"instruction": "Explain how to capitalize the last letter of every word in a sentence.", "response": "Split the sentence into words, capitalize the last letter of each, and rejoin."}
{"instruction": "Explain how to generate all three-letter palindromes from a given alphabet.", "response": "Use nested loops to form strings like 'aaa', 'aba', etc., where first equals last."}
{"instruction": "Explain how to extract all odd-indexed digits from a number.", "response": "Convert to string, slice with [1::2], and return digits as list."}
{"instruction": "Explain how to remove the character at a specific index in a string.", "response": "Use slicing: string[:index] + string[index+1:]."}
{"instruction": "Explain how to return a new list containing the last character of each string in a list.", "response": "Use list comprehension to get word[-1] for each word in the list."}
{"instruction": "Explain how to count the number of consecutive repeating characters in a string.", "response": "Iterate and count when current char equals previous."}
{"instruction": "Explain how to round all float numbers in a list to the nearest integer.", "response": "Use list comprehension with round()."}
{"instruction": "Explain how to reverse only the vowels in a string.", "response": "Identify vowels, reverse them, rebuild the string."}
{"instruction": "Explain how to convert a string to a list of Unicode values.", "response": "Use list comprehension with ord()."}
{"instruction": "Explain how to find the word with the most vowels in a list.", "response": "Count vowels in each word and return word with max count."}
{"instruction": "Explain how to return a new string that repeats each character twice.", "response": "Use ''.join([c*2 for c in string])."}
{"instruction": "Explain how to test if a string contains more digits than letters.", "response": "Count digits and letters; compare counts."}
{"instruction": "Explain how to return a list of all consonants from a sentence.", "response": "Filter out vowels and non-letters, return remaining."}
{"instruction": "Explain how to calculate the average of a list of numbers rounded to 2 decimal places.", "response": "Use sum(list)/len(list) and round to 2 decimals."}
{"instruction": "Explain how to build a string that contains only the first and last letters of each word.", "response": "Extract word[0] + word[-1] for each word, join into string."}
{"instruction": "Explain how to generate all 2-digit even numbers using digits 1 through 9.", "response": "Loop through digits, combine pairs, filter even numbers."}
{"instruction": "Explain how to find the position of the first capital letter in a string.", "response": "Loop with enumerate, return index of first isupper()."}
{"instruction": "Explain how to remove all items in a list that contain more than one vowel.", "response": "Remove words with more than one vowel using count."}
{"instruction": "Explain how to return all three-digit palindromes in a given list.", "response": "Filter list for numbers that read same reversed and are 3-digit."}
{"instruction": "Explain how to replace every third letter in a string with an exclamation mark.", "response": "Replace every 3rd letter using loop and index check."}
{"instruction": "Explain how to detect if a string contains two of the same character back-to-back.", "response": "Check if any char equals the next one."}
{"instruction": "Explain how to generate a dictionary of characters and their positions in a string.", "response": "Use dict with enumerate to store char:index."}
{"instruction": "Explain how to convert all letters in a string to the letter following them in the alphabet.", "response": "Shift letters using chr(ord(c)+1), skip non-letters."}
{"instruction": "Explain how to test whether a number contains a digit more than once.", "response": "Convert to string, check if any digit repeats."}
{"instruction": "Explain how to return the number of even digits in a number.", "response": "Count digits in string form that are even."}
{"instruction": "Explain how to filter out all numbers less than 100 from a list.", "response": "Use list comprehension to filter numbers >= 100."}
{"instruction": "Explain how to count the number of uppercase vowels in a string.", "response": "Count 'A', 'E', 'I', 'O', 'U' in string."}
{"instruction": "Explain how to find the word in a list that starts and ends with the same character.", "response": "Return word where word[0] == word[-1]."}
{"instruction": "Explain how to split a string into substrings of 3 characters each.", "response": "Use list comprehension with range(0, len(s), 3)."}
{"instruction": "Explain how to convert a string into a dictionary of letter frequencies.", "response": "Loop over letters, use dict to count frequencies."}
{"instruction": "Explain how to remove all special characters from a string.", "response": "Remove non-alphanumeric characters using regex or filter."}
{"instruction": "Explain how to create a list of characters that occur exactly twice.", "response": "Count chars, return ones with count == 2."}
{"instruction": "Explain how to extract digits from a string and return them as an integer.", "response": "Extract digits with isdigit(), then join and convert to int."}
{"instruction": "Explain how to return a list of strings from a list that contain the letter 'x'.", "response": "Return words containing 'x' using list comprehension."}
{"instruction": "Explain how to replace every consonant in a string with the next consonant.", "response": "Replace each consonant by the next consonant using mapping."}
{"instruction": "Explain how to convert a number into a list of its digits.", "response": "Convert to string, map each char to int."}
{"instruction": "Explain how to return all characters in a string that appear in alphabetical order.", "response": "Return sorted sequence of letters already in order."}
{"instruction": "Explain how to count the number of punctuation symbols in a sentence.", "response": "Count characters in string that are in string.punctuation."}
{"instruction": "Explain how to check if a string ends in a digit without using `isdigit()`.", "response": "Check if last character is between '0' and '9'."}
{"instruction": "Explain how to test if a number contains only unique digits.", "response": "Check if length of set(str(number)) equals length of str(number)."}
{"instruction": "Explain how to replace the first vowel in a word with a capital letter.", "response": "Find first vowel, capitalize it, reconstruct string."}
{"instruction": "Explain how to find the length of the longest consecutive number sequence in a list.", "response": "Sort list, find longest run of consecutive numbers."}
{"instruction": "Explain how to extract words that are longer than 10 characters from a paragraph.", "response": "Split by spaces, return words with len > 10."}
{"instruction": "Explain how to generate a list of letters between two characters.", "response": "Use chr and ord to generate range of letters."}
{"instruction": "Explain how to reverse all words in a sentence but not the sentence order.", "response": "Reverse each word, keep word order."}
{"instruction": "Explain how to format a string to look like a title page heading.", "response": "Capitalize first letters, center in 80 chars."}
{"instruction": "Explain how to count all characters in a list that are not letters.", "response": "Count characters where not c.isalpha()."}
{"instruction": "Explain how to identify the second-most frequent word in a list.", "response": "Use collections.Counter, return second most common word."}
{"instruction": "Explain how to pad all strings in a list to be exactly 10 characters long.", "response": "Pad each string using ljust(10)."}
{"instruction": "Explain how to test if a number is a multiple of the sum of its digits.", "response": "Sum digits of number and check divisibility."}
