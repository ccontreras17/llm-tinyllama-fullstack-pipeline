[
  {
    "question": "Python check palindrome",
    "answer": "def is_palindrome(s):\n    s = s.lower().replace(' ', '')\n    return s == s[::-1]"
  },
  {
    "question": "Python calculate factorial using recursion",
    "answer": "def factorial(n):\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)"
  },
  {
    "question": "Python compute Fibonacci sequence up to n terms",
    "answer": "def fibonacci(n):\n    seq = [0, 1]\n    for i in range(2, n):\n        seq.append(seq[-1] + seq[-2])\n    return seq[:n]"
  },
  {
    "question": "Python remove duplicates from list",
    "answer": "def remove_duplicates(lst):\n    return list(dict.fromkeys(lst))"
  },
  {
    "question": "Python count frequency of each character in string",
    "answer": "from collections import Counter\n\ndef char_frequency(s):\n    return dict(Counter(s))"
  },
  {
    "question": "Python check if number is prime",
    "answer": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"
  },
  {
    "question": "Python find greatest common divisor of two numbers",
    "answer": "import math\n\ndef gcd(a, b):\n    return math.gcd(a, b)"
  },
  {
    "question": "Python reverse words in sentence",
    "answer": "def reverse_words(sentence):\n    return ' '.join(sentence.split()[::-1])"
  },
  {
    "question": "Python merge two dictionaries",
    "answer": "def merge_dicts(d1, d2):\n    return {**d1, **d2}"
  },
  {
    "question": "Python sum all even numbers in list",
    "answer": "def sum_even_numbers(lst):\n    return sum(x for x in lst if x % 2 == 0)"
  },
  {
    "question": "Python find second largest number in list",
    "answer": "def second_largest(lst):\n    unique = list(set(lst))\n    unique.sort()\n    return unique[-2] if len(unique) >= 2 else None"
  },
  {
    "question": "Python flatten nested list",
    "answer": "def flatten(nested):\n    result = []\n    for i in nested:\n        if isinstance(i, list):\n            result.extend(flatten(i))\n        else:\n            result.append(i)\n    return result"
  },
  {
    "question": "Python check if substring exists in string",
    "answer": "def contains_substring(s, sub):\n    return sub in s"
  },
  {
    "question": "Python sort list of tuples by second element",
    "answer": "def sort_by_second(tuples):\n    return sorted(tuples, key=lambda x: x[1])"
  },
  {
    "question": "Python check if year is leap year",
    "answer": "def is_leap_year(year):\n    return year % 4 == 0 and (year % 100 != 0 or year % 400 == 0)"
  },
  {
    "question": "Python get file size",
    "answer": "import os\n\ndef file_size(path):\n    return os.path.getsize(path)"
  },
  {
    "question": "Python remove punctuation from string",
    "answer": "import string\n\ndef remove_punctuation(s):\n    return s.translate(str.maketrans('', '', string.punctuation))"
  },
  {
    "question": "Python read file line by line and print",
    "answer": "def read_file_lines(path):\n    with open(path, 'r') as f:\n        for line in f:\n            print(line.strip())"
  },
  {
    "question": "Python convert list of strings to comma separated string",
    "answer": "def list_to_string(lst):\n    return ','.join(lst)"
  },
  {
    "question": "Python generate random password of length 10",
    "answer": "import random\nimport string\n\ndef generate_password(length=10):\n    chars = string.ascii_letters + string.digits\n    return ''.join(random.choice(chars) for _ in range(length))"
  },
  {
    "question": "Python unique elements in list",
    "answer": "def unique_elements(lst):\n    return list(set(lst))"
  },
  {
    "question": "Python most frequent element in list",
    "answer": "from collections import Counter\n\ndef most_frequent(lst):\n    return Counter(lst).most_common(1)[0][0]"
  },
  {
    "question": "Python average of list",
    "answer": "def average(lst):\n    return sum(lst) / len(lst) if lst else 0"
  },
  {
    "question": "Python check anagrams",
    "answer": "def are_anagrams(s1, s2):\n    return sorted(s1) == sorted(s2)"
  },
  {
    "question": "Python count vowels",
    "answer": "def count_vowels(s):\n    return sum(1 for c in s.lower() if c in 'aeiou')"
  },
  {
    "question": "Python get current datetime",
    "answer": "from datetime import datetime\n\ndef current_datetime():\n    return datetime.now()"
  },
  {
    "question": "Python triangle area",
    "answer": "def triangle_area(base, height):\n    return 0.5 * base * height"
  },
  {
    "question": "Python check list sorted ascending",
    "answer": "def is_sorted(lst):\n    return lst == sorted(lst)"
  },
  {
    "question": "Python square root",
    "answer": "import math\n\ndef square_root(x):\n    return math.sqrt(x)"
  },
  {
    "question": "Python list files in directory",
    "answer": "import os\n\ndef list_files(path):\n    return os.listdir(path)"
  },
  {
    "question": "Python longest word in sentence",
    "answer": "def longest_word(sentence):\n    words = sentence.split()\n    return max(words, key=len)"
  },
  {
    "question": "Python check Armstrong number",
    "answer": "def is_armstrong(n):\n    num_str = str(n)\n    power = len(num_str)\n    return n == sum(int(digit) ** power for digit in num_str)"
  },
  {
    "question": "Python capitalize first letter each word",
    "answer": "def capitalize_words(s):\n    return s.title()"
  },
  {
    "question": "Python list of squares 1 to 10",
    "answer": "squares = [x**2 for x in range(1, 11)]"
  },
  {
    "question": "Python sum of digits",
    "answer": "def sum_of_digits(n):\n    return sum(int(d) for d in str(abs(n)))"
  },
  {
    "question": "Python replace spaces with underscores",
    "answer": "def replace_spaces(s):\n    return s.replace(' ', '_')"
  },
  {
    "question": "Python binary to decimal",
    "answer": "def binary_to_decimal(b):\n    return int(b, 2)"
  },
  {
    "question": "Python check all elements unique",
    "answer": "def all_unique(lst):\n    return len(lst) == len(set(lst))"
  },
  {
    "question": "Python remove whitespace from string",
    "answer": "def remove_whitespace(s):\n    return ''.join(s.split())"
  },
  {
    "question": "Python create dict from two lists",
    "answer": "def lists_to_dict(keys, values):\n    return dict(zip(keys, values))"
  },
  {
    "question": "Python max of three numbers",
    "answer": "def max_of_three(a, b, c):\n    return max(a, b, c)"
  },
  {
    "question": "Python multiplication table",
    "answer": "def multiplication_table(n):\n    for i in range(1, 11):\n        print(f\"{n} x {i} = {n * i}\")"
  },
  {
    "question": "Python common elements between lists",
    "answer": "def common_elements(lst1, lst2):\n    return list(set(lst1) & set(lst2))"
  },
  {
    "question": "Python Celsius to Kelvin",
    "answer": "def celsius_to_kelvin(c):\n    return c + 273.15"
  },
  {
    "question": "Python factorial using math module",
    "answer": "import math\n\ndef factorial(n):\n    return math.factorial(n)"
  },
  {
    "question": "Python compound interest",
    "answer": "def compound_interest(principal, rate, time):\n    return principal * (1 + rate) ** time"
  },
  {
    "question": "Python count lines in file",
    "answer": "def count_lines(filepath):\n    with open(filepath) as f:\n        return sum(1 for _ in f)"
  },
  {
    "question": "Python reverse words in file",
    "answer": "def reverse_words_file(input_path, output_path):\n    with open(input_path) as f:\n        words = f.read().split()\n    with open(output_path, 'w') as f:\n        f.write(' '.join(reversed(words)))"
  },
  {
    "question": "Python index of element in list",
    "answer": "def index_of(lst, element):\n    return lst.index(element) if element in lst else -1"
  },
  {
    "question": "Python remove all occurrences from list",
    "answer": "def remove_all(lst, value):\n    return [x for x in lst if x != value]"
  },
  {
    "question": "Python merge two sorted lists",
    "answer": "def merge_sorted_lists(l1, l2):\n    return sorted(l1 + l2)"
  },
  {
    "question": "Python create file and write text",
    "answer": "def create_file(path, text):\n    with open(path, 'w') as f:\n        f.write(text)"
  },
  {
    "question": "Python check list contains only numbers",
    "answer": "def only_numbers(lst):\n    return all(isinstance(x, (int, float)) for x in lst)"
  },
  {
    "question": "Python sum numbers divisible by 3",
    "answer": "def sum_divisible_by_three(lst):\n    return sum(x for x in lst if x % 3 == 0)"
  },
  {
    "question": "Python generate first n primes",
    "answer": "def first_n_primes(n):\n    primes = []\n    num = 2\n    while len(primes) < n:\n        if all(num % p != 0 for p in primes):\n            primes.append(num)\n        num += 1\n    return primes"
  },
  {
    "question": "Python rename files with prefix",
    "answer": "import os\n\ndef rename_files_with_prefix(directory, prefix):\n    for filename in os.listdir(directory):\n        old_path = os.path.join(directory, filename)\n        new_path = os.path.join(directory, prefix + filename)\n        os.rename(old_path, new_path)"
  },
  {
    "question": "Python median of list",
    "answer": "def median(lst):\n    sorted_lst = sorted(lst)\n    n = len(sorted_lst)\n    mid = n // 2\n    if n % 2 == 0:\n        return (sorted_lst[mid - 1] + sorted_lst[mid]) / 2\n    else:\n        return sorted_lst[mid]"
  },
  {
    "question": "Python check pangram",
    "answer": "import string\n\ndef is_pangram(s):\n    return set(string.ascii_lowercase) <= set(s.lower())"
  },
  {
    "question": "Python power of number",
    "answer": "def power(base, exponent):\n    return base ** exponent"
  },
  {
    "question": "Python decimal to binary",
    "answer": "def decimal_to_binary(n):\n    return bin(n)[2:]"
  },
  {
    "question": "Python remove None from list",
    "answer": "def remove_none(lst):\n    return [x for x in lst if x is not None]"
  },
  {
    "question": "Python count word occurrences in file",
    "answer": "def count_word_in_file(filepath, word):\n    with open(filepath) as f:\n        return f.read().split().count(word)"
  },
  {
    "question": "Python check string starts with prefix",
    "answer": "def starts_with(s, prefix):\n    return s.startswith(prefix)"
  },
  {
    "question": "Python factorial using reduce",
    "answer": "from functools import reduce\n\ndef factorial(n):\n    return reduce(lambda x, y: x * y, range(1, n + 1), 1)"
  },
  {
    "question": "Python sort list descending",
    "answer": "def sort_descending(lst):\n    return sorted(lst, reverse=True)"
  },
  {
    "question": "Python generate random integers list",
    "answer": "import random\n\ndef random_integers(count, start, end):\n    return [random.randint(start, end) for _ in range(count)]"
  },
  {
    "question": "Python check even or odd",
    "answer": "def is_even(n):\n    return n % 2 == 0"
  },
  {
    "question": "Python remove duplicates preserve order",
    "answer": "def remove_duplicates(lst):\n    seen = set()\n    return [x for x in lst if not (x in seen or seen.add(x))]"
  },
  {
    "question": "Python nth Fibonacci number",
    "answer": "def fibonacci(n):\n    a, b = 0, 1\n    for _ in range(n):\n        a, b = b, a + b\n    return a"
  },
  {
    "question": "Python string to title case",
    "answer": "def to_title_case(s):\n    return s.title()"
  },
  {
    "question": "Python check string contains only digits",
    "answer": "def only_digits(s):\n    return s.isdigit()"
  },
  {
    "question": "Python list even numbers 1 to 100",
    "answer": "evens = [x for x in range(1, 101) if x % 2 == 0]"
  },
  {
    "question": "Python rectangle perimeter",
    "answer": "def perimeter(length, width):\n    return 2 * (length + width)"
  },
  {
    "question": "Python split string into words",
    "answer": "def split_words(s):\n    return s.split()"
  },
  {
    "question": "Python create nested dictionary",
    "answer": "nested_dict = {'outer': {'inner': 'value'}}"
  },
  {
    "question": "Python multiply all numbers in list",
    "answer": "from functools import reduce\n\ndef multiply_list(lst):\n    return reduce(lambda x, y: x * y, lst, 1)"
  },
  {
    "question": "Python validate email address",
    "answer": "import re\n\ndef is_valid_email(email):\n    pattern = r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$'\n    return re.match(pattern, email) is not None"
  },
  {
    "question": "Python count uppercase letters",
    "answer": "def count_uppercase(s):\n    return sum(1 for c in s if c.isupper())"
  },
  {
    "question": "Python remove vowels from string",
    "answer": "def remove_vowels(s):\n    return ''.join(c for c in s if c.lower() not in 'aeiou')"
  },
  {
    "question": "Python distance between two points",
    "answer": "import math\n\ndef distance(p1, p2):\n    return math.hypot(p2[0] - p1[0], p2[1] - p1[1])"
  },
  {
    "question": "Python check key in dictionary",
    "answer": "def key_exists(d, key):\n    return key in d"
  },
  {
    "question": "Python merge multiple dictionaries",
    "answer": "def merge_dicts(*dicts):\n    result = {}\n    for d in dicts:\n        result.update(d)\n    return result"
  },
  {
    "question": "Python check palindrome ignoring spaces",
    "answer": "def is_palindrome(s):\n    s_clean = s.replace(' ', '').lower()\n    return s_clean == s_clean[::-1]"
  },
  {
    "question": "Python find pairs with target sum",
    "answer": "def find_pairs(lst, target):\n    pairs = []\n    seen = set()\n    for num in lst:\n        complement = target - num\n        if complement in seen:\n            pairs.append((complement, num))\n        seen.add(num)\n    return pairs"
  },
  {
    "question": "Python count word occurrences in string",
    "answer": "from collections import Counter\n\ndef count_words(s):\n    return Counter(s.split())"
  },
  {
    "question": "Python extract digits from string",
    "answer": "def extract_digits(s):\n    return ''.join(c for c in s if c.isdigit())"
  },
  {
    "question": "Python generate string permutations",
    "answer": "from itertools import permutations\n\ndef string_permutations(s):\n    return [''.join(p) for p in permutations(s)]"
  },
  {
    "question": "Python sort dictionary by values",
    "answer": "def sort_dict_by_values(d):\n    return dict(sorted(d.items(), key=lambda item: item[1]))"
  },
  {
    "question": "Python replace vowels with asterisk",
    "answer": "def replace_vowels(s):\n    return ''.join('*' if c.lower() in 'aeiou' else c for c in s)"
  },
  {
    "question": "Python check lists have common element",
    "answer": "def have_common_element(l1, l2):\n    return bool(set(l1) & set(l2))"
  },
  {
    "question": "Python print primes 1 to 50",
    "answer": "def primes_1_to_50():\n    for n in range(2, 51):\n        if all(n % d != 0 for d in range(2, int(n**0.5)+1)):\n            print(n)"
  },
  {
    "question": "Python list of chars to string",
    "answer": "def chars_to_string(chars):\n    return ''.join(chars)"
  },
  {
    "question": "Python remove non-alphanumeric characters",
    "answer": "def remove_non_alnum(s):\n    return ''.join(c for c in s if c.isalnum())"
  },
  {
    "question": "Python check valid identifier",
    "answer": "def is_valid_identifier(s):\n    return s.isidentifier()"
  },
  {
    "question": "Python count words in sentence",
    "answer": "def count_words(s):\n    return len(s.split())"
  },
  {
    "question": "Python list to comma-separated string",
    "answer": "def list_to_csv(lst):\n    return ','.join(str(x) for x in lst)"
  },
  {
    "question": "Python swap first and last list elements",
    "answer": "def swap_first_last(lst):\n    if len(lst) > 1:\n        lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"
  },
  {
    "question": "Python check perfect square",
    "answer": "import math\n\ndef is_perfect_square(n):\n    return math.isqrt(n)**2 == n"
  },
  {
    "question": "Python round number two decimals",
    "answer": "def round_two_decimals(x):\n    return round(x, 2)"
  },
  {
    "question": "Python remove empty strings from list",
    "answer": "def remove_empty_strings(lst):\n    return [s for s in lst if s]"
  },
   {
    "question": "Python explain error undefined variable",
    "answer": "The error occurs because `unknown_variable` was never defined before being passed to `print()`. You must assign a value to the variable first."
  },
  {
    "question": "Python unique elements preserving order",
    "answer": "def unique_preserve_order(lst):\n    seen = set()\n    return [x for x in lst if not (x in seen or seen.add(x))]"
  },
  {
    "question": "Python nested loop to list comprehension",
    "answer": "result = [i * j for i in range(5) for j in range(5)]"
  },
  {
    "question": "Python merge dictionaries recursively",
    "answer": "def recursive_merge(d1, d2):\n    for k, v in d2.items():\n        if k in d1 and isinstance(d1[k], dict) and isinstance(v, dict):\n            recursive_merge(d1[k], v)\n        else:\n            d1[k] = v\n    return d1"
  },
  {
    "question": "Python explain zip function",
    "answer": "`zip()` combines multiple iterables into an iterator of tuples, where each tuple contains elements from each iterable at the same position."
  },
  {
    "question": "Python count character occurrences case insensitive",
    "answer": "from collections import Counter\n\ndef count_chars(s):\n    return Counter(s.lower())"
  },
  {
    "question": "Python sort strings by length",
    "answer": "def sort_by_length(lst):\n    return sorted(lst, key=len)"
  },
  {
    "question": "Python 10 most common words in file",
    "answer": "from collections import Counter\n\ndef top_10_words(filepath):\n    with open(filepath) as f:\n        words = f.read().split()\n    return Counter(words).most_common(10)"
  },
  {
    "question": "Python explain deepcopy vs copy",
    "answer": "`copy()` creates a shallow copy (nested objects are shared), while `deepcopy()` creates a fully independent clone including nested objects."
  },
  {
    "question": "Python check list palindrome",
    "answer": "def is_list_palindrome(lst):\n    return lst == lst[::-1]"
  },
  {
    "question": "Python validate email address",
    "answer": "import re\n\ndef is_valid_email(s):\n    return re.match(r'^[\\w\\.-]+@[\\w\\.-]+\\.\\w+$', s) is not None"
  },
  {
    "question": "Python explain generators vs lists",
    "answer": "Generators yield items one at a time using `yield`, consuming less memory, while lists store all items in memory."
  },
  {
    "question": "Python intersection of two lists",
    "answer": "def list_intersection(l1, l2):\n    return list(set(l1) & set(l2))"
  },
  {
    "question": "Python remove global variable",
    "answer": "def make_incrementer():\n    counter = 0\n    def increment():\n        nonlocal counter\n        counter += 1\n        return counter\n    return increment"
  },
  {
    "question": "Python flatten nested dictionary",
    "answer": "def flatten_dict(d, parent_key='', sep='.'):\n    items = {}\n    for k, v in d.items():\n        new_key = parent_key + sep + k if parent_key else k\n        if isinstance(v, dict):\n            items.update(flatten_dict(v, new_key, sep))\n        else:\n            items[new_key] = v\n    return items"
  },
  {
    "question": "Python even numbers squared",
    "answer": "def even_squares(lst):\n    return [x**2 for x in lst if x % 2 == 0]"
  },
  {
    "question": "Python explain *args and **kwargs",
    "answer": "`*args` allows passing variable positional arguments as a tuple. `**kwargs` allows passing variable keyword arguments as a dictionary."
  },
  {
    "question": "Python validate ASCII string",
    "answer": "def is_ascii(s):\n    try:\n        s.encode('ascii')\n        return True\n    except UnicodeEncodeError:\n        return False"
  },
  {
    "question": "Python days between dates",
    "answer": "from datetime import datetime\n\ndef days_between(d1, d2):\n    date1 = datetime.strptime(d1, '%Y-%m-%d')\n    date2 = datetime.strptime(d2, '%Y-%m-%d')\n    return abs((date2 - date1).days)"
  },
  {
    "question": "Python explain mutable default arguments",
    "answer": "Using mutable defaults like lists can lead to unexpected behavior because the same object is shared across calls. Always use `None` and create a new object inside the function."
  },
   {
    "question": "Python list to comma-separated string",
    "answer": "def list_to_csv(lst):\n    return ','.join(str(x) for x in lst)"
  },
  {
    "question": "Python detect pangram",
    "answer": "import string\n\ndef is_pangram(s):\n    return set(string.ascii_lowercase) <= set(s.lower())"
  },
  {
    "question": "Python classmethod vs staticmethod",
    "answer": "`classmethod` receives the class as the first argument and can modify class state. `staticmethod` does not receive any implicit first argument and behaves like a regular function in a class."
  },
  {
    "question": "Python swap dict keys and values",
    "answer": "def swap_dict(d):\n    return {v: k for k, v in d.items()}"
  },
  {
    "question": "Python longest common prefix in strings",
    "answer": "def longest_common_prefix(strs):\n    if not strs:\n        return ''\n    prefix = strs[0]\n    for s in strs[1:]:\n        while not s.startswith(prefix):\n            prefix = prefix[:-1]\n            if not prefix:\n                return ''\n    return prefix"
  },
  {
    "question": "Python explain decorator with example",
    "answer": "A decorator wraps a function to extend its behavior.\n\nExample:\n\ndef my_decorator(func):\n    def wrapper():\n        print(\"Before\")\n        func()\n        print(\"After\")\n    return wrapper\n\n@my_decorator\ndef say_hello():\n    print(\"Hello\")"
  },
  {
    "question": "Python download URL content to file",
    "answer": "import requests\n\ndef download_url(url, filepath):\n    r = requests.get(url)\n    with open(filepath, 'wb') as f:\n        f.write(r.content)"
  },
  {
    "question": "Python JSON string to dictionary",
    "answer": "import json\n\ndef json_to_dict(s):\n    return json.loads(s)"
  },
  {
    "question": "Python explain __init__",
    "answer": "`__init__` is the constructor method that initializes a new object’s state when a class instance is created."
  },
  {
    "question": "Python sort list of dicts by key",
    "answer": "def sort_dicts(lst, key):\n    return sorted(lst, key=lambda d: d[key])"
  },
  {
    "question": "Python create and use namedtuple",
    "answer": "from collections import namedtuple\n\nPoint = namedtuple('Point', ['x', 'y'])\np = Point(1, 2)\nprint(p.x, p.y)"
  },
  {
    "question": "Python explain with statement files",
    "answer": "`with` handles opening and closing resources automatically.\n\nExample:\nwith open('file.txt') as f:\n    data = f.read()"
  },
  {
    "question": "Python parse query string to dict",
    "answer": "from urllib.parse import parse_qs\n\ndef parse_query(s):\n    return {k: v[0] for k, v in parse_qs(s).items()}"
  },
  {
    "question": "Python mean median mode",
    "answer": "import statistics\n\ndef stats(lst):\n    return {\n        'mean': statistics.mean(lst),\n        'median': statistics.median(lst),\n        'mode': statistics.mode(lst)\n    }"
  },
  {
    "question": "Python explain __str__ vs __repr__",
    "answer": "`__str__` returns a readable string for users. `__repr__` returns an unambiguous string for developers and debugging."
  },
  {
    "question": "Python rotate list n positions right",
    "answer": "def rotate_right(lst, n):\n    n = n % len(lst)\n    return lst[-n:] + lst[:-n]"
  },
  {
    "question": "Python validate IPv4 address",
    "answer": "import re\n\ndef is_valid_ipv4(s):\n    pattern = r'^((25[0-5]|2[0-4]\\d|1\\d{2}|[1-9]?\\d)(\\.|$)){4}$'\n    return re.match(pattern, s) is not None"
  },
  {
    "question": "Python is vs equals",
    "answer": "`is` checks object identity (same memory address). `==` checks value equality."
  },
  {
    "question": "Python remove falsy values from list",
    "answer": "def remove_falsy(lst):\n    return [x for x in lst if x]"
  },
  {
    "question": "Python chunk list into sublists",
    "answer": "def chunk_list(lst, size):\n    return [lst[i:i+size] for i in range(0, len(lst), size)]"
  },
  {
    "question": "Python explain lambda function with example",
    "answer": "A `lambda` creates an anonymous function.\n\nExample:\nsquare = lambda x: x * x\nprint(square(5))"
  },
  {
    "question": "Python read CSV and filter rows by column",
    "answer": "import csv\n\ndef filter_csv(filepath, column, value):\n    with open(filepath) as f:\n        reader = csv.DictReader(f)\n        for row in reader:\n            if row[column] == value:\n                print(row)"
  },
  {
    "question": "Python reverse dictionary mapping",
    "answer": "def reverse_dict(d):\n    return {v: k for k, v in d.items()}"
  },
  {
    "question": "Python explain enumerate",
    "answer": "`enumerate()` returns pairs of (index, value) while iterating.\n\nExample:\nfor i, x in enumerate(['a','b']): print(i, x)"
  },
  {
    "question": "Python validate hexadecimal string",
    "answer": "def is_hex(s):\n    try:\n        int(s, 16)\n        return True\n    except ValueError:\n        return False"
  },
  {
    "question": "Python merge two sorted lists",
    "answer": "def merge_sorted(l1, l2):\n    result = []\n    i = j = 0\n    while i < len(l1) and j < len(l2):\n        if l1[i] < l2[j]:\n            result.append(l1[i])\n            i += 1\n        else:\n            result.append(l2[j])\n            j += 1\n    result.extend(l1[i:])\n    result.extend(l2[j:])\n    return result"
  },
  {
    "question": "Python explain duck typing",
    "answer": "Duck typing means an object's suitability is determined by the presence of methods and properties rather than its type. \"If it walks like a duck and quacks like a duck...\""
  },
  {
    "question": "Python rename txt files with backup suffix",
    "answer": "import os\n\ndef rename_txt_backup(directory):\n    for filename in os.listdir(directory):\n        if filename.endswith('.txt'):\n            base = filename[:-4]\n            new_name = base + '_backup.txt'\n            os.rename(os.path.join(directory, filename), os.path.join(directory, new_name))"
  },
  {
    "question": "Python remove HTML tags from string",
    "answer": "import re\n\ndef remove_html(s):\n    return re.sub('<.*?>', '', s)"
  },
  {
    "question": "Python generate all substrings of string",
    "answer": "def all_substrings(s):\n    return [s[i:j] for i in range(len(s)) for j in range(i+1, len(s)+1)]"
  },
  {
    "question": "Python explain Global Interpreter Lock GIL",
    "answer": "The GIL is a mutex that allows only one thread to execute Python bytecode at a time, limiting true parallelism in CPython."
  },
  {
    "question": "Python longest increasing subsequence",
    "answer": "def longest_increasing_subsequence(seq):\n    import bisect\n    sub = []\n    for x in seq:\n        i = bisect.bisect_left(sub, x)\n        if i == len(sub):\n            sub.append(x)\n        else:\n            sub[i] = x\n    return sub"
  },
  {
    "question": "Python zip folder",
    "answer": "import shutil\n\ndef zip_folder(source_dir, zip_name):\n    shutil.make_archive(zip_name, 'zip', source_dir)"
  },
  {
    "question": "Python validate credit card Luhn algorithm",
    "answer": "def luhn_check(card_number):\n    digits = [int(d) for d in str(card_number)][::-1]\n    total = 0\n    for i, d in enumerate(digits):\n        if i % 2:\n            d *= 2\n            if d > 9:\n                d -= 9\n        total += d\n    return total % 10 == 0"
  },
  {
    "question": "Python explain __getitem__ in classes",
    "answer": "`__getitem__` lets you make objects subscriptable.\n\nExample:\nclass My:\n    def __getitem__(self, key):\n        return key*2"
  },
  {
    "question": "Python compute nth Catalan number",
    "answer": "import math\n\ndef catalan(n):\n    return math.comb(2*n, n)//(n+1)"
  },
  {
    "question": "Python list running processes with psutil",
    "answer": "import psutil\n\ndef list_processes():\n    return [p.info for p in psutil.process_iter(['pid','name'])]"
  },
  {
    "question": "Python check if matrix is symmetric",
    "answer": "def is_symmetric(matrix):\n    return matrix == [list(row) for row in zip(*matrix)]"
  },
  {
    "question": "Python explain float nan comparison",
    "answer": "NaN is never equal to itself by definition of IEEE 754, so `float('nan') != float('nan')` is True."
  },
  {
    "question": "Python parse XML extract all text",
    "answer": "import xml.etree.ElementTree as ET\n\ndef extract_text(xml_string):\n    root = ET.fromstring(xml_string)\n    return ' '.join(root.itertext())"
  },
   {
    "question": "Python serialize dict to JSON file",
    "answer": "import json\n\ndef save_json(d, filepath):\n    with open(filepath, 'w') as f:\n        json.dump(d, f, indent=2)"
  },
  {
    "question": "Python compute SHA-256 hash",
    "answer": "import hashlib\n\ndef sha256_hash(s):\n    return hashlib.sha256(s.encode()).hexdigest()"
  },
  {
    "question": "Python explain context managers and create one",
    "answer": "Context managers handle setup and cleanup (e.g., files).\n\nExample:\nclass MyContext:\n    def __enter__(self):\n        print('Enter')\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print('Exit')"
  },
  {
    "question": "Python detect circular references in graph",
    "answer": "def has_cycle(graph):\n    visited = set()\n    stack = set()\n    def visit(node):\n        if node in stack:\n            return True\n        if node in visited:\n            return False\n        stack.add(node)\n        for neighbor in graph.get(node, []):\n            if visit(neighbor):\n                return True\n        stack.remove(node)\n        visited.add(node)\n        return False\n    return any(visit(n) for n in graph)"
  },
  {
    "question": "Python solve Tower of Hanoi",
    "answer": "def hanoi(n, source, target, auxiliary):\n    if n > 0:\n        hanoi(n-1, source, auxiliary, target)\n        print(f\"Move disk {n} from {source} to {target}\")\n        hanoi(n-1, auxiliary, target, source)"
  },
  {
    "question": "Python explain super with multiple inheritance",
    "answer": "`super()` lets you call methods from parent classes in the MRO chain, making cooperative multiple inheritance possible."
  },
  {
    "question": "Python create REST API with Flask",
    "answer": "from flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return jsonify({'message': 'Hello World'})\n\nif __name__ == '__main__':\n    app.run()"
  },
  {
    "question": "Python monitor memory usage over time",
    "answer": "import psutil, time\n\ndef monitor_memory():\n    while True:\n        print(psutil.virtual_memory().percent)\n        time.sleep(1)"
  },
  {
    "question": "Python pretty-print nested dictionary",
    "answer": "import json\n\ndef pretty_print(d):\n    print(json.dumps(d, indent=2))"
  },
  {
    "question": "Python explain monkey patching",
    "answer": "Monkey patching means dynamically changing a class or module at runtime, e.g., replacing methods."
  },
  {
    "question": "Python caching decorator",
    "answer": "def cache(func):\n    saved = {}\n    def wrapper(*args):\n        if args not in saved:\n            saved[args] = func(*args)\n        return saved[args]\n    return wrapper"
  },
  {
    "question": "Python validate UUID string",
    "answer": "import uuid\n\ndef is_valid_uuid(s):\n    try:\n        uuid.UUID(s)\n        return True\n    except ValueError:\n        return False"
  },
  {
    "question": "Python generate primes up to n",
    "answer": "def primes_upto(n):\n    sieve = [True]*(n+1)\n    sieve[0:2] = [False, False]\n    for i in range(2, int(n**0.5)+1):\n        if sieve[i]:\n            sieve[i*i:n+1:i] = [False]*len(range(i*i, n+1, i))\n    return [x for x, p in enumerate(sieve) if p]"
  },
  {
    "question": "Python map vs list comprehension",
    "answer": "`map()` applies a function to each item lazily. List comprehensions are more readable and return a list immediately."
  },
  {
    "question": "Python parse and validate cron expression",
    "answer": "from croniter import croniter\n\ndef is_valid_cron(expr):\n    try:\n        croniter(expr)\n        return True\n    except:\n        return False"
  },
  {
    "question": "Python convert Markdown to HTML",
    "answer": "import markdown\n\ndef md_to_html(md_text):\n    return markdown.markdown(md_text)"
  },
  {
    "question": "Python progress bar during iteration",
    "answer": "from tqdm import tqdm\n\ndef process(items):\n    for item in tqdm(items):\n        pass"
  },
  {
    "question": "Python explain __slots__",
    "answer": "`__slots__` restricts attribute creation to save memory and speed up attribute access."
  },
  {
    "question": "Python balance parentheses",
    "answer": "def is_balanced(s):\n    stack = []\n    mapping = {')':'(','}':'{',']':'['}\n    for c in s:\n        if c in mapping.values():\n            stack.append(c)\n        elif c in mapping:\n            if not stack or stack.pop() != mapping[c]:\n                return False\n    return not stack"
  },
  {
    "question": "Python simulate rolling two dice 1000 times",
    "answer": "import random\n\ndef roll_dice():\n    return [ (random.randint(1,6), random.randint(1,6)) for _ in range(1000)]"
  },
  {
    "question": "Python explain why list mutable tuple immutable",
    "answer": "`list` is mutable because elements can be added, removed, or changed. `tuple` is immutable: once created, elements cannot be modified."
  },
  {
    "question": "Python generate random passwords with constraints",
    "answer": "import random, string\n\ndef random_password(length=12):\n    chars = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(random.choice(chars) for _ in range(length))"
  },
  {
    "question": "Python binary search",
    "answer": "def binary_search(lst, target):\n    left, right = 0, len(lst)-1\n    while left <= right:\n        mid = (left + right)//2\n        if lst[mid]==target:\n            return mid\n        elif lst[mid]<target:\n            left=mid+1\n        else:\n            right=mid-1\n    return -1"
  },
  {
    "question": "Python create min-heap with heapq",
    "answer": "import heapq\n\ndef create_min_heap(lst):\n    heapq.heapify(lst)\n    return lst"
  },
  {
    "question": "Python explain coroutines vs generators",
    "answer": "Coroutines can consume values with `send()` and pause execution at `await`. Generators only produce values with `yield`."
  },
  {
    "question": "Python find duplicate files in directory",
    "answer": "import os, hashlib\n\ndef find_duplicates(path):\n    hashes = {}\n    for root,_,files in os.walk(path):\n        for f in files:\n            fp = os.path.join(root,f)\n            h = hashlib.md5(open(fp,'rb').read()).hexdigest()\n            if h in hashes:\n                print(f'Duplicate: {fp} and {hashes[h]}')\n            else:\n                hashes[h]=fp"
  },
  {
    "question": "Python parse INI config files",
    "answer": "import configparser\n\ndef read_ini(filepath):\n    config = configparser.ConfigParser()\n    config.read(filepath)\n    return config"
  },
  {
    "question": "Python compute Levenshtein distance",
    "answer": "def levenshtein(s1, s2):\n    if len(s1)<len(s2):\n        return levenshtein(s2,s1)\n    if len(s2)==0:\n        return len(s1)\n    prev=range(len(s2)+1)\n    for i,c1 in enumerate(s1):\n        curr=[i+1]\n        for j,c2 in enumerate(s2):\n            insert=prev[j+1]+1\n            delete=curr[j]+1\n            replace=prev[j]+(c1!=c2)\n            curr.append(min(insert,delete,replace))\n        prev=curr\n    return prev[-1]"
  },
  {
    "question": "Python explain __enter__ and __exit__",
    "answer": "`__enter__` sets up a context (e.g., open file), `__exit__` handles cleanup (e.g., close file). Used with `with`."
  },
  {
    "question": "Python validate palindrome ignoring case punctuation",
    "answer": "import re\n\ndef is_clean_palindrome(s):\n    s=re.sub(r'[^a-zA-Z0-9]', '', s).lower()\n    return s==s[::-1]"
  },
  {
    "question": "Python check if port open on remote server",
    "answer": "import socket\n\ndef is_port_open(host, port):\n    with socket.socket() as s:\n        s.settimeout(1)\n        try:\n            s.connect((host,port))\n            return True\n        except:\n            return False"
  },
  {
    "question": "Python serialize deserialize binary tree",
    "answer": "class Node:\n    def __init__(self,v,l=None,r=None):\n        self.v=v;self.l=l;self.r=r\n\ndef serialize(node):\n    if not node:return '#'\n    return f'{node.v},{serialize(node.l)},{serialize(node.r)}'\n\ndef deserialize(data):\n    def helper(vals):\n        v=next(vals)\n        if v=='#':return None\n        n=Node(v)\n        n.l=helper(vals)\n        n.r=helper(vals)\n        return n\n    return helper(iter(data.split(',')))"
  },
  {
    "question": "Python explain async await",
    "answer": "`async` defines a coroutine. `await` pauses execution until the awaited coroutine completes."
  },
  {
    "question": "Python find all permutations of list",
    "answer": "from itertools import permutations\n\ndef all_permutations(lst):\n    return list(permutations(lst))"
  },
  {
    "question": "Python watch directory for changes",
    "answer": "from watchdog.observers import Observer\nfrom watchdog.events import FileSystemEventHandler\n\nclass Handler(FileSystemEventHandler):\n    def on_modified(self, e):\n        print(f'Modified: {e.src_path}')\n\ndef watch(path):\n    o=Observer()\n    o.schedule(Handler(),path,recursive=False)\n    o.start()"
  },
  {
    "question": "Python explain memoization",
    "answer": "Memoization caches function outputs so repeated calls with the same inputs return cached results."
  },
  {
    "question": "Python iterative Fibonacci numbers",
    "answer": "def fibonacci(n):\n    a,b=0,1\n    for _ in range(n):\n        a,b=b,a+b\n    return a"
  },
  {
    "question": "Python convert Roman numerals to integer",
    "answer": "def roman_to_int(s):\n    vals={'I':1,'V':5,'X':10,'L':50,'C':100,'D':500,'M':1000}\n    total=0\n    prev=0\n    for c in reversed(s):\n        v=vals[c]\n        if v<prev:\n            total-=v\n        else:\n            total+=v\n        prev=v\n    return total"
  },
  {
    "question": "Python explain yield",
    "answer": "`yield` turns a function into a generator, producing values one at a time and pausing execution between yields."
  },
  {
    "question": "Python validate balanced brackets",
    "answer": "def is_balanced(s):\n    stack=[]\n    pairs={')':'(','}':'{',']':'['}\n    for c in s:\n        if c in pairs.values():\n            stack.append(c)\n        elif c in pairs:\n            if not stack or stack.pop()!=pairs[c]:\n                return False\n    return not stack"
  }
]

